{"task_id": "mux2to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] a,\n    input [99:0] b,\n    input sel,\n    output [99:0] out\n);\n    assign out = sel ? b : a;\nendmodule"}
{"task_id": "m2014_q6b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "module top_module(\n    input [3:1] y,\n    input w,\n    output reg Y2);\n\nalways @(*) begin\n    case(y)\n        3'b000: Y2 = w; // A\n        3'b001: Y2 = 1'b0; // B\n        3'b010: Y2 = 1'b0; // C\n        3'b011: Y2 = 1'b1; // D\n        3'b100: Y2 = 1'b1; // E\n        3'b101: Y2 = 1'b0; // F\n        default: Y2 = 1'bx;\n    endcase\nend\n\nendmodule"}
{"task_id": "ringer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "module top_module(\n    input ring, \n    input vibrate_mode,\n    output ringer,\n    output motor\n);\n    assign ringer = ~vibrate_mode & ring;\n    assign motor = vibrate_mode & ring;\n\nendmodule"}
{"task_id": "alwaysblock1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an AND gate using both an assign statement and a combinational always block. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out_assign,\n    output reg out_alwaysblock\n);\n\n    // AND gate using assign statement\n    assign out_assign = a & b;\n\n    // AND gate using combinational always block\n    always @(*) begin\n        out_alwaysblock = a & b;\n    end\n\nendmodule"}
{"task_id": "zero", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that always outputs a LOW.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput zero);\n", "completion": "module top_module(\n    output zero);\n    \n    assign zero = 1'b0;\n\nendmodule"}
{"task_id": "circuit7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg q\n);\n  always @(posedge clk) begin\n    if (a)\n      q <= 0;\n    else\n      q <= 1;\n  end\nendmodule"}
{"task_id": "ece241_2014_q5a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n    reg [1:0] state, next_state;\n    reg carry;\n    localparam S0 = 2'b00, S1 = 2'b01, S2 = 2'b10;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= S0;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            S0: next_state = S1;\n            S1: next_state = x ? S1 : S2;\n            S2: next_state = S2;\n            default: next_state = S0;\n        endcase\n    end\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            carry <= 1'b0;\n        else\n            carry <= state == S1 ? x : carry;\n    end\n\n    assign z = carry ? ~x : x;\n\nendmodule"}
{"task_id": "fsm3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n    localparam [1:0] A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n    reg [1:0] current_state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= A;\n        else\n            current_state <= next_state;\n    end\n\n    always @(*) begin\n        case (current_state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A;\n        endcase\n    end\n\n    assign out = (current_state == D);\n\nendmodule"}
{"task_id": "vector2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that reverses the byte order of a 32-bit vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [31:0] in,\n    output [31:0] out\n);\n    assign out = {in[7:0], in[15:8], in[23:16], in[31:24]};\nendmodule"}
{"task_id": "m2014_q4c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a simple D flip flop with active high synchronous reset (reset output to 0).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input r,\n    output logic q\n);\n\n    always @(posedge clk) begin\n        if (r)\n            q <= 1'b0; // Reset output to 0\n        else\n            q <= d; // Set output to input d\n    end\n\nendmodule"}
{"task_id": "mt2015_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the boolean function z = (x^y) & x.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n    \n    assign z = (x ^ y) & x;\n    \nendmodule"}
{"task_id": "shift18", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input ena,\n    input [1:0] amount,\n    input [63:0] data,\n    output reg [63:0] q);\n\nalways @(posedge clk) begin\n    if (load)\n        q <= data;\n    else if (ena)\n        case (amount)\n            2'b00: q <= {q[62:0], 1'b0}; // Shift left by 1\n            2'b01: q <= {q[55:0], 8'b0}; // Shift left by 8\n            2'b10: q <= {{1{q[63]}}, q[62:1]}; // Arithmetic right shift by 1\n            2'b11: q <= {{8{q[63]}}, q[55:0]}; // Arithmetic right shift by 8\n        endcase\nend\n\nendmodule"}
{"task_id": "ece241_2013_q8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input aresetn,\n    input x,\n    output reg z\n);\n    \n    localparam [1:0] S0 = 2'b00, S1 = 2'b01, S2 = 2'b10;\n    reg [1:0] state, next_state;\n\n    always @(posedge clk or negedge aresetn) begin\n        if (!aresetn)\n            state <= S0;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            S0: next_state = x ? S1 : S0;\n            S1: next_state = x ? S1 : S2;\n            S2: next_state = x ? S0 : S1;\n        endcase\n    end\n\n    always @(*) begin\n        z = (state == S2) ? 1'b1 : 1'b0;\n    end\n\nendmodule"}
{"task_id": "m2014_q6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n    localparam [3:0] A = 4'b0000, B = 4'b0001, C = 4'b0010, D = 4'b0011, E = 4'b0100, F = 4'b0101;\n    reg [3:0] state, next_state;\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n    \n    always @(*) begin\n        case (state)\n            A: next_state = w ? A : B;\n            B: next_state = w ? D : C;\n            C: next_state = w ? D : E;\n            D: next_state = w ? A : F;\n            E: next_state = w ? D : E;\n            F: next_state = w ? D : C;\n            default: next_state = A;\n        endcase\n    end\n    \n    always @(*) begin\n        case (state)\n            A: z = 1'b0;\n            B: z = 1'b0;\n            C: z = 1'b0;\n            D: z = 1'b1;\n            E: z = 1'b1;\n            F: z = 1'b1;\n            default: z = 1'b0;\n        endcase\n    end\nendmodule"}
{"task_id": "fsm_ps2data", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output [23:0] out_bytes,\n    output done\n);\n    \n    reg [2:0] state;\n    reg [7:0] byte1, byte2, byte3;\n    reg [23:0] message;\n    reg done_reg;\n\n    // State machine definition\n    parameter SEEKING = 3'b000;\n    parameter READING_BYTE1 = 3'b001;\n    parameter READING_BYTE2 = 3'b010;\n    parameter READING_BYTE3 = 3'b011;\n    parameter COMPLETED = 3'b100;\n\n    // State transitions and outputs\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= SEEKING;\n            done_reg <= 1'b0;\n            byte1 <= 8'b0;\n            byte2 <= 8'b0;\n            byte3 <= 8'b0;\n            message <= 24'b0;\n        end else begin\n            case (state)\n                SEEKING: begin\n                    if (in[3]) begin\n                        state <= READING_BYTE1;\n                        byte1 <= in;\n                    end\n                end\n                READING_BYTE1: begin\n                    state <= READING_BYTE2;\n                    byte2 <= in;\n                end\n                READING_BYTE2: begin\n                    state <= READING_BYTE3;\n                    byte3 <= in;\n                end\n                READING_BYTE3: begin\n                    state <= COMPLETED;\n                    done_reg <= 1'b1;\n                    message <= {byte1, byte2, byte3};\n                end\n                COMPLETED: begin\n                    if (in[3]) begin\n                        state <= READING_BYTE1;\n                        byte1 <= in;\n                        done_reg <= 1'b0;\n                    end else begin\n                        state <= SEEKING;\n                        done_reg <= 1'b0;\n                    end\n                end\n            endcase\n        end\n    end\n\n    // Output assignments\n    assign out_bytes = message;\n    assign done = done_reg;\n\nendmodule"}
{"task_id": "2012_q2b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\n\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "module top_module (\n    input [5:0] y,\n    input w,\n    output Y1,\n    output Y3\n);\n\n    assign Y1 = y[2] | y[4] | (y[1] & ~w);\n    assign Y3 = y[3] | y[5] | (y[2] & ~w);\n\nendmodule"}
{"task_id": "vector0", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "module top_module(\n    input [2:0] vec, \n    output [2:0] outv,\n    output o2,\n    output o1,\n    output o0\n);\n    assign outv = vec;\n    assign o2 = vec[2];\n    assign o1 = vec[1];\n    assign o0 = vec[0];\nendmodule"}
{"task_id": "kmap4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n\n    always @(*) begin\n        case({c, d, b, a})\n            4'b0011, 4'b0100, 4'b1011, 4'b1100: out = 1'b1;\n            default: out = 1'b0;\n        endcase\n    end\n\nendmodule"}
{"task_id": "vector1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "module top_module (\n    input [15:0] in,\n    output [7:0] out_hi,\n    output [7:0] out_lo\n);\n    assign out_lo = in[7:0];\n    assign out_hi = in[15:8];\nendmodule"}
{"task_id": "norgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = ~(a | b);\nendmodule"}
{"task_id": "alwaysblock2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "module top_module(\n    input clk,\n    input a, \n    input b,\n    output out_assign,\n    output reg out_always_comb,\n    output reg out_always_ff\n);\n\n    // Using assign statement\n    assign out_assign = a ^ b;\n\n    // Using combinational always block\n    always @(*) begin\n        out_always_comb = a ^ b;\n    end\n\n    // Using clocked always block\n    always @(posedge clk) begin\n        out_always_ff <= a ^ b;\n    end\n\nendmodule"}
{"task_id": "m2014_q6c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "module top_module (\n    input [6:1] y,\n    input w,\n    output Y2,\n    output Y4\n);\n\n    // Y2 is active when state is A or C or F\n    assign Y2 = y[1] | y[3] | y[5];\n\n    // Y4 is active when state is B or D\n    assign Y4 = y[2] | y[4];\n\nendmodule"}
{"task_id": "mux256to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "module top_module (\n    input [255:0] in,\n    input [7:0] sel,\n    output reg out\n);\n\nalways @(*) begin\n    out = in[sel];\nend\n\nendmodule"}
{"task_id": "2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input w,\n    input R,\n    input E,\n    input L,\n    output reg Q\n);\n    \n    always @(posedge clk) begin\n        if (L)\n            Q <= R; // Load R if L is asserted\n        else if (E)\n            Q <= Q; // Shift through if E is asserted (no change)\n        else\n            Q <= w; // Load w at first stage\n    end\nendmodule"}
{"task_id": "ece241_2014_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    output z\n);\n    \n    reg q1, q2, q3;\n\n    always @(posedge clk) begin\n        q1 <= x ^ q1;\n        q2 <= x & ~q2;\n        q3 <= x | ~q3;\n    end\n\n    assign z = ~(q1 ^ q2 ^ q3);\n\nendmodule"}
{"task_id": "circuit4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n\n    assign q = (a & b) | (~a & c & d);\n\nendmodule"}
{"task_id": "rule110", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q);\n    \n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else begin\n            q[511:0] <= {q[509:0], 2'b00} ^ {{510{q[511]}}, q[510:0]};\n        end\n    end\n\nendmodule"}
{"task_id": "fsm3s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n\n    // State encoding\n    parameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\n    reg [1:0] state, next_state;\n    wire next_out;\n\n    // State transition logic\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Output logic\n    assign out = state == D;\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A;\n        endcase\n    end\n\nendmodule"}
{"task_id": "circuit5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "module top_module (\n    input [3:0] a, \n    input [3:0] b, \n    input [3:0] c, \n    input [3:0] d,\n    input [3:0] e,\n    output reg [3:0] q\n);\nalways @(*) begin\n    case(c)\n        4'd0: q = b;\n        4'd1: q = e;\n        4'd2: q = a;\n        4'd3: q = d;\n        default: q = 4'hf; // f\n    endcase\nend\nendmodule"}
{"task_id": "bugs_mux2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFind the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input sel,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out\n);\n\n    always @(*) begin\n        out = sel ? b : a;\n    end\n\nendmodule"}
{"task_id": "mt2015_muxdff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "module top_module(\n    input clk,\n    input L,\n    input q_in,\n    input r_in,\n    output reg Q);\n    \n    always @(posedge clk) begin\n        if (L) begin\n            Q <= r_in;\n        end else begin\n            Q <= q_in[1] ^ q_in[2];\n        end\n    end\nendmodule\n\nmodule full_module (\n    input [2:0] r,\n    input L,\n    input clk,\n    output reg [2:0] q\n);\n    reg [2:0] q_in;\n\n    // Instantiate the top_module three times\n    top_module u0 (.clk(clk), .L(L), .q_in(q_in[0]), .r_in(r[0]), .Q(q[0]));\n    top_module u1 (.clk(clk), .L(L), .q_in(q_in[1]), .r_in(r[1]), .Q(q[1]));\n    top_module u2 (.clk(clk), .L(L), .q_in(q_in[2]), .r_in(r[2]), .Q(q[2]));\n\n    // Assign q_in from q\n    always @(*) begin\n        q_in = q;\n    end\nendmodule"}
{"task_id": "edgecapture", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input [31:0] in,\n    output reg [31:0] out\n);\n\nreg [31:0] prev_in;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        out <= 32'b0;\n    else begin\n        out <= out | (prev_in & ~in);\n        prev_in <= in;\n    end\nend\n\nendmodule"}
{"task_id": "dff8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    output reg [7:0] q);\n\n    always @(posedge clk) begin\n        q <= d;\n    end\n\nendmodule"}
{"task_id": "ece241_2014_q1c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nAssume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [8:0] b,  // Extend b to 9 bits to detect overflow\n    output [7:0] s,\n    output overflow\n);\n    wire [8:0] sum;  // Extend sum to 9 bits to detect overflow\n    assign sum = a + b;  // Perform addition\n    assign s = sum[7:0];  // Extract 8-bit sum\n    assign overflow = (a[7] == b[7] && a[7] != sum[8]);  // Detect overflow\nendmodule"}
{"task_id": "review2015_fsmonehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n);\n    wire S, S1, S11, S110, B0, B1, B2, B3, Count, Wait;\n\n    assign S = state[0];\n    assign S1 = state[1];\n    assign S11 = state[2];\n    assign S110 = state[3];\n    assign B0 = state[4];\n    assign B1 = state[5];\n    assign B2 = state[6];\n    assign B3 = state[7];\n    assign Count = state[8];\n    assign Wait = state[9];\n\n    // Next state logic\n    assign B3_next = &state; // Always 0\n    assign S_next = S | (S1 & ~d) | (S11 & ~d) | (S110 & ~d);\n    assign S1_next = S1 | (S11 & d) | (S110 & d);\n    assign Count_next = Count | (B3 & ~done_counting);\n    assign Wait_next = Wait | (Count & done_counting);\n\n    // Output logic\n    assign done = Wait;\n    assign counting = Count;\n    assign shift_ena = B0 | B1 | B2 | B3 | Wait;\n\nendmodule"}
{"task_id": "counter_2bc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 2'b01;\n        else if (train_valid) begin\n            if (train_taken)\n                state <= (state == 2'b11) ? 2'b11 : state + 1'b1;\n            else\n                state <= (state == 2'b00) ? 2'b00 : state - 1'b1;\n        end\n    end\nendmodule"}
{"task_id": "always_casez", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output reg [2:0] pos\n);\nalways @(*) begin\n    // Initialize pos to 0\n    pos = 3'd0;\n    // Check each bit from most significant to least significant\n    if (in[7]) pos = 3'd7;\n    else if (in[6]) pos = 3'd6;\n    else if (in[5]) pos = 3'd5;\n    else if (in[4]) pos = 3'd4;\n    else if (in[3]) pos = 3'd3;\n    else if (in[2]) pos = 3'd2;\n    else if (in[1]) pos = 3'd1;\n    else if (in[0]) pos = 3'd0;\nend\nendmodule"}
{"task_id": "always_nolatches", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "module top_module (\n    input [15:0] scancode,\n    output reg left,\n    output reg down,\n    output reg right,\n    output reg up\n);\n    always @(*) begin\n        left = (scancode == 16'hE06B);\n        down = (scancode == 16'hE072);\n        right = (scancode == 16'hE074);\n        up = (scancode == 16'hE075);\n    end\nendmodule"}
{"task_id": "m2014_q4j", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 4-bit adder with full adders. The output sum should include the overflow bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "module top_module (\n    input [3:0] x,\n    input [4:0] y,\n    output [4:0] sum\n);\n    wire carry_out;\n    \n    // 4-bit full adder\n    genvar i;\n    generate\n        for(i = 0; i < 4; i = i + 1) begin : adder_gen\n            full_adder fa(.a(x[i]), .b(y[i]), .cin(i == 0 ? 1'b0 : carry_out[i-1]), .sum(sum[i]), .cout(carry_out[i]));\n        end\n    endgenerate\n    \n    // Overflow detection\n    assign sum[4] = carry_out[3] ^ carry_out[2];\n    \nendmodule\n\nmodule full_adder (\n    input a,\n    input b,\n    input cin,\n    output sum,\n    output cout\n);\n    assign sum = a ^ b ^ cin;\n    assign cout = (a & b) | (cin & (a ^ b));\nendmodule"}
{"task_id": "history_shift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n    \n    logic [31:0] next_history;\n    \n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            predict_history <= 32'b0;\n        end else if (train_mispredicted) begin\n            predict_history <= {train_history, train_taken};\n        end else if (predict_valid) begin\n            predict_history <= {predict_history[30:0], predict_taken};\n        end\n    end\n\nendmodule"}
{"task_id": "wire_decl", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out,\n    output out_n\n);\n    wire and1, and2;\n\n    // First layer: two AND gates\n    and and1_gate(a, b, and1);\n    and and2_gate(c, d, and2);\n\n    // Second layer: one OR gate\n    or or_gate(and1, and2, out);\n\n    // Inverted output\n    not not_gate(out, out_n);\nendmodule"}
{"task_id": "dff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a single D flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q\n);\n\nalways @(posedge clk) begin\n    q <= d;\nend\n\nendmodule"}
{"task_id": "ece241_2013_q12", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "module top_module (\n    input clk,\n    input enable,\n    input S,\n    input A,\n    input B,\n    input C,\n    output reg Z\n);\nreg [7:0] shift_reg;\ninteger i;\n\nalways @(posedge clk) begin\n    if (enable) begin\n        shift_reg <= {S, shift_reg[7:1]};\n    end\nend\n\nalways @(*) begin\n    case({A,B,C})\n        3'b000: Z = shift_reg[0];\n        3'b001: Z = shift_reg[1];\n        3'b010: Z = shift_reg[2];\n        3'b011: Z = shift_reg[3];\n        3'b100: Z = shift_reg[4];\n        3'b101: Z = shift_reg[5];\n        3'b110: Z = shift_reg[6];\n        3'b111: Z = shift_reg[7];\n        default: Z = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "thermostat", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "module top_module(\n    input mode,\n    input too_cold, \n    input too_hot,\n    input fan_on,\n    output heater,\n    output aircon,\n    output fan\n);\n\n    assign heater = mode & too_cold;\n    assign aircon = ~mode & too_hot;\n    assign fan = heater | aircon | fan_on;\n\nendmodule"}
{"task_id": "ece241_2013_q2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out_sop,\n    output out_pos\n);\n    // Sum-of-Products (SOP) form\n    assign out_sop = (a&b&c&~d) | (~a&b&c&d) | (~a&~b&~c&~d);\n    // Product-of-Sums (POS) form\n    assign out_pos = (~a|~b|~c|d) & (a|~b|~c|~d) & (a|b|c|~d);\nendmodule"}
{"task_id": "lfsr32", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [31:0] q\n);\n    always @(posedge clk) begin\n        if (reset)\n            q <= 32'h1;\n        else\n            q <= {q[30:0], q[31] ^ q[21] ^ q[1] ^ q[0]};\n    end\nendmodule"}
{"task_id": "circuit3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n\nassign q = (b & (c | d)) | (a & d);\n\nendmodule"}
{"task_id": "7420", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d, \n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n    // Define two 4-input NAND gates\n    assign p1y = ~(p1a & p1b & p1c & p1d);\n    assign p2y = ~(p2a & p2b & p2c & p2d);\nendmodule"}
{"task_id": "popcount255", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input [254:0] in,\n    output reg [7:0] out\n);\nreg [7:0] count;\ninteger i;\n\nalways @(*) begin\n    count = 0;\n    for (i = 0; i < 255; i = i + 1) begin\n        if (in[i])\n            count = count + 1;\n    end\n    out = count;\nend\n\nendmodule"}
{"task_id": "gatesv", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output [2:0] out_both,\n    output [3:1] out_any,\n    output [3:0] out_different\n);\n    assign out_both = {in[3] & in[2], in[2] & in[1], in[1] & in[0]};\n    assign out_any = {in[0] | in[3], in[3] | in[2], in[2] | in[1], in[1] | in[0]};\n    assign out_different = {in[0] ^ in[3], in[3] ^ in[2], in[2] ^ in[1], in[1] ^ in[0]};\nendmodule"}
{"task_id": "circuit6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "module top_module (\n    input [2:0] a, \n    output reg [15:0] q\n);\n\nalways @(*) begin\n    case(a)\n        3'b000: q = 16'h1232;\n        3'b001: q = 16'hAEE0;\n        3'b010: q = 16'h27D4;\n        3'b011: q = 16'h5A0E;\n        3'b100: q = 16'h2066;\n        3'b101: q = 16'h64CE;\n        3'b110: q = 16'hC526;\n        3'b111: q = 16'h2F19;\n        default: q = 16'h0000;\n    endcase\nend\n\nendmodule"}
{"task_id": "countslow", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input slowena,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk) begin\n        if (reset)\n            q <= 4'b0000;  // Reset counter to 0\n        else if (slowena)\n            q <= (q == 4'b1001) ? 4'b0000 : q + 1'b1;  // Increment counter if not at 9\n    end\n\nendmodule"}
{"task_id": "m2014_q4f", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    logic in2_bubbled;\n    \n    // Bubble in2 before AND operation\n    assign in2_bubbled = ~in2;\n    \n    // AND operation with bubbled in2\n    assign out = in1 & in2_bubbled;\nendmodule"}
{"task_id": "m2014_q4h", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module assigns the output port to the same value as the input port combinationally.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out);\n    assign out = in;\nendmodule"}
{"task_id": "fsm1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n\n    // State encoding\n    localparam [1:0] B = 2'b10, A = 2'b01;\n\n    // State register\n    reg [1:0] state, next_state;\n\n    // Output register\n    reg out;\n\n    // State transition logic\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= B;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            B: next_state = in ? B : A;\n            A: next_state = in ? A : B;\n            default: next_state = B;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        out = (state == A) ? 1'b0 : 1'b1;\n    end\n\nendmodule"}
{"task_id": "dualedge", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q\n);\nreg q1, q2;\n\nalways @(posedge clk or negedge clk) begin\n    if (!clk) begin\n        q1 <= d;\n        q2 <= q1;\n    end\n    else begin\n        q2 <= q1;\n        q1 <= d;\n    end\nend\n\nalways @(posedge clk or negedge clk) begin\n    if (!clk)\n        q <= q2;\nend\n\nendmodule"}
{"task_id": "xnorgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an XNOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = ~(a ^ b);\nendmodule"}
{"task_id": "mt2015_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nModule A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n\n    wire a1_out, a2_out, b1_out, b2_out;\n    wire or_out, and_out;\n\n    // Instantiate submodules\n    A a1(.x(x), .y(y), .z(a1_out));\n    B b1(.x(x), .y(y), .z(b1_out));\n    A a2(.x(x), .y(y), .z(a2_out));\n    B b2(.x(x), .y(y), .z(b2_out));\n\n    // Connect outputs to gates\n    or_gate or1(.a(a1_out), .b(b1_out), .c(or_out));\n    and_gate and1(.a(a2_out), .b(b2_out), .c(and_out));\n    xor_gate xor1(.a(or_out), .b(and_out), .c(z));\n\nendmodule\n\nmodule A(\n    input x,\n    input y,\n    output z);\n    assign z = (x ^ y) & x;\nendmodule\n\nmodule B(\n    input x,\n    input y,\n    output z);\n    // Implement B module based on the given waveform\n    assign z = (x & ~y) | (x & y & ~x);\nendmodule\n\nmodule or_gate(\n    input a,\n    input b,\n    output c);\n    assign c = a | b;\nendmodule\n\nmodule and_gate(\n    input a,\n    input b,\n    output c);\n    assign c = a & b;\nendmodule\n\nmodule xor_gate(\n    input a,\n    input b,\n    output c);\n    assign c = a ^ b;\nendmodule"}
{"task_id": "rotate100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [1:0] ena,\n    input [99:0] data,\n    output reg [99:0] q);\n\nalways @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else if (ena == 2'b01) begin\n        q <= {q[0], q[99:1]};\n    end else if (ena == 2'b10) begin\n        q <= {q[98:0], q[99]};\n    end\nend\n\nendmodule"}
{"task_id": "review2015_count1k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [9:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 10'd0;\n        else if (q == 10'd999)\n            q <= 10'd0;\n        else\n            q <= q + 1'b1;\n    end\n\nendmodule"}
{"task_id": "notgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOT gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = ~in;\nendmodule"}
{"task_id": "fsm_onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "module top_module (\n    input in,\n    input [9:0] state,\n    output [9:0] next_state,\n    output out1,\n    output out2);\n\n    // Next state logic\n    assign next_state = (state == 10'b0000000001) ? 10'b0000000010 :\n                        (state == 10'b0000000100) ? 10'b0000001000 :\n                        (state == 10'b0000010000) ? 10'b0000100000 :\n                        (state == 10'b0001000000) ? 10'b0010000000 :\n                        (state == 10'b0100000000) ? 10'b1000000000 :\n                        (state == 10'b0000000000) ? 10'b0000000001 :\n                        (state == 10'b0000000010) ? 10'b0000000000 :\n                        (state == 10'b0000000100) ? 10'b0000000000 :\n                        (state == 10'b0000010000) ? 10'b0000000000 :\n                        (state == 10'b0001000000) ? 10'b0000000000 :\n                        (state == 10'b0100000000) ? 10'b0000000000 :\n                        (state == 10'b0000000000) ? 10'b0000000000 :\n                        (state == 10'b0000000010) ? 10'b0000000011 :\n                        (state == 10'b0000000100) ? 10'b0000000011 :\n                        (state == 10'b0000010000) ? 10'b0000000011 :\n                        (state == 10'b0001000000) ? 10'b0000000011 :\n                        (state == 10'b0100000000) ? 10'b0000000011 :\n                        (state == 10'b0000000000) ? 10'b0000000011 :\n                        (state == 10'b0000000010) ? 10'b0000000011 :\n                        (state == 10'b0000000100) ? 10'b0000000011 :\n                        (state == 10'b0000010000) ? 10'b0000000011 :\n                        (state == 10'b0001000000) ? 10'b0000000011 :\n                        (state == 10'b0100000000) ? 10'b0000000011 :\n                        10'b0000000000;\n\n    // Output logic\n    assign {out1, out2} = (state == 10'b0001000000) ? 2'b01 :\n                           (state == 10'b0000000011) ? 2'b10 :\n                           2'b00;\n\nendmodule"}
{"task_id": "ece241_2013_q7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    output reg Q\n);\n    \n    always @(posedge clk) begin\n        case ({j, k})\n            2'b00: Q <= Q;    // Hold state\n            2'b01: Q <= 1'b0; // Reset\n            2'b10: Q <= 1'b1; // Set\n            2'b11: Q <= ~Q;   // Toggle\n        endcase\n    end\n\nendmodule"}
{"task_id": "popcount3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "module top_module (\n    input [2:0] in,\n    output [1:0] out\n);\n    assign out = in[0] + in[1] + in[2];\nendmodule"}
{"task_id": "vector5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    input e,\n    output [24:0] out\n);\n    \n    assign out[24] = ~a ^ a;\n    assign out[23] = ~a ^ b;\n    assign out[22] = ~a ^ c;\n    assign out[21] = ~a ^ d;\n    assign out[20] = ~a ^ e;\n    assign out[19] = ~b ^ a;\n    assign out[18] = ~b ^ b;\n    assign out[17] = ~b ^ c;\n    assign out[16] = ~b ^ d;\n    assign out[15] = ~b ^ e;\n    assign out[14] = ~c ^ a;\n    assign out[13] = ~c ^ b;\n    assign out[12] = ~c ^ c;\n    assign out[11] = ~c ^ d;\n    assign out[10] = ~c ^ e;\n    assign out[ 9] = ~d ^ a;\n    assign out[ 8] = ~d ^ b;\n    assign out[ 7] = ~d ^ c;\n    assign out[ 6] = ~d ^ d;\n    assign out[ 5] = ~d ^ e;\n    assign out[ 4] = ~e ^ a;\n    assign out[ 3] = ~e ^ b;\n    assign out[ 2] = ~e ^ c;\n    assign out[ 1] = ~e ^ d;\n    assign out[ 0] = ~e ^ e;\n\nendmodule"}
{"task_id": "lemmings1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    output walk_left,\n    output walk_right\n);\n    reg walk_left_reg, walk_right_reg;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            {walk_left_reg, walk_right_reg} <= 2'b01; // Reset to walk right\n        else begin\n            if (bump_left && !bump_right)\n                {walk_left_reg, walk_right_reg} <= 2'b01; // Walk right\n            else if (!bump_left && bump_right)\n                {walk_left_reg, walk_right_reg} <= 2'b10; // Walk left\n            else if (bump_left && bump_right)\n                {walk_left_reg, walk_right_reg} <= 2'b10; // Walk left\n            else\n                {walk_left_reg, walk_right_reg} <= {walk_left_reg, walk_right_reg}; // Maintain current direction\n        end\n    end\n\n    assign walk_left = walk_left_reg;\n    assign walk_right = walk_right_reg;\n\nendmodule"}
{"task_id": "circuit1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    output q\n);\n\nassign q = a & b;\n\nendmodule"}
{"task_id": "7458", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d,\n    input p1e,\n    input p1f,\n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n\n    // Intermediate signals for AND operations\n    wire and1, and2, and3, and4;\n\n    // 3-input AND gates\n    assign and1 = p1a & p1b & p1c;\n    assign and2 = p1d & p1e & p1f;\n\n    // 2-input AND gates\n    assign and3 = p2a & p2b;\n    assign and4 = p2c & p2d;\n\n    // Final OR operations for outputs\n    assign p1y = and1 | and2;\n    assign p2y = and3 | and4;\n\nendmodule"}
{"task_id": "2014_q3c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    input [2:0] y,\n    output reg Y0,\n    output reg z\n);\nreg [2:0] nextY;\n\nalways @(posedge clk) begin\n    case(y)\n        3'b000: nextY = x ? 3'b001 : 3'b000;\n        3'b001: nextY = x ? 3'b100 : 3'b001;\n        3'b010: nextY = x ? 3'b001 : 3'b010;\n        3'b011: nextY = x ? 3'b010 : 3'b001;\n        3'b100: nextY = x ? 3'b100 : 3'b011;\n        default: nextY = 3'b000;\n    endcase\n    Y0 <= nextY[0];\n    z <= (y == 3'b011) || (y == 3'b100);\nend\n\nendmodule"}
{"task_id": "m2014_q4e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 2-input NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    // NOR gate implementation\n    assign out = ~(in1 | in2);\nendmodule"}
{"task_id": "wire4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    output w,\n    output x,\n    output y,\n    output z\n);\n    assign w = a;\n    assign x = b;\n    assign y = b;\n    assign z = c;\nendmodule"}
{"task_id": "m2014_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input ar,\n    output logic q\n);\n    always @(posedge clk or posedge ar) begin\n        if (ar) q <= 1'b0; // Asynchronous reset\n        else q <= d; // D flip flop behavior\n    end\nendmodule"}
{"task_id": "always_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "module top_module (\n    input [2:0] sel,\n    input [3:0] data0,\n    input [3:0] data1,\n    input [3:0] data2,\n    input [3:0] data3,\n    input [3:0] data4,\n    input [3:0] data5,\n    output reg [3:0] out\n);\n    always @(*) begin\n        case (sel)\n            3'd0: out = data0;\n            3'd1: out = data1;\n            3'd2: out = data2;\n            3'd3: out = data3;\n            3'd4: out = data4;\n            3'd5: out = data5;\n            default: out = 4'b0;\n        endcase\n    end\nendmodule"}
{"task_id": "timer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "module top_module(\n    input clk, \n    input load, \n    input [9:0] data, \n    output reg tc\n);\n\nreg [9:0] counter;\n\nalways @(posedge clk) begin\n    if (load)\n        counter <= data;\n    else if (!tc)\n        counter <= counter - 1;\n    tc <= (counter == 10'b0);\nend\n\nendmodule"}
{"task_id": "review2015_fsmseq", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg start_shifting);\n\n    parameter [3:0] S0 = 4'b0000, S1 = 4'b0001, S2 = 4'b0010, S3 = 4'b0011, S4 = 4'b0100;\n    reg [3:0] state, next_state;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            state <= S0;\n            start_shifting <= 1'b0;\n        end else begin\n            state <= next_state;\n            if (state == S3) start_shifting <= 1'b1;\n            else start_shifting <= 1'b0;\n        end\n    end\n\n    always @(*) begin\n        case (state)\n            S0: next_state = data ? S1 : S0;\n            S1: next_state = data ? S2 : S0;\n            S2: next_state = data ? S3 : S0;\n            S3: next_state = data ? S4 : S1;\n            S4: next_state = data ? S4 : S1;\n            default: next_state = S0;\n        endcase\n    end\n\nendmodule"}
{"task_id": "dff8r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 8'b0;\n        else\n            q <= d;\n    end\n\nendmodule"}
{"task_id": "edgedetect2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] anyedge);\n\n    always @(posedge clk) begin\n        anyedge <= {in[7] != in[7], in[6] != in[6], in[5] != in[5], in[4] != in[4], in[3] != in[3], in[2] != in[2], in[1] != in[1], in[0] != in[0]};\n    end\n\nendmodule"}
{"task_id": "count1to10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nMake a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'd1; // Reset to 1\n        else begin\n            if (q == 4'd10)\n                q <= 4'd1; // Wrap around to 1 after 10\n            else\n                q <= q + 1'b1; // Increment counter\n        end\n    end\n\nendmodule"}
{"task_id": "circuit9", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg [2:0] q\n);\n\nalways @(posedge clk) begin\n    if (a)\n        q <= 4'b0100; // q = 4\n    else\n        q <= q + 1'b1; // q increments by 1\nend\n\nendmodule"}
{"task_id": "lfsr5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [4:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 5'b10000; // Reset to 1\n        else\n            q <= {q[3:0], q[4] ^ q[2]}; // Shift and XOR taps\n    end\n\nendmodule"}
{"task_id": "bugs_addsubz", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "module top_module (\n    input do_sub,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out,\n    output reg result_is_zero\n);\n\nalways @(*) begin\n    case (do_sub)\n        0: out = a + b;\n        1: out = a - b;\n        default: out = 8'b0; // Default case to prevent latches\n    endcase\n\n    result_is_zero = (out == 8'b0);\nend\n\nendmodule"}
{"task_id": "m2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n    \n    // Majority function: 1 if at least 3 inputs are 1\n    assign f = |x[4] & |x[3] & |x[2] | |x[4] & |x[3] & ~|x[2] | |x[4] & ~|x[3] & |x[2] | ~|x[4] & |x[3] & |x[2];\n    \nendmodule"}
{"task_id": "bugs_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "module top_module (\n    input [7:0] code,\n    output reg [3:0] out,\n    output reg valid\n);\nalways @(*) begin\n    case (code)\n        8'h45: {out, valid} = 4'd0; // 0\n        8'h16: {out, valid} = 4'd1; // 1\n        8'h1e: {out, valid} = 4'd2; // 2\n        8'h26: {out, valid} = 4'd3; // 3\n        8'h25: {out, valid} = 4'd4; // 4\n        8'h2e: {out, valid} = 4'd5; // 5\n        8'h36: {out, valid} = 4'd6; // 6\n        8'h3d: {out, valid} = 4'd7; // 7\n        8'h3e: {out, valid} = 4'd8; // 8\n        8'h46: {out, valid} = 4'd9; // 9\n        default: {out, valid} = 2'b00; // Not a valid key\n    endcase\nend\nendmodule"}
{"task_id": "vectorr", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven an 8-bit input vector [7:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [7:0] out\n);\n    assign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\nendmodule"}
{"task_id": "kmap3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n\n    always @(*) begin\n        case({c,b,a})\n            3'b000: out = 0;\n            3'b001: out = 0;\n            3'b010: out = 0;\n            3'b011: out = 0;\n            3'b100: out = 1;\n            3'b101: out = 1;\n            3'b110: out = 1;\n            3'b111: out = 1;\n        endcase\n    end\n\nendmodule"}
{"task_id": "review2015_shiftcount", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input shift_ena,\n    input count_ena,\n    input data,\n    output reg [3:0] q);\n    \n    always @(posedge clk) begin\n        if (shift_ena)\n            q <= {data, q[3:1]}; // Shift in data MSB-first\n        else if (count_ena)\n            q <= q - 1; // Decrement count\n    end\nendmodule"}
{"task_id": "wire", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with one input and one output that behaves like a wire.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = in;\nendmodule"}
{"task_id": "review2015_fsmshift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output shift_ena);\n    \n    reg [1:0] cnt;\n    reg shift_ena_reg;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            cnt <= 2'b00;\n            shift_ena_reg <= 1'b1;\n        end else begin\n            if (cnt == 2'b11) begin\n                shift_ena_reg <= 1'b0;\n            end\n            cnt <= cnt + 1'b1;\n        end\n    end\n\n    assign shift_ena = shift_ena_reg;\n\nendmodule"}
{"task_id": "count15", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'b0000;\n        else\n            q <= q + 1'b1;\n    end\n\nendmodule"}
{"task_id": "always_if", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel_b1,\n    input sel_b2,\n    output out_assign,\n    output reg out_always\n);\n\n    // Using assign statement\n    assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\n    // Using procedural if statement\n    always @(*) begin\n        if (sel_b1 & sel_b2)\n            out_always = b;\n        else\n            out_always = a;\n    end\n\nendmodule"}
{"task_id": "kmap1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    input c,\n    output out\n);\n    assign out = ~(b & ~c) | a;\nendmodule"}
{"task_id": "2013_q2afsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input [3:1] r,\n    output [3:1] g\n);\n    \n    // State encoding\n    localparam A = 4'b0000;\n    localparam B = 4'b0001;\n    localparam C = 4'b0010;\n    localparam D = 4'b0011;\n\n    reg [3:0] state, next_state;\n\n    // Next state logic\n    always @(*) begin\n        case(state)\n            A: next_state = (r[1]) ? B : (r[2]) ? C : (r[3]) ? D : A;\n            B: next_state = (r[1]) ? B : A;\n            C: next_state = (r[2]) ? C : A;\n            D: next_state = A;\n            default: next_state = A;\n        endcase\n    end\n\n    // State register\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn) state <= A;\n        else state <= next_state;\n    end\n\n    // Output logic\n    assign g[1] = (state == B);\n    assign g[2] = (state == C);\n    assign g[3] = (state == D);\n\nendmodule"}
{"task_id": "count10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q\n);\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        q <= 4'b0000; // Reset counter to 0\n    else if (q == 4'b1001) // Check if q is 9 (1001 in binary)\n        q <= 4'b0000; // Reset to 0 when q reaches 9\n    else\n        q <= q + 1'b1; // Increment counter on each clock cycle\nend\n\nendmodule"}
{"task_id": "fsm_ps2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output done\n);\nreg [1:0] state, next_state;\nreg [2:0] counter;\nreg done_reg;\n\nlocalparam IDLE = 2'b00;\nlocalparam MESSAGE = 2'b01;\nlocalparam END = 2'b10;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= IDLE;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        IDLE: begin\n            if (in[3]) next_state = MESSAGE;\n            else next_state = IDLE;\n        end\n        MESSAGE: begin\n            if (counter == 2'b11) next_state = END;\n            else next_state = MESSAGE;\n        end\n        END: next_state = IDLE;\n        default: next_state = IDLE;\n    endcase\nend\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        counter <= 3'b000;\n    else begin\n        case (state)\n            IDLE: counter <= 3'b000;\n            MESSAGE: counter <= counter + 1;\n            END: counter <= 3'b000;\n            default: counter <= counter;\n        endcase\n    end\nend\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        done_reg <= 1'b0;\n    else begin\n        if (state == END && counter == 3'b110) done_reg <= 1'b1;\n        else done_reg <= 1'b0;\n    end\nend\n\nassign done = done_reg;\n\nendmodule"}
{"task_id": "mux2to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel,\n    output out\n);\n    assign out = sel ? b : a;\nendmodule"}
{"task_id": "gates4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and = &in;       // 4-input AND gate\n    assign out_or = |in;        // 4-input OR gate\n    assign out_xor = ^in;       // 4-input XOR gate\nendmodule"}
{"task_id": "2014_q3bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input x,\n    output reg z\n);\n\nreg [2:0] y;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        y <= 3'b000;\n    else begin\n        case (y)\n            3'b000: y <= x ? 3'b001 : 3'b000;\n            3'b001: y <= x ? 3'b100 : 3'b001;\n            3'b010: y <= x ? 3'b001 : 3'b010;\n            3'b011: y <= x ? 3'b010 : 3'b001;\n            3'b100: y <= x ? 3'b100 : 3'b011;\n            default: y <= 3'b000;\n        endcase\n    end\nend\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        z <= 1'b0;\n    else begin\n        case (y)\n            3'b001, 3'b100: z <= 1'b1;\n            default: z <= 1'b0;\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "2013_q2bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input x,\n    input y,\n    output f,\n    output g\n);\n    reg [1:0] current_state, next_state;\n    reg [2:0] x_seq, next_x_seq;\n    reg [1:0] y_count, next_y_count;\n\n    // State encoding: A - 2'b00, B - 2'b01, C - 2'b10\n    parameter A = 2'b00, B = 2'b01, C = 2'b10;\n\n    // State transitions and output logic\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn) begin\n            current_state <= A;\n            x_seq <= 3'b000;\n            y_count <= 2'b00;\n            f <= 1'b0;\n            g <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            x_seq <= next_x_seq;\n            y_count <= next_y_count;\n            f <= (current_state == B) ? 1'b1 : 1'b0;\n            g <= (current_state == C) ? 1'b1 : 1'b0;\n        end\n    end\n\n    always @(*) begin\n        next_state = current_state;\n        next_x_seq = x_seq;\n        next_y_count = y_count;\n        case (current_state)\n            A: begin\n                next_state = B;\n                next_x_seq = {x, 2'b00};\n            end\n            B: begin\n                if (x_seq == 3'b101) begin\n                    next_state = C;\n                    next_x_seq = 3'b000;\n                end else begin\n                    next_state = B;\n                    next_x_seq = {x, x_seq[2:1]};\n                end\n            end\n            C: begin\n                if (y == 1'b1) begin\n                    next_state = C;\n                    next_y_count = 2'b00;\n                end else begin\n                    next_y_count = y_count + 1'b1;\n                    if (y_count == 2'b01)\n                        next_state = A;\n                end\n            end\n        endcase\n    end\nendmodule"}
{"task_id": "dff8p", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n\n    always @(negedge clk or posedge reset) begin\n        if (reset)\n            q <= 8'h34;\n        else\n            q <= d;\n    end\n\nendmodule"}
{"task_id": "reduction", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nParity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output parity\n);\n    assign parity = ^in; // XOR of all 8 data bits for even parity\nendmodule"}
{"task_id": "fsm3comb", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [1:0] state,\n    output reg [1:0] next_state,\n    output out\n);\n    always @(*) begin\n        case(state)\n            2'b00: begin next_state = (in) ? 2'b01 : 2'b00; out = 1'b0; end\n            2'b01: begin next_state = (in) ? 2'b01 : 2'b10; out = 1'b0; end\n            2'b10: begin next_state = (in) ? 2'b11 : 2'b00; out = 1'b0; end\n            2'b11: begin next_state = (in) ? 2'b10 : 2'b01; out = 1'b1; end\n            default: begin next_state = 2'b00; out = 1'b0; end\n        endcase\n    end\nendmodule"}
{"task_id": "mt2015_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n    \n    reg z_reg;\n    \n    always @(x or y) begin\n        if (x && y)\n            z_reg <= 1'b1;\n        else if (x)\n            z_reg <= 1'b0;\n        else if (y)\n            z_reg <= 1'b0;\n        else\n            z_reg <= 1'b1;\n    end\n    \n    assign z = z_reg;\n    \nendmodule"}
{"task_id": "2012_q2fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n\n    // State encoding\n    localparam A = 2'b00;\n    localparam B = 2'b01;\n    localparam C = 2'b10;\n    localparam D = 2'b11;\n    localparam E = 2'b00;\n    localparam F = 2'b01;\n\n    reg [1:0] state, next_state;\n    wire z;\n\n    // State register\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = w ? B : A;\n            B: next_state = w ? C : D;\n            C: next_state = w ? E : D;\n            D: next_state = w ? F : A;\n            E: next_state = w ? E : D;\n            F: next_state = w ? C : D;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    assign z = (state == E);\n\nendmodule"}
{"task_id": "dff16e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input resetn,\n    input [1:0] byteena,\n    input [15:0] d,\n    output reg [15:0] q);\n\nalways @(posedge clk or negedge resetn) begin\n    if (!resetn) begin\n        q <= 16'b0;\n    end else begin\n        if (byteena[1]) q[15:8] <= d[15:8];\n        if (byteena[0]) q[7:0] <= d[7:0];\n    end\nend\n\nendmodule"}
{"task_id": "edgedetect", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] pedge);\n\n    always @(posedge clk) begin\n        // Detect 0 to 1 transitions for each bit\n        edge_detect: for(genvar i = 0; i < 8; i = i + 1) begin : gen_pedge\n            assign pedge[i] = in[i] & ~in[i];\n        end\n    end\n\nendmodule"}
{"task_id": "circuit8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "module top_module (\n    input clock,\n    input a, \n    output reg p,\n    output reg q\n);\n    \n    always @(posedge clock) begin\n        if (a)\n            p <= ~q;\n        else\n            p <= 0;\n        q <= p;\n    end\n\nendmodule"}
{"task_id": "rule90", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q\n);\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else\n            q <= {q[510:0], 1'b0} ^ {1'b0, q}; // XOR with shifted version\n    end\nendmodule"}
{"task_id": "mt2015_eq2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "module top_module(\n    input [1:0] A,\n    input [1:0] B,\n    output z);\n    \n    assign z = (A == B);\n    \nendmodule"}
{"task_id": "gatesv100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output [98:0] out_both,\n    output [99:1] out_any,\n    output [99:0] out_different\n);\n    \n    // out_both: Both current bit and previous bit are 1\n    assign out_both = in[98:0] & in[99:1];\n    \n    // out_any: Either current bit or next bit is 1, wrapping around\n    assign out_any = in[99:1] | in[98:0];\n    \n    // out_different: Current bit differs from previous bit, wrapping around\n    assign out_different = in[99:0] ^ in[98:0];\n\nendmodule"}
{"task_id": "m2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D latch using an always block.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input d,\n    input ena,\n    output logic q\n);\n    always @(ena or d) begin\n        if (ena)\n            q <= d;\n    end\nendmodule"}
{"task_id": "mux256to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "module top_module (\n    input [1023:0] in,\n    input [7:0] sel,\n    output [3:0] out\n);\n    wire [3:0] selected;\n    assign selected = in[(sel*4+3):(sel*4)];\n    assign out = selected;\nendmodule"}
{"task_id": "mux9to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "module top_module (\n    input [15:0] a,\n    input [15:0] b,\n    input [15:0] c,\n    input [15:0] d,\n    input [15:0] e,\n    input [15:0] f,\n    input [15:0] g,\n    input [15:0] h,\n    input [15:0] i,\n    input [3:0] sel,\n    output logic [15:0] out\n);\n    \n    always_comb begin\n        case (sel)\n            4'd0: out = a;\n            4'd1: out = b;\n            4'd2: out = c;\n            4'd3: out = d;\n            4'd4: out = e;\n            4'd5: out = f;\n            4'd6: out = g;\n            4'd7: out = h;\n            4'd8: out = i;\n            default: out = 16'hFFFF; // Unused cases\n        endcase\n    end\n\nendmodule"}
{"task_id": "vectorgates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "module top_module(\n    input [2:0] a, \n    input [2:0] b, \n    output [2:0] out_or_bitwise,\n    output out_or_logical,\n    output [5:0] out_not\n);\n    assign out_or_bitwise = a | b;  // bitwise OR\n    assign out_or_logical = a & b;  // logical OR\n    assign out_not[5:3] = ~b;      // inverse of b\n    assign out_not[2:0] = ~a;      // inverse of a\nendmodule"}
{"task_id": "fsm3onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [3:0] state,\n    output reg [3:0] next_state,\n    output out\n);\n    always @(*) begin\n        case(state)\n            4'b0001: next_state = in ? 4'b0001 : 4'b0010;\n            4'b0010: next_state = in ? 4'b0010 : 4'b0100;\n            4'b0100: next_state = in ? 4'b1000 : 4'b0001;\n            4'b1000: next_state = in ? 4'b0100 : 4'b0010;\n            default: next_state = 4'b0001;\n        endcase\n    end\n\n    always @(*) begin\n        case(state)\n            4'b1000: out = 1'b1;\n            default: out = 1'b0;\n        endcase\n    end\nendmodule"}
{"task_id": "conditional", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [7:0] b,\n    input [7:0] c,\n    input [7:0] d,\n    output reg [7:0] min\n);\n    always @* begin\n        if (a < b)\n            min = a;\n        else\n            min = b;\n        if (min > c)\n            min = c;\n        if (min > d)\n            min = d;\n    end\nendmodule"}
{"task_id": "gates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output out_and,\n    output out_or,\n    output out_xor,\n    output out_nand,\n    output out_nor,\n    output out_xnor,\n    output out_anotb\n);\n    assign out_and = a & b;\n    assign out_or = a | b;\n    assign out_xor = a ^ b;\n    assign out_nand = ~(a & b);\n    assign out_nor = ~(a | b);\n    assign out_xnor = ~(a ^ b);\n    assign out_anotb = a & ~b;\nendmodule"}
{"task_id": "kmap2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output out\n);\n    wire w1, w2, w3, w4, w5, w6, w7;\n\n    // Define the regions from the Karnaugh map\n    assign w1 = ~c & ~d & ~b; // Region 1\n    assign w2 = ~c & ~d & a;  // Region 2\n    assign w3 = ~c & d & ~a;  // Region 3\n    assign w4 = ~c & d & b;   // Region 4\n    assign w5 = c & ~d & ~b;  // Region 5\n    assign w6 = c & ~d & a;   // Region 6\n    assign w7 = c & d & a;    // Region 7\n\n    // Combine the regions using OR operations\n    assign out = w1 | w2 | w3 | w4 | w5 | w6 | w7;\n\nendmodule"}
{"task_id": "2014_q3fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input s,\n    input w,\n    output reg z\n);\n\nreg [1:0] state, next_state;\nlocalparam A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= A;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        A: next_state = (s) ? B : A;\n        B: next_state = C;\n        C: next_state = (w) ? D : B;\n        D: next_state = (w) ? B : C;\n        default: next_state = A;\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (reset)\n        z <= 1'b0;\n    else if (state == B && (next_state == B || next_state == C))\n        z <= 1'b1;\n    else if (state == C || state == D)\n        z <= 1'b0;\nend\n\nendmodule"}
{"task_id": "vector4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nOne common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [31:0] out\n);\n    assign out = {{24{in[7]}}, in};\nendmodule"}
{"task_id": "m2014_q4k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a shift register with four D flops. Reset is active-low synchronous resettable.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input in,\n    output out\n);\n    reg [3:0] shift_reg;\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn) begin\n            shift_reg <= 4'b0000;\n        end else begin\n            shift_reg <= {shift_reg[2:0], in};\n        end\n    end\n\n    assign out = shift_reg[3];\n\nendmodule"}
{"task_id": "always_case2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output reg [1:0] pos\n);\n\nalways @* begin\n    case (in)\n        4'b0001: pos = 2'd0;\n        4'b0010: pos = 2'd1;\n        4'b0100: pos = 2'd2;\n        4'b1000: pos = 2'd3;\n        default: pos = 2'd0;\n    endcase\nend\n\nendmodule"}
{"task_id": "fsm2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input areset,\n    output out\n);\n    reg [1:0] state, next_state;\n\n    // State encoding: OFF = 2'b00, ON = 2'b01\n    parameter OFF = 2'b00, ON = 2'b01;\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= OFF;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            OFF: next_state = j ? ON : OFF;\n            ON:  next_state = k ? OFF : ON;\n            default: next_state = OFF;\n        endcase\n    end\n\n    // Output logic\n    assign out = (state == ON);\n\nendmodule"}
{"task_id": "m2014_q4i", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 0 (or logic low).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput out);\n", "completion": "module top_module(\n    output out);\n    assign out = 1'b0; // Always drive output to logic low\nendmodule"}
{"task_id": "step_one", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 1 (or logic high).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput one);\n", "completion": "module top_module(\n    output one);\n    assign one = 1'b1;\nendmodule"}
{"task_id": "vector100r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven a 100-bit input vector [99:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output reg [99:0] out\n);\n    always @(*) begin\n        out = {in[99], in[98], in[97], in[96], in[95], in[94], in[93], in[92], in[91], in[90],\n                in[89], in[88], in[87], in[86], in[85], in[84], in[83], in[82], in[81], in[80],\n                in[79], in[78], in[77], in[76], in[75], in[74], in[73], in[72], in[71], in[70],\n                in[69], in[68], in[67], in[66], in[65], in[64], in[63], in[62], in[61], in[60],\n                in[59], in[58], in[57], in[56], in[55], in[54], in[53], in[52], in[51], in[50],\n                in[49], in[48], in[47], in[46], in[45], in[44], in[43], in[42], in[41], in[40],\n                in[39], in[38], in[37], in[36], in[35], in[34], in[33], in[32], in[31], in[30],\n                in[29], in[28], in[27], in[26], in[25], in[24], in[23], in[22], in[21], in[20],\n                in[19], in[18], in[17], in[16], in[15], in[14], in[13], in[12], in[11], in[10],\n                in[9], in[8], in[7], in[6], in[5], in[4], in[3], in[2], in[1], in[0]};\n    end\nendmodule"}
{"task_id": "m2014_q4d", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    output logic out\n);\n    logic xor_out;\n    \n    // XOR gate\n    assign xor_out = in ^ out;\n    \n    // D flip-flop\n    always_ff @(posedge clk) begin\n        out <= xor_out;\n    end\n\nendmodule"}
{"task_id": "shift4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input load,\n    input ena,\n    input [3:0] data,\n    output reg [3:0] q\n);\n\nalways @(posedge clk or posedge areset) begin\n    if (areset)\n        q <= 4'b0000;\n    else if (load)\n        q <= data;\n    else if (ena)\n        q <= {q[2:0], 1'b0};\nend\n\nendmodule"}
{"task_id": "truthtable1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "module top_module (\n    input x3,\n    input x2,\n    input x1,\n    output f\n);\n\n    assign f = (x2 & ~x1) | (x2 & x1) | (x3 & x1);\n\nendmodule"}
{"task_id": "dff8ar", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input areset,\n    output reg [7:0] q);\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            q <= 8'b0;\n        else\n            q <= d;\n    end\n\nendmodule"}
{"task_id": "gates100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    \n    // 100-input AND gate\n    assign out_and = &in;\n    \n    // 100-input OR gate\n    assign out_or = |in;\n    \n    // 100-input XOR gate\n    assign out_xor = ^in;\n    \nendmodule"}
{"task_id": "hadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output sum,\n    output cout\n);\n    \n    assign sum = a ^ b;  // XOR for sum\n    assign cout = a & b; // AND for carry-out\n\nendmodule"}
{"task_id": "always_if2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "module top_module (\n    input cpu_overheated,\n    output reg shut_off_computer,\n    input arrived,\n    input gas_tank_empty,\n    output reg keep_driving\n);\n\n    always @(*) begin\n        if (cpu_overheated)\n            shut_off_computer = 1;\n        else\n            shut_off_computer = 0;\n    end\n\n    always @(*) begin\n        if (~arrived)\n            keep_driving = ~gas_tank_empty;\n        else\n            keep_driving = 0;\n    end\n\nendmodule"}
{"task_id": "fsm2s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input reset,\n    output out\n);\n    \n    reg state, next_state;\n\n    // State encoding: OFF = 0, ON = 1\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= 1'b0; // OFF\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            1'b0: next_state = (j) ? 1'b1 : 1'b0; // OFF -> ON if j=1, else OFF\n            1'b1: next_state = (k) ? 1'b0 : 1'b1; // ON -> OFF if k=1, else ON\n            default: next_state = 1'b0; // Default to OFF\n        endcase\n    end\n\n    assign out = state; // Output is current state\nendmodule"}
{"task_id": "vector3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "module top_module (\n    input [4:0] a,\n    input [4:0] b,\n    input [4:0] c,\n    input [4:0] d,\n    input [4:0] e,\n    input [4:0] f,\n    output [7:0] w,\n    output [7:0] x,\n    output [7:0] y,\n    output [7:0] z\n);\n\n    // Concatenate inputs, add two 1 bits at the end, and split into outputs\n    assign {w, x, y, z} = {a, b, c, d, e, f, 2'b11};\n\nendmodule"}
{"task_id": "circuit2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n\nassign q = (~a & ~b & ~c & d) | (~a & ~b & c & ~d) | (~a & b & ~c & d) | (~a & b & c & ~d) | (a & ~b & c & d) | (a & b & ~c & ~d) | (a & b & c & d);\n\nendmodule"}
{"task_id": "andgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an AND gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = a & b;\nendmodule"}
{"task_id": "fsm1s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n    reg [1:0] state, next_state;\n\n    // State encoding: B = 00, A = 01\n    parameter B = 2'b00, A = 2'b01;\n\n    // State transition logic\n    always @(*) begin\n        case(state)\n            B: next_state = in ? B : A;\n            A: next_state = in ? A : B;\n            default: next_state = B;\n        endcase\n    end\n\n    // State register\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= B;\n        else\n            state <= next_state;\n    end\n\n    // Output logic\n    assign out = (state == B);\n\nendmodule"}
{"task_id": "fadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input cin,\n    output cout,\n    output sum\n);\n    wire carry1;\n\n    // First half adder\n    assign carry1 = a & b;\n    // Second half adder\n    assign cout = (a ^ b) & cin | carry1;\n    // Sum calculation\n    assign sum = a ^ b ^ cin;\nendmodule"}
{"task_id": "m2014_q4g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    input in3,\n    output logic out\n);\n\n    logic xnor_out;\n\n    // XNOR operation between in1 and in2\n    assign xnor_out = ~(in1 ^ in2);\n    // XOR operation between xnor_out and in3\n    assign out = xnor_out ^ in3;\n\nendmodule"}
{"task_id": "ece241_2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "module top_module (\n    input c,\n    input d,\n    output [3:0] mux_in\n);\n    wire a, b, mux2_in0, mux2_in1;\n\n    // 2-to-1 multiplexer for ab = 00 and ab = 10\n    assign mux2_in0 = c;\n    assign mux2_in1 = d;\n    assign a = mux2_in1 ^ mux2_in0;\n\n    // 2-to-1 multiplexer for ab = 01 and ab = 11\n    assign b = c;\n\n    // 4-to-1 multiplexer outputs\n    assign mux_in[0] = ~a;\n    assign mux_in[1] = ~b;\n    assign mux_in[2] = b;\n    assign mux_in[3] = a;\n\nendmodule"}
{"task_id": "ece241_2014_q5b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output reg z\n);\n\n    // One-hot encoding for states\n    localparam [1:0] A = 2'b00, B = 2'b01;\n\n    reg [1:0] next_state, current_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= A;\n        else\n            current_state <= next_state;\n    end\n\n    always @(*) begin\n        case (current_state)\n            A: next_state = x ? B : A;\n            B: next_state = B;\n            default: next_state = A;\n        endcase\n    end\n\n    always @(*) begin\n        case (current_state)\n            A: z = x;\n            B: z = ~x;\n            default: z = 1'b0;\n        endcase\n    end\n\nendmodule"}
{"task_id": "circuit10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "module top_module (\n    input clk,\n    input a,\n    input b,\n    output q,\n    output state\n);\n\nreg q_reg, state_reg;\n\nalways @(posedge clk) begin\n    if (a & ~b)\n        q_reg <= 1'b0;\n    else if (a & b)\n        q_reg <= 1'b1;\n    else\n        q_reg <= q_reg;\nend\n\nassign state = (a & ~b) | (a & b);\n\nassign q = q_reg;\n\nendmodule"}
{"task_id": "2012_q1g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n    assign f = ~(x[4] ^ x[3] ^ x[1] ^ x[2]);\nendmodule"}
{"task_id": "fsm_hdlc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSynchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input in,\n    output reg disc,\n    output reg flag,\n    output reg err);\n\n    parameter [2:0] S0 = 3'b000, S1 = 3'b001, S2 = 3'b010, S3 = 3'b011, S4 = 3'b100, S5 = 3'b101, S6 = 3'b110, S7 = 3'b111;\n    reg [2:0] state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= S0;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            S0: next_state = in ? S1 : S0;\n            S1: next_state = in ? S2 : S0;\n            S2: next_state = in ? S3 : S1;\n            S3: next_state = in ? S4 : S2;\n            S4: next_state = in ? S5 : S3;\n            S5: next_state = in ? S6 : S4;\n            S6: next_state = in ? S7 : S5;\n            S7: next_state = in ? S7 : S7;\n            default: next_state = S0;\n        endcase\n    end\n\n    always @(posedge clk) begin\n        disc <= (next_state == S5);\n        flag <= (next_state == S6);\n        err <= (next_state == S7);\n    end\n\nendmodule"}
{"task_id": "review2015_fancytimer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "module top_module(\n    input wire clk,\n    input wire reset,\n    input wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack\n);\n    reg [3:0] delay, counter;\n    reg [3:0] state, next_state;\n    wire [3:0] data_reg;\n    reg [3:0] shift_reg;\n\n    // State encoding\n    localparam IDLE = 4'b0000,\n               DETECT = 4'b0001,\n               READ_DELAY = 4'b0010,\n               COUNT = 4'b0011,\n               DONE = 4'b0100;\n\n    // State transition logic\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        next_state = state;\n        case (state)\n            IDLE: begin\n                if (data_reg == 4'b1101)\n                    next_state = DETECT;\n            end\n            DETECT: begin\n                if (shift_reg == 4'b1101)\n                    next_state = READ_DELAY;\n            end\n            READ_DELAY: begin\n                if (delay != 4'd0)\n                    next_state = COUNT;\n            end\n            COUNT: begin\n                if (counter == 0)\n                    next_state = DONE;\n            end\n            DONE: begin\n                if (ack)\n                    next_state = IDLE;\n            end\n        endcase\n    end\n\n    // Shift register for detecting 1101 pattern\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            shift_reg <= 4'd0;\n        else if (state == DETECT)\n            shift_reg <= {shift_reg[2:0], data};\n    end\n\n    // Data register for current input bit\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            data_reg <= 4'd0;\n        else\n            data_reg <= {data_reg[2:0], data};\n    end\n\n    // Counter for delay\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            delay <= 4'd0;\n        else if (state == READ_DELAY && shift_reg != 4'b1101)\n            delay <= {delay[2:0], data};\n    end\n\n    // Main counter\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            counter <= 4'd0;\n        else if (counting && counter == 0)\n            counter <= delay + 4'd1;\n        else if (counting)\n            counter <= counter - 1;\n    end\n\n    // Count output\n    assign count = state == COUNT ? delay - counter / 4'd1000 : 4'd0;\n\n    // Counting signal\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            counting <= 1'b0;\n        else\n            counting <= state == COUNT;\n    end\n\n    // Done signal\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            done <= 1'b0;\n        else\n            done <= state == DONE;\n    end\n\nendmodule"}
{"task_id": "ece241_2013_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input [3:1] s,\n    output reg fr3,\n    output reg fr2,\n    output reg fr1,\n    output reg dfr\n);\n\nreg [3:1] prev_s;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        fr3 <= 1;\n        fr2 <= 1;\n        fr1 <= 1;\n        dfr <= 0;\n        prev_s <= 3'b000;\n    end else begin\n        case (s)\n            3'b111: begin // Above s[3]\n                fr3 <= 0;\n                fr2 <= 0;\n                fr1 <= 0;\n                dfr <= 0;\n            end\n            3'b110: begin // Between s[3] and s[2]\n                fr3 <= 0;\n                fr2 <= 0;\n                fr1 <= 1;\n                dfr <= 0;\n            end\n            3'b100: begin // Between s[2] and s[1]\n                fr3 <= 0;\n                fr2 <= 1;\n                fr1 <= 1;\n                dfr <= (prev_s[1] == 0);\n            end\n            default: begin // Below s[1]\n                fr3 <= 1;\n                fr2 <= 1;\n                fr1 <= 1;\n                dfr <= 1;\n            end\n        endcase\n        prev_s <= s;\n    end\nend\n\nendmodule"}
{"task_id": "fsm_serial", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output done\n);\n    localparam IDLE = 2'b00, START = 2'b01, DATA = 2'b10, STOP = 2'b11;\n    reg [1:0] state, next_state;\n    reg [3:0] bit_count;\n    reg [7:0] data;\n    \n    always @(posedge clk) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n    \n    always @(*) begin\n        case (state)\n            IDLE: begin\n                next_state = in ? IDLE : START;\n                bit_count = 0;\n                data = 0;\n            end\n            START: begin\n                if (in)\n                    next_state = START;\n                else\n                    next_state = DATA;\n            end\n            DATA: begin\n                if (bit_count == 7)\n                    next_state = STOP;\n                else\n                    next_state = DATA;\n            end\n            STOP: begin\n                if (in)\n                    next_state = IDLE;\n                else\n                    next_state = STOP;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n    \n    always @(posedge clk) begin\n        case (state)\n            IDLE: data <= 8'b0;\n            DATA: data <= {data[6:0], in};\n            default: data <= data;\n        endcase\n    end\n    \n    assign done = (state == IDLE);\nendmodule"}
{"task_id": "fsm_serialdata", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output [7:0] out_byte,\n    output done\n);\n    localparam [3:0] IDLE = 4'd0, START = 4'd1, DATA = 4'd2, STOP = 4'd3;\n    reg [3:0] state, next_state;\n    reg [7:0] data_reg;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= IDLE;\n            data_reg <= 8'b0;\n            done <= 1'b0;\n        end else begin\n            state <= next_state;\n            case (state)\n                IDLE: begin\n                    done <= 1'b0;\n                    if (in == 1'b0) next_state <= START;\n                    else next_state <= IDLE;\n                end\n                START: begin\n                    done <= 1'b0;\n                    next_state <= DATA;\n                end\n                DATA: begin\n                    data_reg <= {data_reg[6:0], in};\n                    done <= 1'b0;\n                    if (in == 1'b1) next_state <= STOP;\n                    else next_state <= DATA;\n                end\n                STOP: begin\n                    done <= 1'b1;\n                    if (in == 1'b1) next_state <= IDLE;\n                    else next_state <= STOP;\n                end\n                default: next_state <= IDLE;\n            endcase\n        end\n    end\n\n    assign out_byte = data_reg;\nendmodule"}
{"task_id": "gshare", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "module top_module(\n    input clk,\n    input areset, \n\n    input predict_valid,\n    input [6:0] predict_pc,\n    output predict_taken, \n    output [6:0] predict_history,\n\n    input train_valid,\n    input train_taken,\n    input train_mispredicted,\n    input [6:0] train_history, \n    input [6:0] train_pc\n);\n\nreg [6:0] global_history;\nreg [6:0] next_global_history;\nreg [6:0] pht_index;\nreg [3:0] pht [0:127];\nreg [1:0] pht_entry;\n\nalways @(posedge clk or posedge areset) begin\n    if (areset)\n        global_history <= 7'b0;\n    else\n        global_history <= next_global_history;\nend\n\nalways @(*) begin\n    pht_index = {predict_pc[6:1], global_history[6]};\n    pht_entry = pht[pht_index];\nend\n\nalways @(*) begin\n    if (predict_valid) begin\n        predict_taken = (pht_entry > 2'b01);\n        predict_history = global_history;\n    end else begin\n        predict_taken = 1'b0;\n        predict_history = 7'b0;\n    end\nend\n\nalways @(*) begin\n    if (train_valid) begin\n        if (train_mispredicted)\n            next_global_history = {train_history[5:0], train_taken};\n        else\n            next_global_history = {global_history[5:0], train_taken};\n        if (pht[pht_index] != 3'b11)\n            pht[pht_index] <= pht_entry + (train_taken ? 2'b01 : 2'b10);\n    end else\n        next_global_history = global_history;\nend\n\nendmodule"}
{"task_id": "lemmings4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n\n    // States\n    localparam [3:0] WALK_LEFT = 4'd0, WALK_RIGHT = 4'd1, FALL = 4'd2, DIG = 4'd3, SPLATTER = 4'd4;\n    reg [3:0] state, next_state;\n    reg [4:0] fall_count;\n\n    // State transitions and outputs\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n        next_state = state;\n\n        case (state)\n            WALK_LEFT: begin\n                walk_left = 1'b1;\n                if (bump_right)\n                    next_state = WALK_RIGHT;\n                else if (ground == 1'b0)\n                    next_state = FALL;\n                else if (dig)\n                    next_state = DIG;\n            end\n            WALK_RIGHT: begin\n                walk_right = 1'b1;\n                if (bump_left)\n                    next_state = WALK_LEFT;\n                else if (ground == 1'b0)\n                    next_state = FALL;\n                else if (dig)\n                    next_state = DIG;\n            end\n            FALL: begin\n                aaah = 1'b1;\n                fall_count <= fall_count + 1'b1;\n                if (ground == 1'b1)\n                    next_state = (fall_count > 4'd20) ? SPLATTER : WALK_RIGHT;\n            end\n            DIG: begin\n                digging = 1'b1;\n                if (ground == 1'b0)\n                    next_state = FALL;\n                else if (dig)\n                    next_state = DIG;\n            end\n            SPLATTER: begin\n                walk_left = 1'b0;\n                walk_right = 1'b0;\n                aaah = 1'b0;\n                digging = 1'b0;\n            end\n        endcase\n    end\n\nendmodule"}
{"task_id": "review2015_fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack\n);\n    // State encoding\n    localparam [2:0] IDLE = 3'd0, SEARCH = 3'd1, SHIFTING = 3'd2, COUNTING = 3'd3, DONE = 3'd4;\n\n    reg [2:0] state, next_state;\n\n    // State transition logic\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            IDLE: next_state = (data == 1'b1) ? SEARCH : IDLE;\n            SEARCH: next_state = (data == 1'b1) ? IDLE : SEARCH;\n            SHIFTING: next_state = (shift_ena && done_counting) ? COUNTING : SHIFTING;\n            COUNTING: next_state = (done_counting) ? DONE : COUNTING;\n            DONE: next_state = (ack) ? IDLE : DONE;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        shift_ena = (state == SEARCH) ? 1'b1 : 1'b0;\n        counting = (state == COUNTING) ? 1'b1 : 1'b0;\n        done = (state == DONE) ? 1'b1 : 1'b0;\n    end\n\nendmodule"}
{"task_id": "conwaylife", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [255:0] data,\n    output reg [255:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else\n            q <= next_state(q);\n    end\n\n    function [255:0] next_state;\n        input [255:0] current_state;\n        reg [255:0] neighbours;\n        reg [7:0] cell;\n        integer i, j, k;\n\n        for (i = 0; i < 256; i = i + 1) begin\n            cell = 0;\n            for (j = -1; j <= 1; j = j + 1)\n                for (k = -1; k <= 1; k = k + 1)\n                    if (j != 0 || k != 0)\n                        cell = cell + current_state[i + 16*j + k];\n            neighbours[i] = cell;\n        end\n\n        for (i = 0; i < 256; i = i + 1)\n            case (neighbours[i])\n                0, 1: next_state[i] = 1'b0;\n                2: next_state[i] = current_state[i];\n                3: next_state[i] = 1'b1;\n                default: next_state[i] = 1'b0;\n            endcase\n    endfunction\n\nendmodule"}
{"task_id": "lemmings3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n\nlocalparam [1:0] WALK_LEFT = 2'b00,\n                 WALK_RIGHT = 2'b01,\n                 FALL = 2'b10,\n                 DIG = 2'b11;\n\nreg [1:0] state, next_state;\n\nalways @(posedge clk or posedge areset) begin\n    if (areset)\n        state <= WALK_LEFT;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        WALK_LEFT: next_state = (bump_left) ? WALK_RIGHT : (dig && ground) ? DIG : WALK_LEFT;\n        WALK_RIGHT: next_state = (bump_right) ? WALK_LEFT : (dig && ground) ? DIG : WALK_RIGHT;\n        FALL: next_state = ground ? state : FALL;\n        DIG: next_state = (ground) ? DIG : FALL;\n        default: next_state = WALK_LEFT;\n    endcase\nend\n\nalways @(*) begin\n    walk_left = 1'b0;\n    walk_right = 1'b0;\n    aaah = 1'b0;\n    digging = 1'b0;\n\n    case (state)\n        WALK_LEFT: walk_left = 1'b1;\n        WALK_RIGHT: walk_right = 1'b1;\n        FALL: aaah = 1'b1;\n        DIG: digging = 1'b1;\n    endcase\nend\n\nendmodule"}
{"task_id": "count_clock", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input ena,\n    output reg pm,\n    output reg [7:0] hh,\n    output reg [7:0] mm,\n    output reg [7:0] ss\n);\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        pm <= 1'b0; // AM\n        hh <= 8'd12; // 12:00\n        mm <= 8'd00; // 00 minutes\n        ss <= 8'd00; // 00 seconds\n    end\n    else if (ena) begin\n        if (ss == 8'd59) begin\n            ss <= 8'd00;\n            if (mm == 8'd59) begin\n                mm <= 8'd00;\n                if (hh == 8'd12) begin\n                    hh <= 8'd00; // Reset hours to 00 after 12:59\n                    pm <= ~pm; // Toggle AM/PM\n                end\n                else begin\n                    hh <= hh + 1'b1;\n                    pm <= 1'b0; // AM\n                end\n            end\n            else begin\n                mm <= mm + 1'b1;\n            end\n        end\n        else begin\n            ss <= ss + 1'b1;\n        end\n    end\nend\n\nendmodule"}
{"task_id": "lemmings2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    output walk_left,\n    output walk_right,\n    output aaah\n);\n    localparam [1:0] WALK_LEFT = 2'b00, WALK_RIGHT = 2'b01, FALL = 2'b10, FALLING = 2'b11;\n    reg [1:0] state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        next_state = state;\n        case (state)\n            WALK_LEFT:  next_state = bump_left ? WALK_RIGHT : WALK_LEFT;\n            WALK_RIGHT: next_state = bump_right ? WALK_LEFT : WALK_RIGHT;\n            FALL:       next_state = ground ? WALK_LEFT : FALLING;\n            FALLING:    next_state = ground ? state : FALLING;\n        endcase\n    end\n\n    always @(*) begin\n        walk_left  = (state == WALK_LEFT);\n        walk_right = (state == WALK_RIGHT);\n        aaah       = (state == FALLING);\n    end\n\nendmodule"}
{"task_id": "countbcd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output [3:1] ena,\n    output reg [15:0] q);\n\nalways @(posedge clk or posedge reset) begin\n  if (reset)\n    q <= 16'b0;\n  else begin\n    q[3:0] <= q[3:0] + 1;\n    if (q[3:0] == 4'b1001) begin\n      q[3:0] <= 4'b0000;\n      ena[1] <= 1;\n    end\n    else\n      ena[1] <= 0;\n    if (ena[1]) begin\n      q[7:4] <= q[7:4] + 1;\n      ena[1] <= 0;\n      if (q[7:4] == 4'b1001) begin\n        q[7:4] <= 4'b0000;\n        ena[2] <= 1;\n      end\n      else\n        ena[2] <= 0;\n    end\n    if (ena[2]) begin\n      q[11:8] <= q[11:8] + 1;\n      ena[2] <= 0;\n      if (q[11:8] == 4'b1001) begin\n        q[11:8] <= 4'b0000;\n        ena[3] <= 1;\n      end\n      else\n        ena[3] <= 0;\n    end\n    if (ena[3]) begin\n      q[15:12] <= q[15:12] + 1;\n      ena[3] <= 0;\n    end\n  end\nend\n\nendmodule"}
{"task_id": "mux2to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] a,\n    input [99:0] b,\n    input sel,\n    output [99:0] out\n);\n    assign out = sel ? b : a;\nendmodule"}
{"task_id": "m2014_q6b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "module top_module(\n    input [3:1] y,\n    input w,\n    output reg Y2);\n\n    always @(*) begin\n        case(y)\n            3'b000: Y2 = 0; // A\n            3'b001: Y2 = 0; // B\n            3'b010: Y2 = 0; // C\n            3'b011: Y2 = 0; // D\n            3'b100: Y2 = 1; // E\n            3'b101: Y2 = 1; // F\n            default: Y2 = 0;\n        endcase\n    end\n\nendmodule"}
{"task_id": "ringer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "module top_module(\n    input ring, \n    input vibrate_mode,\n    output ringer,\n    output motor\n);\n  assign ringer = ~vibrate_mode && ring;\n  assign motor = vibrate_mode && ring;\nendmodule"}
{"task_id": "alwaysblock1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an AND gate using both an assign statement and a combinational always block. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out_assign,\n    output reg out_alwaysblock\n);\n    assign out_assign = a & b; // Assign statement for AND gate\n    always @(*) begin\n        out_alwaysblock = a & b; // Combinational always block for AND gate\n    end\nendmodule"}
{"task_id": "zero", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that always outputs a LOW.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput zero);\n", "completion": "module top_module(\n    output zero);\n    \n    assign zero = 1'b0;  // Always output LOW\n\nendmodule"}
{"task_id": "circuit7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg q\n);\n\nalways @(posedge clk) begin\n    if (a)\n        q <= #1 ~q;\n    else\n        q <= #1 1'b1;\nend\n\nendmodule"}
{"task_id": "ece241_2014_q5a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n    reg z_reg, carry, prev_x;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            z_reg <= 1'b0;\n            carry <= 1'b0;\n            prev_x <= 1'b0;\n        end else begin\n            {z_reg, carry} <= {carry, x ^ prev_x};\n            prev_x <= x;\n        end\n    end\n\n    assign z = z_reg;\n\nendmodule"}
{"task_id": "fsm3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n    localparam [1:0] A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n    reg [1:0] current_state, next_state;\n    wire out_wire;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    assign out_wire = (current_state == D);\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= A;\n        else\n            current_state <= next_state;\n    end\n\n    // Output assignation\n    assign out = out_wire;\nendmodule"}
{"task_id": "vector2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that reverses the byte order of a 32-bit vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [31:0] in,\n    output [31:0] out\n);\n    // Assign each byte in reverse order\n    assign out = {in[7:0], in[15:8], in[23:16], in[31:24]};\nendmodule"}
{"task_id": "m2014_q4c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a simple D flip flop with active high synchronous reset (reset output to 0).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input r,\n    output logic q\n);\n\n    always @(posedge clk) begin\n        if (r)\n            q <= 1'b0;  // Reset output to 0\n        else\n            q <= d;  // Set output to d\n    end\n\nendmodule"}
{"task_id": "mt2015_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the boolean function z = (x^y) & x.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n    \n    assign z = (x ^ y) & x;\n\nendmodule"}
{"task_id": "shift18", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input ena,\n    input [1:0] amount,\n    input [63:0] data,\n    output reg [63:0] q\n);\n    \n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else if (ena) begin\n            case (amount)\n                2'b00: q <= {q[62:0], 1'b0}; // Shift left by 1 bit\n                2'b01: q <= {q[55:0], 8'b0}; // Shift left by 8 bits\n                2'b10: q <= {{1{q[63]}}, q[63:1]}; // Arithmetic right shift by 1 bit\n                2'b11: q <= {{8{q[63]}}, q[63:8]}; // Arithmetic right shift by 8 bits\n                default: q <= q; // No shift\n            endcase\n        end\n    end\n\nendmodule"}
{"task_id": "ece241_2013_q8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input aresetn,\n    input x,\n    output reg z\n);\n    \n    // State encoding\n    localparam [1:0] S0 = 2'b00, S1 = 2'b01, S2 = 2'b10;\n\n    reg [1:0] state, next_state;\n\n    // Next state logic\n    always @(posedge clk or negedge aresetn) begin\n        if (!aresetn)\n            state <= S0;\n        else\n            state <= next_state;\n    end\n\n    // State transition logic\n    always @(*) begin\n        case (state)\n            S0: next_state = x ? S1 : S0;\n            S1: next_state = x ? S2 : S0;\n            S2: next_state = x ? S2 : S0;\n            default: next_state = S0;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        z = (state == S2) ? 1'b1 : 1'b0;\n    end\n\nendmodule"}
{"task_id": "m2014_q6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n\n    localparam [2:0] A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n    reg [2:0] state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            A: next_state = w ? A : B;\n            B: next_state = w ? D : C;\n            C: next_state = w ? D : E;\n            D: next_state = w ? A : F;\n            E: next_state = w ? D : E;\n            F: next_state = w ? D : C;\n            default: next_state = A;\n        endcase\n    end\n\n    assign z = state[2];\n\nendmodule"}
{"task_id": "fsm_ps2data", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output [23:0] out_bytes,\n    output done\n);\n    reg [7:0] byte1, byte2, byte3;\n    reg [2:0] state, next_state;\n    localparam IDLE = 3'b000, BYTE1 = 3'b001, BYTE2 = 3'b010, BYTE3 = 3'b011;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= IDLE;\n            byte1 <= 8'h00;\n            byte2 <= 8'h00;\n            byte3 <= 8'h00;\n            done <= 1'b0;\n        end else begin\n            state <= next_state;\n            case (state)\n                IDLE: begin\n                    if (in[3]) begin\n                        byte1 <= in;\n                        next_state <= BYTE1;\n                    end else begin\n                        next_state <= IDLE;\n                    end\n                end\n                BYTE1: begin\n                    byte2 <= in;\n                    next_state <= BYTE2;\n                end\n                BYTE2: begin\n                    byte3 <= in;\n                    next_state <= BYTE3;\n                end\n                BYTE3: begin\n                    done <= 1'b1;\n                    out_bytes <= {byte1, byte2, byte3};\n                    next_state <= IDLE;\n                end\n                default: next_state <= IDLE;\n            endcase\n        end\n    end\n\n    always @(*) begin\n        case (state)\n            BYTE3: done = 1'b1;\n            default: done = 1'b0;\n        endcase\n    end\n\nendmodule"}
{"task_id": "2012_q2b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\n\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "module top_module (\n    input [5:0] y,\n    input w,\n    output Y1,\n    output Y3\n);\n    assign Y1 = y[1] & w | y[4] & ~w | y[5] & ~w;\n    assign Y3 = y[3] & ~w | y[4] & w | y[5] & w;\nendmodule"}
{"task_id": "vector0", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "module top_module(\n    input [2:0] vec, \n    output [2:0] outv,\n    output o2,\n    output o1,\n    output o0\n);\nassign outv = vec; // Copy input vector to output vector\nassign o2 = vec[2]; // Assign bit 2 to o2\nassign o1 = vec[1]; // Assign bit 1 to o1\nassign o0 = vec[0]; // Assign bit 0 to o0\nendmodule"}
{"task_id": "kmap4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n\nalways @(*) begin\n    case({c,d,a,b})\n        4'b0000, 4'b0101, 4'b1010, 4'b1111: out = 1'b0;\n        default: out = 1'b1;\n    endcase\nend\n\nendmodule"}
{"task_id": "vector1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "module top_module (\n    input [15:0] in,\n    output [7:0] out_hi,\n    output [7:0] out_lo\n);\n    assign out_hi = in[15:8];\n    assign out_lo = in[7:0];\nendmodule"}
{"task_id": "norgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = ~(a | b);\nendmodule"}
{"task_id": "alwaysblock2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "module top_module(\n    input clk,\n    input a, \n    input b,\n    output out_assign,\n    output reg out_always_comb,\n    output reg out_always_ff\n);\n\n    assign out_assign = a ^ b;\n\n    always @(*) begin\n        out_always_comb = a ^ b;\n    end\n\n    always @(posedge clk) begin\n        out_always_ff <= a ^ b;\n    end\n\nendmodule"}
{"task_id": "m2014_q6c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "module top_module (\n    input [6:1] y,\n    input w,\n    output Y2,\n    output Y4\n);\n    // Y2 logic: 1 if y[4] (D) or y[5] (F)\n    assign Y2 = y[4] | y[5];\n    // Y4 logic: 1 if y[2] (C) or y[5] (F) and w is 0\n    assign Y4 = (y[2] | y[5]) & ~w;\nendmodule"}
{"task_id": "mux256to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "module top_module (\n    input [255:0] in,\n    input [7:0] sel,\n    output  out\n);\n  assign out = in[sel];\nendmodule"}
{"task_id": "2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input w,\n    input R,\n    input E,\n    input L,\n    output reg Q\n);\n    \n    always @(posedge clk) begin\n        if (L)\n            Q <= R;\n        else if (E)\n            Q <= Q;\n        else\n            Q <= w;\n    end\n\nendmodule"}
{"task_id": "ece241_2014_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    output z\n);\n    reg [2:0] q;\n    reg z_reg;\n\n    always @(posedge clk) begin\n        q[0] <= x ^ q[0];\n        q[1] <= x & ~q[1];\n        q[2] <= x | ~q[2];\n    end\n\n    assign z = ^q;\n\nendmodule"}
{"task_id": "circuit4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n    assign q = ~(a & ~b & ~c & ~d);\nendmodule"}
{"task_id": "rule110", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else\n            q <= {q[509:0], q[0], 1'b0} ^ {1'b0, q[511:1], q[511]} ^ {1'b0, q[511:1], 1'b0};\n    end\n\nendmodule"}
{"task_id": "fsm3s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n    \n    // State encoding\n    enum {A, B, C, D} state, next_state;\n    \n    // State register\n    reg [1:0] state_reg;\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state_reg <= 2'b00; // Initial state A\n        else\n            state_reg <= next_state;\n    end\n    \n    // State decoder\n    always @(*) begin\n        case (state_reg)\n            2'b00: state = A;\n            2'b01: state = B;\n            2'b10: state = C;\n            2'b11: state = D;\n            default: state = A;\n        endcase\n    end\n    \n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A;\n        endcase\n    end\n    \n    // Output logic\n    assign out = (state == D) ? 1'b1 : 1'b0;\n    \nendmodule"}
{"task_id": "circuit5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "module top_module (\n    input [3:0] a, \n    input [3:0] b, \n    input [3:0] c, \n    input [3:0] d,\n    input [3:0] e,\n    output reg [3:0] q\n);\n\nalways @(*) begin\n    case(c)\n        4'b0000: q = b;\n        4'b0001: q = e;\n        4'b0010: q = a;\n        4'b0011: q = d;\n        4'b0100: q = 4'hf;\n        default: q = 4'hf;\n    endcase\nend\n\nendmodule"}
{"task_id": "bugs_mux2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFind the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input sel,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out\n);\n\n    always @(*) begin\n        if (sel)\n            out = b;\n        else\n            out = a;\n    end\n\nendmodule"}
{"task_id": "mt2015_muxdff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "module top_module(\n    input clk,\n    input L,\n    input q_in,\n    input r_in,\n    output reg Q);\n\n    always @(posedge clk) begin\n        if (L)\n            Q <= r_in;\n        else\n            Q <= q_in ^ Q;\n    end\n\nendmodule\n\nmodule full_module (\n    input [2:0] r,\n    input L,\n    input clk,\n    output reg [2:0] q\n);\n\n    wire q0, q1, q2;\n    top_module top0 (.clk(clk), .L(L), .q_in(q[0]), .r_in(r[0]), .Q(q0));\n    top_module top1 (.clk(clk), .L(L), .q_in(q[1]), .r_in(r[1]), .Q(q1));\n    top_module top2 (.clk(clk), .L(L), .q_in(q[2]), .r_in(r[2]), .Q(q2));\n\n    always @* begin\n        q = {q2, q1, q0};\n    end\n\nendmodule"}
{"task_id": "edgecapture", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input [31:0] in,\n    output reg [31:0] out\n);\n\nreg [31:0] prev_in;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        prev_in <= 32'b0;\n        out <= 32'b0;\n    end else begin\n        prev_in <= in;\n        out <= (in != prev_in) & in;\n    end\nend\n\nendmodule"}
{"task_id": "dff8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    output reg [7:0] q);\n\n    always @(posedge clk) begin\n        q <= d;\n    end\n\nendmodule"}
{"task_id": "ece241_2014_q1c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nAssume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [7:0] b,\n    output [7:0] s,\n    output overflow\n);\n    wire [8:0] sum;\n    assign sum = a + b;\n    assign s = sum[7:0];\n    assign overflow = (sum[8] != sum[7]);\nendmodule"}
{"task_id": "review2015_fsmonehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output reg B3_next,\n    output reg S_next,\n    output reg S1_next,\n    output reg Count_next,\n    output reg Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n);\n\n    always @(*) begin\n        B3_next = (state == 10'b0000000100);  // B3_next is true when in B3 state\n        S_next = (state == 10'b1000000000);   // S_next is true when in S state\n        S1_next = (state == 10'b0000000010);  // S1_next is true when in S1 state\n        Count_next = (state == 10'b0000100000); // Count_next is true when in Count state\n        Wait_next = (state == 10'b0000010000); // Wait_next is true when in Wait state\n\n        done = (state == 10'b0000010000); // done is true when in Wait state\n        counting = (state == 10'b0000100000); // counting is true when in Count state\n        shift_ena = (state == 10'b0000001000 || state == 10'b0000001000 || state == 10'b0000001000 || state == 10'b0000001000 || state == 10'b0000001000 || state == 10'b0000001000); // shift_ena is true in B0, B1, B2, B3 states\n    end\n\nendmodule"}
{"task_id": "counter_2bc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 2'b01;\n        else if (train_valid) begin\n            if (train_taken)\n                state <= (state == 2'b11) ? 2'b11 : state + 1'b1;\n            else\n                state <= (state == 2'b00) ? 2'b00 : state - 1'b1;\n        end\n    end\nendmodule"}
{"task_id": "always_casez", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output reg [2:0] pos\n);\n    always @* begin\n        if (in[0]) pos = 3'd0;\n        else if (in[1]) pos = 3'd1;\n        else if (in[2]) pos = 3'd2;\n        else if (in[3]) pos = 3'd3;\n        else if (in[4]) pos = 3'd4;\n        else if (in[5]) pos = 3'd5;\n        else if (in[6]) pos = 3'd6;\n        else if (in[7]) pos = 3'd7;\n        else pos = 3'd0; // Output zero if no bits are high\n    end\nendmodule"}
{"task_id": "always_nolatches", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "module top_module (\n    input [15:0] scancode,\n    output reg left,\n    output reg down,\n    output reg right,\n    output reg up\n);\n\nalways @(*) begin\n    case(scancode)\n        16'hE06B: begin\n            left = 1;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n        16'hE072: begin\n            left = 0;\n            down = 1;\n            right = 0;\n            up = 0;\n        end\n        16'hE074: begin\n            left = 0;\n            down = 0;\n            right = 1;\n            up = 0;\n        end\n        16'hE075: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 1;\n        end\n        default: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4j", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 4-bit adder with full adders. The output sum should include the overflow bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "module top_module (\n    input [3:0] x,\n    input [4:0] y,\n    output [4:0] sum\n);\n    wire [4:0] carry;\n    wire overflow;\n    assign {overflow, sum} = x + y;\n    assign carry[0] = x[0] & y[0];\n    genvar i;\n    generate\n        for (i = 1; i < 5; i = i + 1) begin : full_adder\n            assign carry[i] = x[i] ^ y[i] ^ carry[i-1];\n            assign sum[i-1] = (x[i] ^ y[i]) ^ carry[i-1];\n        end\n    endgenerate\n    assign sum[4] = overflow;\nendmodule"}
{"task_id": "history_shift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n\n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n    logic [31:0] new_history;\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            predict_history <= 32'b0;\n        end else if (train_mispredicted) begin\n            predict_history <= {train_history, train_taken};\n        end else if (predict_valid) begin\n            predict_history <= {predict_history[30:0], predict_taken};\n        end\n    end\n\nendmodule"}
{"task_id": "wire_decl", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out,\n    output out_n\n);\n\nwire and1, and2;\n\nand (and1, a, b);\nand (and2, c, d);\nor (out, and1, and2);\nnot (out_n, out);\n\nendmodule"}
{"task_id": "dff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a single D flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q);\n\n    always @(posedge clk) begin\n        q <= d;\n    end\n\nendmodule"}
{"task_id": "ece241_2013_q12", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "module top_module (\n    input clk,\n    input enable,\n    input S,\n    input A,\n    input B,\n    input C,\n    output reg Z\n);\n\nreg [7:0] shift_register;\n\nalways @(posedge clk) begin\n    if (enable)\n        shift_register <= {S, shift_register[7:1]};\nend\n\nassign Z = shift_register[3'b000 + {A,B,C}];\n\nendmodule"}
{"task_id": "thermostat", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "module top_module(\n    input mode,\n    input too_cold, \n    input too_hot,\n    input fan_on,\n    output heater,\n    output aircon,\n    output fan\n);\n    assign heater = mode & too_cold;\n    assign aircon = ~mode & too_hot;\n    assign fan = heater | aircon | fan_on;\nendmodule"}
{"task_id": "ece241_2013_q2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out_sop,\n    output out_pos\n);\n    // Sum of Products (SOP) implementation\n    assign out_sop = (a & b & ~c & ~d) | (~a & ~b & c & ~d) | (~a & ~b & ~c & d);\n    // Product of Sums (POS) implementation\n    assign out_pos = (~a | ~b | c | d) & (~a | b | ~c | d) & (a | b | ~c | d);\nendmodule"}
{"task_id": "lfsr32", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [31:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 32'h1;\n        else\n            q <= {q[30:0], q[31] ^ q[21] ^ q[1] ^ q[0]};\n    end\n\nendmodule"}
{"task_id": "circuit3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n\nassign q = (a & b) | (~c & d);\n\nendmodule"}
{"task_id": "7420", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d, \n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n    \n    assign p1y = ~(p1a & p1b & p1c & p1d);  // NAND gate for inputs p1a-p1d\n    assign p2y = ~(p2a & p2b & p2c & p2d);  // NAND gate for inputs p2a-p2d\n\nendmodule"}
{"task_id": "popcount255", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input [254:0] in,\n    output reg [7:0] out\n);\n    // Divide input into 32-bit chunks\n    genvar i;\n    generate\n        for (i = 0; i < 8; i = i + 1) begin : count_gen\n            wire [31:0] chunk = in[(32*i+31):(32*i)];\n            reg [4:0] count = 0;\n            always @(*) begin\n                count = 0;\n                for (genvar j = 0; j < 32; j = j + 1)\n                    count += chunk[j];\n            end\n            assign out[i] = count;\n        end\n    endgenerate\nendmodule"}
{"task_id": "gatesv", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output [2:0] out_both,\n    output [3:1] out_any,\n    output [3:0] out_different\n);\n    assign out_both = {1'b1, in[3:2] & in[2:1]};\n    assign out_any = {in[0] | in[3], in[1] | in[2], in[2] | in[3]};\n    assign out_different = {in[0] ^ in[3], in[1] ^ in[0], in[2] ^ in[1], in[3] ^ in[2]};\nendmodule"}
{"task_id": "circuit6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "module top_module (\n    input [2:0] a, \n    output reg [15:0] q\n);\n\nalways @(*) begin\n    case(a)\n        3'b000: q = 16'h1232;\n        3'b001: q = 16'hAEE0;\n        3'b010: q = 16'h27D4;\n        3'b011: q = 16'h5A0E;\n        3'b100: q = 16'h2066;\n        3'b101: q = 16'h64CE;\n        3'b110: q = 16'hC526;\n        3'b111: q = 16'h2F19;\n        default: q = 16'h0000;\n    endcase\nend\n\nendmodule"}
{"task_id": "countslow", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input slowena,\n    input reset,\n    output reg [3:0] q);\n\nalways @(posedge clk) begin\n    if (reset)\n        q <= 4'd0;\n    else if (slowena)\n        q <= (q == 4'd9) ? 4'd0 : q + 1'b1;\n    else\n        q <= q;\nend\n\nendmodule"}
{"task_id": "m2014_q4f", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n\n    logic not_in2;\n    \n    // Invert in2 before the AND operation\n    assign not_in2 = ~in2;\n    assign out = in1 & not_in2;\n\nendmodule"}
{"task_id": "m2014_q4h", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module assigns the output port to the same value as the input port combinationally.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out);\n    assign out = in;\nendmodule"}
{"task_id": "fsm1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n\n    localparam [1:0] B = 2'b10, A = 2'b00;\n    reg [1:0] state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= B;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            B: next_state = in ? B : A;\n            A: next_state = in ? A : B;\n            default: next_state = B;\n        endcase\n    end\n\n    assign out = (state == A) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "dualedge", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q);\n\n    always @(posedge clk or posedge d) begin\n        if (d)\n            q <= ~q;\n    end\n\nendmodule"}
{"task_id": "xnorgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an XNOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\nassign out = ~(a ^ b); // XNOR operation using XOR and NOT\nendmodule"}
{"task_id": "mt2015_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nModule A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n\n    wire a1_out, a2_out, b1_out, b2_out, or_out, and_out;\n\n    // Instantiate submodules A\n    A a1(.x(x), .y(y), .z(a1_out));\n    A a2(.x(x), .y(y), .z(a2_out));\n\n    // Instantiate submodules B\n    B b1(.x(x), .y(y), .z(b1_out));\n    B b2(.x(x), .y(y), .z(b2_out));\n\n    // Connect outputs to OR and AND gates\n    or_gate or1(.a(a1_out), .b(b1_out), .c(or_out));\n    and_gate and1(.a(a2_out), .b(b2_out), .c(and_out));\n\n    // Connect OR and AND outputs to XOR gate\n    xor_gate xor1(.a(or_out), .b(and_out), .c(z));\n\nendmodule\n\nmodule A(\n    input x,\n    input y,\n    output z);\n    assign z = (x ^ y) & x;\nendmodule\n\nmodule B(\n    input x,\n    input y,\n    output z);\n    // Define the logic for module B based on the provided waveform\n    assign z = (x & ~y) | (x & y);\nendmodule\n\nmodule or_gate(\n    input a,\n    input b,\n    output c);\n    assign c = a | b;\nendmodule\n\nmodule and_gate(\n    input a,\n    input b,\n    output c);\n    assign c = a & b;\nendmodule\n\nmodule xor_gate(\n    input a,\n    input b,\n    output c);\n    assign c = a ^ b;\nendmodule"}
{"task_id": "rotate100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [1:0] ena,\n    input [99:0] data,\n    output reg [99:0] q);\n\nalways @(posedge clk) begin\n    if (load)\n        q <= data;\n    else if (ena == 2'b01) // Rotate right\n        q <= {q[0], q[99:1]};\n    else if (ena == 2'b10) // Rotate left\n        q <= {q[98:0], q[99]};\n    // No rotation for ena == 2'b00 or 2'b11\nend\n\nendmodule"}
{"task_id": "review2015_count1k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [9:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 10'd0;\n        else if (q == 10'd999)\n            q <= 10'd0;\n        else\n            q <= q + 1'b1;\n    end\n\nendmodule"}
{"task_id": "notgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOT gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = ~in; // NOT operation\nendmodule"}
{"task_id": "fsm_onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "module top_module (\n    input in,\n    input [9:0] state,\n    output [9:0] next_state,\n    output out1,\n    output out2);\n\n    // Next state logic\n    assign next_state = (state == 10'b0000000001) ? (in ? 10'b0000000010 : 10'b0000000001) :\n                        (state == 10'b0000000100) ? (in ? 10'b0000001000 : 10'b0000000001) :\n                        (state == 10'b0000010000) ? (in ? 10'b0001000000 : 10'b0000000001) :\n                        (state == 10'b0010000000) ? (in ? 10'b0100000000 : 10'b0000000001) :\n                        (state == 10'b1000000000) ? (in ? 10'b0000000001 : 10'b0000000001) :\n                        (state == 10'b0000000010) ? (in ? 10'b0000000100 : 10'b0000000001) :\n                        (state == 10'b0000001000) ? (in ? 10'b0000100000 : 10'b0000000001) :\n                        (state == 10'b0001000000) ? (in ? 10'b0010000000 : 10'b0000000001) :\n                        (state == 10'b0100000000) ? (in ? 10'b1000000000 : 10'b0000000001) :\n                        (state == 10'b0000000101) ? (in ? 10'b0000000010 : 10'b0000000001) :\n                        (state == 10'b0000000010) ? (in ? 10'b0000000100 : 10'b0000000001) :\n                        (state == 10'b0000001000) ? (in ? 10'b0000100000 : 10'b0000000001) :\n                        (state == 10'b0001000000) ? (in ? 10'b0010000000 : 10'b0000000001) :\n                        (state == 10'b0100000000) ? (in ? 10'b1000000000 : 10'b0000000001) : 10'b0000000001;\n\n    // Output logic\n    assign {out1, out2} = (state == 10'b0110000000) ? 2'b01 : (state == 10'b0010000001) ? 2'b10 : 2'b00;\n\nendmodule"}
{"task_id": "ece241_2013_q7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    output reg Q\n);\n    always @(posedge clk) begin\n        case ({j, k})\n            2'b00: Q <= Q; // No change\n            2'b01: Q <= 1'b0; // Reset\n            2'b10: Q <= 1'b1; // Set\n            2'b11: Q <= ~Q; // Toggle\n        endcase\n    end\nendmodule"}
{"task_id": "popcount3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "module top_module (\n    input [2:0] in,\n    output [1:0] out\n);\n    logic [1:0] count;\n    assign count = in[0] + in[1] + in[2];\n    assign out = count;\nendmodule"}
{"task_id": "vector5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    input e,\n    output [24:0] out\n);\n    assign out[24] = ~a ^ a;\n    assign out[23] = ~a ^ b;\n    assign out[22] = ~a ^ c;\n    assign out[21] = ~a ^ d;\n    assign out[20] = ~a ^ e;\n    assign out[19] = ~b ^ a;\n    assign out[18] = ~b ^ b;\n    assign out[17] = ~b ^ c;\n    assign out[16] = ~b ^ d;\n    assign out[15] = ~b ^ e;\n    assign out[14] = ~c ^ a;\n    assign out[13] = ~c ^ b;\n    assign out[12] = ~c ^ c;\n    assign out[11] = ~c ^ d;\n    assign out[10] = ~c ^ e;\n    assign out[ 9] = ~d ^ a;\n    assign out[ 8] = ~d ^ b;\n    assign out[ 7] = ~d ^ c;\n    assign out[ 6] = ~d ^ d;\n    assign out[ 5] = ~d ^ e;\n    assign out[ 4] = ~e ^ a;\n    assign out[ 3] = ~e ^ b;\n    assign out[ 2] = ~e ^ c;\n    assign out[ 1] = ~e ^ d;\n    assign out[ 0] = ~e ^ e;\nendmodule"}
{"task_id": "lemmings1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    output walk_left,\n    output walk_right\n);\n  reg [1:0] state, next_state;\n  \n  // State definitions\n  parameter WALK_LEFT = 2'b00;\n  parameter WALK_RIGHT = 2'b01;\n  \n  // Next state logic\n  always @(*) begin\n    case (state)\n      WALK_LEFT: next_state = bump_left ? WALK_RIGHT : WALK_LEFT;\n      WALK_RIGHT: next_state = bump_right ? WALK_LEFT : WALK_RIGHT;\n      default: next_state = WALK_LEFT;\n    endcase\n  end\n  \n  // State register\n  always @(posedge clk or posedge areset) begin\n    if (areset)\n      state <= WALK_LEFT;\n    else\n      state <= next_state;\n  end\n  \n  // Output logic\n  assign walk_left = state == WALK_LEFT;\n  assign walk_right = state == WALK_RIGHT;\n  \nendmodule"}
{"task_id": "circuit1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    output q\n);\n    assign q = a & b;\nendmodule"}
{"task_id": "7458", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d,\n    input p1e,\n    input p1f,\n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n    wire and1, and2, and3, and4;\n\n    assign and1 = p1a & p1b & p1c;\n    assign and2 = p1d & p1e & p1f;\n    assign and3 = p2a & p2b;\n    assign and4 = p2c & p2d;\n\n    assign p1y = and1 | and2;\n    assign p2y = and3 | and4;\nendmodule"}
{"task_id": "2014_q3c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    input [2:0] y,\n    output reg Y0,\n    output reg z\n);\n\nreg [2:0] next_state;\n\nalways @(posedge clk) begin\n    case(y)\n        3'b000: begin\n            if(x == 1'b0)\n                next_state = 3'b000;\n            else\n                next_state = 3'b001;\n            Y0 = 1'b0;\n        end\n        3'b001: begin\n            if(x == 1'b0)\n                next_state = 3'b001;\n            else\n                next_state = 3'b100;\n            Y0 = 1'b0;\n        end\n        3'b010: begin\n            if(x == 1'b0)\n                next_state = 3'b010;\n            else\n                next_state = 3'b001;\n            Y0 = 1'b0;\n        end\n        3'b011: begin\n            if(x == 1'b0)\n                next_state = 3'b001;\n            else\n                next_state = 3'b010;\n            Y0 = 1'b1;\n        end\n        3'b100: begin\n            if(x == 1'b0)\n                next_state = 3'b011;\n            else\n                next_state = 3'b100;\n            Y0 = 1'b1;\n        end\n        default: next_state = 3'b000;\n    endcase\nend\n\nalways @(posedge clk) begin\n    y <= next_state;\nend\n\nendmodule"}
{"task_id": "m2014_q4e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 2-input NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    // NOR gate implementation\n    assign out = ~(in1 | in2);\nendmodule"}
{"task_id": "wire4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    output w,\n    output x,\n    output y,\n    output z  );\n\n    assign w = a;\n    assign x = b;\n    assign y = b;\n    assign z = c;\n\nendmodule"}
{"task_id": "m2014_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input ar,\n    output logic q\n);\n    \n    always @(posedge clk or posedge ar) begin\n        if (ar)\n            q <= 1'b0; // Asynchronous reset\n        else\n            q <= d; // D flip-flop functionality\n    end\n\nendmodule"}
{"task_id": "always_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "module top_module (\n    input [2:0] sel,\n    input [3:0] data0,\n    input [3:0] data1,\n    input [3:0] data2,\n    input [3:0] data3,\n    input [3:0] data4,\n    input [3:0] data5,\n    output reg [3:0] out\n);\n    always @(*) begin\n        case (sel)\n            3'b000: out = data0;\n            3'b001: out = data1;\n            3'b010: out = data2;\n            3'b011: out = data3;\n            3'b100: out = data4;\n            3'b101: out = data5;\n            default: out = 4'b0;\n        endcase\n    end\nendmodule"}
{"task_id": "timer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "module top_module(\n    input clk, \n    input load, \n    input [9:0] data, \n    output reg tc\n);\n    reg [9:0] counter;\n\n    always @(posedge clk) begin\n        if (load) begin\n            counter <= data; // Load data into counter\n            tc <= 1'b0; // Reset terminal count signal\n        end else if (counter > 0) begin\n            counter <= counter - 1'b1; // Decrement counter\n        end else begin\n            tc <= 1'b1; // Assert terminal count signal\n        end\n    end\n\nendmodule"}
{"task_id": "review2015_fsmseq", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg start_shifting\n);\n\nreg [3:0] state, next_state;\nlocalparam S0 = 4'b0000, S1 = 4'b0001, S2 = 4'b0010, S3 = 4'b0011, S4 = 4'b0100;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= S0;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case(state)\n        S0: next_state = (data) ? S1 : S0;\n        S1: next_state = (data) ? S2 : S0;\n        S2: next_state = (data) ? S4 : S1;\n        S3: next_state = (data) ? S4 : S1;\n        S4: next_state = S0;\n        default: next_state = S0;\n    endcase\nend\n\nalways @(*) begin\n    case(state)\n        S4: start_shifting = 1'b1;\n        default: start_shifting = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "dff8r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        q <= 8'b0;\n    else\n        q <= d;\nend\n\nendmodule"}
{"task_id": "edgedetect2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] anyedge\n);\n    // Declare a register to hold the previous input value\n    reg [7:0] in_prev;\n\n    // At each clock edge, check for a 0 to 1 transition in each bit\n    always @(posedge clk) begin\n        in_prev <= in; // Store the previous input value\n        anyedge <= (in & ~in_prev); // Set anyedge for bits that transitioned from 0 to 1\n    end\n\nendmodule"}
{"task_id": "count1to10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nMake a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        q <= 4'd1;  // Reset to 1\n    else begin\n        if (q == 4'd10)  // When counter reaches 10\n            q <= 4'd1;  // Reset to 1\n        else\n            q <= q + 1'b1;  // Increment by 1\n    end\nend\n\nendmodule"}
{"task_id": "circuit9", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg [2:0] q\n);\n\nalways @(posedge clk) begin\n    if (a == 1'b0) begin\n        case (q)\n            3'b000: q <= 3'b001;\n            3'b001: q <= 3'b010;\n            3'b010: q <= 3'b011;\n            3'b011: q <= 3'b100;\n            3'b100: q <= 3'b101;\n            3'b101: q <= 3'b110;\n            3'b110: q <= 3'b111;\n            3'b111: q <= 3'b000;\n        endcase\n    end\n    else begin\n        q <= 3'b100;\n    end\nend\n\nendmodule"}
{"task_id": "lfsr5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [4:0] q\n);\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 5'b00001;\n        else\n            q <= {q[3], q[4] ^ q[2], q[0:2]};\n    end\nendmodule"}
{"task_id": "bugs_addsubz", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "module top_module (\n    input do_sub,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out,\n    output reg result_is_zero\n);\n    always @(*) begin\n        case (do_sub)\n            1'b0: out = a + b;\n            1'b1: out = a - b;\n            default: out = 8'b0;\n        endcase\n\n        result_is_zero = (out == 8'b0);\n    end\nendmodule"}
{"task_id": "m2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n\n    // Karnaugh map implementation\n    always_comb begin\n        case (x)\n            4'b0000, 4'b0010, 4'b0100, 4'b0111: f = 1'b0; // 0\n            4'b0101, 4'b0110, 4'b1001, 4'b1011, 4'b1101, 4'b1110: f = 1'b1; // 1\n            default: f = 1'bx; // Don't care\n        endcase\n    end\n\nendmodule"}
{"task_id": "bugs_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "module top_module (\n    input [7:0] code,\n    output reg [3:0] out,\n    output reg valid\n);\n    always @* begin\n        case(code)\n            8'h45: begin out = 4'd0; valid = 1'b1; end\n            8'h16: begin out = 4'd1; valid = 1'b1; end\n            8'h1e: begin out = 4'd2; valid = 1'b1; end\n            8'h26: begin out = 4'd3; valid = 1'b1; end\n            8'h25: begin out = 4'd4; valid = 1'b1; end\n            8'h2e: begin out = 4'd5; valid = 1'b1; end\n            8'h36: begin out = 4'd6; valid = 1'b1; end\n            8'h3d: begin out = 4'd7; valid = 1'b1; end\n            8'h3e: begin out = 4'd8; valid = 1'b1; end\n            8'h46: begin out = 4'd9; valid = 1'b1; end\n            default: begin out = 4'd0; valid = 1'b0; end\n        endcase\n    end\nendmodule"}
{"task_id": "vectorr", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven an 8-bit input vector [7:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [7:0] out\n);\n    assign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\nendmodule"}
{"task_id": "kmap3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n\nalways @(*) begin\n    case({c, b, a})\n        3'b000: out = 0;\n        3'b001: out = 0;\n        3'b010: out = 0;\n        3'b100: out = 1;\n        3'b101: out = 1;\n        3'b110: out = 1;\n        3'b111: out = 1;\n        default: out = 1; // Don't care\n    endcase\nend\n\nendmodule"}
{"task_id": "review2015_shiftcount", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input shift_ena,\n    input count_ena,\n    input data,\n    output reg [3:0] q);\n\n    always @(posedge clk) begin\n        if (shift_ena)\n            q <= {data, q[3:1]}; // Shift in data MSB first\n        else if (count_ena)\n            q <= q - 1'b1; // Decrement the counter\n    end\n\nendmodule"}
{"task_id": "wire", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with one input and one output that behaves like a wire.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = in;\nendmodule"}
{"task_id": "review2015_fsmshift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output shift_ena\n);\nreg [1:0] count;\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        count <= 2'b00;\n    else if (count == 2'b11)\n        count <= 2'b00;\n    else\n        count <= count + 1'b1;\nend\n\nassign shift_ena = (count < 2'b10) & ~reset;\nendmodule"}
{"task_id": "count15", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'b0000;  // Reset counter to 0\n        else\n            q <= q + 1'b1;  // Increment counter\n    end\n\nendmodule"}
{"task_id": "always_if", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel_b1,\n    input sel_b2,\n    output out_assign,\n    output reg out_always\n);\n\n    // Using assign statement\n    assign out_assign = (~sel_b1 | ~sel_b2) ? a : b;\n\n    // Using procedural if statement\n    always @(*) begin\n        if (!sel_b1 | !sel_b2)\n            out_always = a;\n        else\n            out_always = b;\n    end\n\nendmodule"}
{"task_id": "kmap1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    input c,\n    output out\n);\n  assign out = ~a | b | c;\nendmodule"}
{"task_id": "2013_q2afsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input [3:1] r,\n    output [3:1] g\n);\n    \n    reg [2:0] state, next_state;\n    \n    // State encoding\n    localparam A = 3'b000;\n    localparam B = 3'b001;\n    localparam C = 3'b010;\n    localparam D = 3'b011;\n    \n    // State transition\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            state <= A;\n        else\n            state <= next_state;\n    end\n    \n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = (r[1]) ? B : ((r[2]) ? C : ((r[3]) ? D : A));\n            B: next_state = (r[1]) ? B : A;\n            C: next_state = (r[2]) ? C : A;\n            default: next_state = A;\n        endcase\n    end\n    \n    // Output logic\n    always @(*) begin\n        g[1] = (state == B);\n        g[2] = (state == C);\n        g[3] = (state == D);\n    end\n\nendmodule"}
{"task_id": "count10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q\n);\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        q <= 4'd0;  // Reset to 0 when reset is high\n    else if (q == 4'd9)\n        q <= 4'd0;  // Reset to 0 when reaches 9\n    else\n        q <= q + 1'b1;  // Increment by 1\nend\n\nendmodule"}
{"task_id": "fsm_ps2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output done\n);\n    reg [2:0] state, next_state;\n    reg [7:0] byte_count;\n    reg [7:0] current_byte;\n    reg done_reg;\n\n    // State encoding\n    localparam IDLE = 3'b000;\n    localparam BYTE1 = 3'b001;\n    localparam BYTE2 = 3'b010;\n    localparam BYTE3 = 3'b011;\n    localparam DONE = 3'b100;\n\n    // State transition logic\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= IDLE;\n            byte_count <= 8'd0;\n            current_byte <= 8'd0;\n            done_reg <= 1'b0;\n        end else begin\n            state <= next_state;\n            case (state)\n                IDLE: begin\n                    if (in[3]) begin\n                        next_state <= BYTE1;\n                        byte_count <= 8'd1;\n                        current_byte <= in;\n                    end else begin\n                        next_state <= IDLE;\n                    end\n                end\n                BYTE1: begin\n                    next_state <= BYTE2;\n                    byte_count <= 8'd2;\n                    current_byte <= in;\n                end\n                BYTE2: begin\n                    next_state <= BYTE3;\n                    byte_count <= 8'd3;\n                    current_byte <= in;\n                end\n                BYTE3: begin\n                    next_state <= DONE;\n                    byte_count <= 8'd0;\n                    current_byte <= 8'd0;\n                    done_reg <= 1'b1;\n                end\n                DONE: begin\n                    next_state <= IDLE;\n                    done_reg <= 1'b0;\n                end\n                default: next_state <= IDLE;\n            endcase\n        end\n    end\n\n    assign done = done_reg;\n\nendmodule"}
{"task_id": "mux2to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel,\n    output out\n);\n    assign out = sel ? b : a;\nendmodule"}
{"task_id": "gates4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and = &in;  // 4-input AND gate\n    assign out_or = |in;   // 4-input OR gate\n    assign out_xor = ^in;  // 4-input XOR gate\n\nendmodule"}
{"task_id": "2014_q3bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input x,\n    output reg z\n);\n\nreg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= 3'b000;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        3'b000: next_state = x ? 3'b001 : 3'b000;\n        3'b001: next_state = x ? 3'b100 : 3'b001;\n        3'b010: next_state = x ? 3'b001 : 3'b010;\n        3'b011: next_state = x ? 3'b100 : 3'b010;\n        3'b100: next_state = x ? 3'b100 : 3'b011;\n        default: next_state = 3'b000;\n    endcase\nend\n\nalways @(*) begin\n    case (state)\n        3'b001, 3'b100: z = 1'b1;\n        default: z = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "2013_q2bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input x,\n    input y,\n    output f,\n    output g\n);\n    // State encoding\n    localparam A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\n    // Current and next state registers\n    reg [1:0] state, next_state;\n    // Output registers\n    reg [1:0] f_reg, g_reg;\n\n    // State transition logic\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn) begin\n            state <= A;\n            f_reg <= 2'b00;\n            g_reg <= 2'b00;\n        end else begin\n            state <= next_state;\n            f_reg <= next_f;\n            g_reg <= next_g;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        next_state = state;\n        next_f = f_reg;\n        next_g = g_reg;\n\n        case (state)\n            A: begin\n                if (!resetn) next_state = A;\n                else begin\n                    next_f = 2'b01;\n                    next_state = B;\n                end\n            end\n            B: begin\n                if (x == 1) next_state = C;\n                else next_state = B;\n            end\n            C: begin\n                if (x == 0) next_state = D;\n                else next_state = B;\n            end\n            D: begin\n                if (x == 1) begin\n                    next_g = 2'b01;\n                    next_state = A;\n                end else begin\n                    next_g = 2'b00;\n                    next_state = A;\n                end\n            end\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    assign f = f_reg[1];\n    assign g = g_reg[1];\n\nendmodule"}
{"task_id": "dff8p", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q\n);\n    \n    always @(negedge clk) begin\n        if (reset)\n            q <= 8'h34;  // Reset to 0x34\n        else\n            q <= d;  // Load input data\n    end\n\nendmodule"}
{"task_id": "reduction", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nParity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output parity\n);\n    \n    assign parity = ^in; // XOR all 8 bits to get the parity bit\n\nendmodule"}
{"task_id": "fsm3comb", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [1:0] state,\n    output reg [1:0] next_state,\n    output out\n);\n    always @(*) begin\n        case(state)\n            2'b00: begin next_state = (in == 1'b0) ? 2'b00 : 2'b01; out = 1'b0; end\n            2'b01: begin next_state = (in == 1'b0) ? 2'b10 : 2'b01; out = 1'b0; end\n            2'b10: begin next_state = (in == 1'b0) ? 2'b00 : 2'b11; out = 1'b0; end\n            2'b11: begin next_state = (in == 1'b0) ? 2'b10 : 2'b01; out = 1'b1; end\n            default: begin next_state = 2'b00; out = 1'b0; end\n        endcase\n    end\nendmodule"}
{"task_id": "mt2015_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z\n);\n\nreg z_reg;\n\nalways @(x or y) begin\n    if (x && y)\n        z_reg <= 1'b1;\n    else if (x)\n        z_reg <= 1'b0;\n    else if (y)\n        z_reg <= 1'b0;\n    else\n        z_reg <= 1'b1;\nend\n\nassign z = z_reg;\n\nendmodule"}
{"task_id": "2012_q2fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n\n    // State encoding\n    localparam [2:0] A = 3'b000;\n    localparam [2:0] B = 3'b001;\n    localparam [2:0] C = 3'b010;\n    localparam [2:0] D = 3'b011;\n    localparam [2:0] E = 3'b100;\n    localparam [2:0] F = 3'b101;\n\n    reg [2:0] current_state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            A: next_state = w ? B : A;\n            B: next_state = w ? C : D;\n            C: next_state = w ? E : D;\n            D: next_state = w ? F : A;\n            E: next_state = w ? E : D;\n            F: next_state = w ? C : D;\n            default: next_state = A;\n        endcase\n    end\n\n    // State register\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            current_state <= A;\n        else\n            current_state <= next_state;\n    end\n\n    // Output logic\n    assign z = (current_state == E);\n\nendmodule"}
{"task_id": "dff16e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input resetn,\n    input [1:0] byteena,\n    input [15:0] d,\n    output reg [15:0] q);\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            q <= 16'b0;\n        else begin\n            if (byteena[1])\n                q[15:8] <= d[15:8];\n            if (byteena[0])\n                q[7:0] <= d[7:0];\n        end\n    end\n\nendmodule"}
{"task_id": "edgedetect", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] pedge);\n\n    always @(posedge clk) begin\n        // Detect positive edge for each bit\n        pege <= (in & ~in[7:0] >> 1);\n    end\n\nendmodule"}
{"task_id": "circuit8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "module top_module (\n    input clock,\n    input a, \n    output reg p,\n    output reg q\n);\n\nalways @(posedge clock) begin\n    if (a) begin\n        p <= ~p;\n    end\n    q <= p;\nend\n\nendmodule"}
{"task_id": "rule90", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q);\n    \n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else\n            q <= {q[510:0], 1'b0} ^ {1'b0, q[511:1]};\n    end\nendmodule"}
{"task_id": "mt2015_eq2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "module top_module(\n    input [1:0] A,\n    input [1:0] B,\n    output z\n);\n    assign z = (A == B);\nendmodule"}
{"task_id": "gatesv100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output [98:0] out_both,\n    output [99:1] out_any,\n    output [99:0] out_different\n);\n    genvar i;\n    generate\n        for (i = 0; i < 99; i = i + 1) begin : gen_out_both\n            assign out_both[i] = in[i] & in[i+1];\n        end\n        for (i = 1; i <= 99; i = i + 1) begin : gen_out_any\n            assign out_any[i] = in[i] | in[i-1];\n        end\n        for (i = 0; i < 100; i = i + 1) begin : gen_out_different\n            assign out_different[i] = in[i] ^ in[(i+1)%100];\n        end\n    endgenerate\nendmodule"}
{"task_id": "m2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D latch using an always block.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input d,\n    input ena,\n    output logic q\n);\nalways @(posedge ena) begin\n    if (ena)\n        q <= d;\nend\nendmodule"}
{"task_id": "mux256to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "module top_module (\n    input [1023:0] in,\n    input [7:0] sel,\n    output [3:0] out\n);\n    wire [3:0] temp;\n\n    assign temp = in[(sel+1)*4-1 : sel*4]; // Select 4 bits based on sel\n    assign out = temp;\n\nendmodule"}
{"task_id": "mux9to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "module top_module (\n    input [15:0] a,\n    input [15:0] b,\n    input [15:0] c,\n    input [15:0] d,\n    input [15:0] e,\n    input [15:0] f,\n    input [15:0] g,\n    input [15:0] h,\n    input [15:0] i,\n    input [3:0] sel,\n    output logic [15:0] out\n);\n    \n    always @(*) begin\n        case (sel)\n            4'd0: out = a;\n            4'd1: out = b;\n            4'd2: out = c;\n            4'd3: out = d;\n            4'd4: out = e;\n            4'd5: out = f;\n            4'd6: out = g;\n            4'd7: out = h;\n            4'd8: out = i;\n            default: out = 16'b1;\n        endcase\n    end\n\nendmodule"}
{"task_id": "vectorgates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "module top_module(\n    input [2:0] a, \n    input [2:0] b, \n    output [2:0] out_or_bitwise,\n    output out_or_logical,\n    output [5:0] out_not\n);\n    assign out_or_bitwise = a | b;  // Bitwise OR of a and b\n    assign out_or_logical = a | b;  // Logical OR of a and b (same as bitwise OR for 3-bit inputs)\n    assign out_not = {~b, ~a};      // Invert b and place in upper half, invert a and place in lower half\nendmodule"}
{"task_id": "fsm3onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [3:0] state,\n    output reg [3:0] next_state,\n    output out\n);\n    always @(*) begin\n        case(state)\n            4'b0001: next_state = in ? 4'b1000 : 4'b0001; // State A\n            4'b0010: next_state = in ? 4'b0010 : 4'b0100; // State B\n            4'b0100: next_state = in ? 4'b1000 : 4'b0001; // State C\n            4'b1000: next_state = in ? 4'b0010 : 4'b0100; // State D\n            default: next_state = 4'b0001; // Default to State A\n        endcase\n    end\n\n    assign out = (state == 4'b1000); // Output 1 only in State D\nendmodule"}
{"task_id": "conditional", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [7:0] b,\n    input [7:0] c,\n    input [7:0] d,\n    output reg [7:0] min\n);\n    always @* begin\n        if (a < b)\n            min = a;\n        else\n            min = b;\n        if (min > c)\n            min = c;\n        if (min > d)\n            min = d;\n    end\nendmodule"}
{"task_id": "gates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output out_and,\n    output out_or,\n    output out_xor,\n    output out_nand,\n    output out_nor,\n    output out_xnor,\n    output out_anotb\n);\n    assign out_and = a & b;\n    assign out_or = a | b;\n    assign out_xor = a ^ b;\n    assign out_nand = ~(a & b);\n    assign out_nor = ~(a | b);\n    assign out_xnor = ~(a ^ b);\n    assign out_anotb = a & ~b;\nendmodule"}
{"task_id": "kmap2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output out\n);\n    \n    assign out = (c & ~d) | (~c & ~d & ~b) | (~c & d & ~a);\n    \nendmodule"}
{"task_id": "2014_q3fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input s,\n    input w,\n    output reg z\n);\n    localparam [1:0] A = 2'b00, B1 = 2'b01, B2 = 2'b10, B3 = 2'b11;\n    reg [1:0] state, next_state;\n    reg [1:0] w_count;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            A: next_state = s ? B1 : A;\n            B1: next_state = B2;\n            B2: next_state = w ? B3 : B1;\n            B3: next_state = B1;\n            default: next_state = A;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            w_count <= 2'b00;\n        else if (state == B1)\n            w_count <= {w_count[0], w};\n        else if (state == A)\n            w_count <= 2'b00;\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            z <= 1'b0;\n        else if (state == B3 && w_count == 2'b10)\n            z <= 1'b1;\n        else\n            z <= 1'b0;\n    end\nendmodule"}
{"task_id": "vector4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nOne common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [31:0] out\n);\n    assign out = {{24{in[7]}}, in};\nendmodule"}
{"task_id": "m2014_q4k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a shift register with four D flops. Reset is active-low synchronous resettable.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input in,\n    output out\n);\n    reg [3:0] shift_reg;\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            shift_reg <= 4'b0000;\n        else\n            shift_reg <= {shift_reg[2:0], in};\n    end\n\n    assign out = shift_reg[3];\n\nendmodule"}
{"task_id": "always_case2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output reg [1:0] pos\n);\n    always @* begin\n        if (in[3]) pos = 2'b11;\n        else if (in[2]) pos = 2'b10;\n        else if (in[1]) pos = 2'b01;\n        else if (in[0]) pos = 2'b00;\n        else pos = 2'b00;\n    end\nendmodule"}
{"task_id": "fsm2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input areset,\n    output out\n);\n    reg [1:0] state, next_state;\n\n    // State encoding: OFF = 2'b00, ON = 2'b01\n    parameter OFF = 2'b00, ON = 2'b01;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= OFF;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            OFF: next_state = (j) ? ON : OFF;\n            ON: next_state = (k) ? OFF : ON;\n            default: next_state = OFF;\n        endcase\n    end\n\n    assign out = (state == ON) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "m2014_q4i", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 0 (or logic low).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput out);\n", "completion": "module top_module(\n    output out);\n    assign out = 1'b0;\nendmodule"}
{"task_id": "step_one", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 1 (or logic high).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput one);\n", "completion": "module top_module(\n    output one);\n    \n    assign one = 1'b1;\n    \nendmodule"}
{"task_id": "vector100r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven a 100-bit input vector [99:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output reg [99:0] out\n);\n    always @(*) begin\n        out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7], in[8], in[9],\n                in[10], in[11], in[12], in[13], in[14], in[15], in[16], in[17], in[18], in[19],\n                in[20], in[21], in[22], in[23], in[24], in[25], in[26], in[27], in[28], in[29],\n                in[30], in[31], in[32], in[33], in[34], in[35], in[36], in[37], in[38], in[39],\n                in[40], in[41], in[42], in[43], in[44], in[45], in[46], in[47], in[48], in[49],\n                in[50], in[51], in[52], in[53], in[54], in[55], in[56], in[57], in[58], in[59],\n                in[60], in[61], in[62], in[63], in[64], in[65], in[66], in[67], in[68], in[69],\n                in[70], in[71], in[72], in[73], in[74], in[75], in[76], in[77], in[78], in[79],\n                in[80], in[81], in[82], in[83], in[84], in[85], in[86], in[87], in[88], in[89],\n                in[90], in[91], in[92], in[93], in[94], in[95], in[96], in[97], in[98], in[99]};\n    end\nendmodule"}
{"task_id": "m2014_q4d", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    output logic out\n);\n    logic xor_out;\n\n    // XOR gate\n    assign xor_out = in ^ out;\n\n    // D flip-flop\n    always_ff @(posedge clk) begin\n        out <= xor_out;\n    end\n\nendmodule"}
{"task_id": "shift4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input load,\n    input ena,\n    input [3:0] data,\n    output reg [3:0] q);\n\nalways @(posedge clk or posedge areset) begin\n    if (areset) begin\n        q <= 4'b0000; // Reset to zero\n    end else if (load) begin\n        q <= data; // Load new data\n    end else if (ena) begin\n        q <= {q[2:0], 1'b0}; // Shift right\n    end\nend\n\nendmodule"}
{"task_id": "truthtable1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "module top_module (\n    input x3,\n    input x2,\n    input x1,\n    output f\n);\n    assign f = (x2 & ~x1) | (x3 & x1);\nendmodule"}
{"task_id": "dff8ar", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input areset,\n    output reg [7:0] q\n);\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            q <= 8'b0;\n        else\n            q <= d;\n    end\nendmodule"}
{"task_id": "gates100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and = &in;  // 100-input AND gate\n    assign out_or = |in;   // 100-input OR gate\n    assign out_xor = ^in;  // 100-input XOR gate\nendmodule"}
{"task_id": "hadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output sum,\n    output cout\n);\n    assign sum = a ^ b; // Sum is the XOR of a and b\n    assign cout = a & b; // Carry-out is the AND of a and b\nendmodule"}
{"task_id": "always_if2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "module top_module (\n    input cpu_overheated,\n    output reg shut_off_computer,\n    input arrived,\n    input gas_tank_empty,\n    output reg keep_driving\n);\n    always @(*) begin\n        shut_off_computer = cpu_overheated;\n        keep_driving = ~arrived & ~gas_tank_empty;\n    end\nendmodule"}
{"task_id": "fsm2s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input reset,\n    output out\n);\n\nreg [1:0] state, next_state;\nwire out;\n\nparameter OFF = 2'b00;\nparameter ON  = 2'b01;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= OFF;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        OFF: next_state = j ? ON : OFF;\n        ON:  next_state = k ? OFF : ON;\n        default: next_state = OFF;\n    endcase\nend\n\nassign out = (state == ON);\n\nendmodule"}
{"task_id": "vector3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "module top_module (\n    input [4:0] a,\n    input [4:0] b,\n    input [4:0] c,\n    input [4:0] d,\n    input [4:0] e,\n    input [4:0] f,\n    output [7:0] w,\n    output [7:0] x,\n    output [7:0] y,\n    output [7:0] z\n);\n\n    // Concatenate inputs and add two 1 bits at the end\n    assign {w, x, y, z} = {a, b, c, d, e, f, 2'b11};\n\nendmodule"}
{"task_id": "circuit2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n    assign q = (~a & ~b & c & d) | (a & b & ~c & ~d) | (a & ~b & c & ~d) | (~a & b & ~c & d);\nendmodule"}
{"task_id": "andgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an AND gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = a & b;\nendmodule"}
{"task_id": "fsm1s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n    localparam [1:0] B = 2'b10, A = 2'b01;\n    reg [1:0] current_state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            current_state <= B;\n        else\n            current_state <= next_state;\n    end\n\n    always @(*) begin\n        case (current_state)\n            B: next_state = in ? B : A;\n            A: next_state = in ? A : B;\n            default: next_state = B;\n        endcase\n    end\n\n    assign out = (current_state == B);\n\nendmodule"}
{"task_id": "fadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input cin,\n    output cout,\n    output sum\n);\n    wire temp_sum;\n\n    // Sum calculation (XOR of all inputs)\n    assign sum = a ^ b ^ cin;\n\n    // Carry-out calculation (AND/OR logic)\n    assign cout = (a & b) | (b & cin) | (a & cin);\n    \nendmodule"}
{"task_id": "m2014_q4g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    input in3,\n    output logic out\n);\n    logic xnor_out;\n    \n    // XNOR gate\n    assign xnor_out = ~(in1 ^ in2);\n    \n    // XOR gate\n    assign out = xnor_out ^ in3;\nendmodule"}
{"task_id": "ece241_2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "module top_module (\n    input c,\n    input d,\n    output [3:0] mux_in\n);\n\nwire in0, in1, in2, in3;\n\n// Implementing the K-map using 2-to-1 multiplexers\nassign in0 = c & d; // ab=00\nassign in1 = c & ~d; // ab=01\nassign in2 = ~c & d; // ab=11\nassign in3 = ~c & ~d; // ab=10\n\n// Assigning outputs based on the K-map values\nassign mux_in[0] = in0; // ab=00\nassign mux_in[1] = in1; // ab=01\nassign mux_in[2] = in2; // ab=11\nassign mux_in[3] = in3; // ab=10\n\nendmodule"}
{"task_id": "ece241_2014_q5b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n    \n    // State encoding\n    localparam A = 2'b00;\n    localparam B = 2'b01;\n    \n    reg [1:0] next_state, state;\n    \n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n    \n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = x ? B : A;\n            B: next_state = B;\n            default: next_state = A;\n        endcase\n    end\n    \n    // Output logic\n    assign z = (state == B) ? 1'b0 : x;\n    \nendmodule"}
{"task_id": "circuit10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "module top_module (\n    input clk,\n    input a,\n    input b,\n    output q,\n    output state\n);\n\n    reg q_reg;\n\n    always @(posedge clk) begin\n        if (a & b)\n            q_reg <= 1'b1;\n        else\n            q_reg <= 1'b0;\n    end\n\n    assign q = q_reg;\n    assign state = (a & b) | q;\n\nendmodule"}
{"task_id": "2012_q1g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n    \n    // Implementing the function f using a case statement based on the Karnaugh map\n    always_comb begin\n        case(x)\n            4'b0000, 4'b0010, 4'b0100, 4'b0110, 4'b1000, 4'b1010, 4'b1101, 4'b1111: f = 1'b1;\n            default: f = 1'b0;\n        endcase\n    end\n\nendmodule"}
{"task_id": "fsm_hdlc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSynchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input in,\n    output disc,\n    output flag,\n    output err\n);\n\nreg [5:0] state, next_state;\nreg disc_reg, flag_reg, err_reg;\n\n// State encoding: 000000 = idle, 000001 to 001111 = counting 1s, 010000 = 6 1s, 010001 = 7 1s\nparameter IDLE = 6'b000000;\nparameter COUNT1 = 6'b000001;\nparameter COUNT2 = 6'b000010;\nparameter COUNT3 = 6'b000011;\nparameter COUNT4 = 6'b000100;\nparameter COUNT5 = 6'b000101;\nparameter COUNT6 = 6'b010000;\nparameter COUNT7 = 6'b010001;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= IDLE;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        IDLE: next_state = in ? COUNT1 : IDLE;\n        COUNT1: next_state = in ? COUNT2 : IDLE;\n        COUNT2: next_state = in ? COUNT3 : IDLE;\n        COUNT3: next_state = in ? COUNT4 : IDLE;\n        COUNT4: next_state = in ? COUNT5 : IDLE;\n        COUNT5: next_state = in ? COUNT6 : IDLE;\n        COUNT6: next_state = in ? COUNT7 : COUNT1;\n        COUNT7: next_state = IDLE;\n        default: next_state = IDLE;\n    endcase\nend\n\nalways @(posedge clk) begin\n    disc_reg <= (state == COUNT6) && !in;\n    flag_reg <= (state == COUNT6) && in;\n    err_reg <= (state == COUNT7);\nend\n\nassign disc = disc_reg;\nassign flag = flag_reg;\nassign err = err_reg;\n\nendmodule"}
{"task_id": "review2015_fancytimer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "module top_module(\n    input wire clk,\n    input wire reset,\n    input wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n\n    reg [3:0] state, next_state;\n    reg [3:0] delay, counter;\n    reg [3:0] shift_reg;\n    wire start_seq;\n\n    assign start_seq = (shift_reg == 4'b1101);\n    assign count = delay - counter / 1000;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= 4'b0000;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            4'b0000: begin\n                if (start_seq) next_state = 4'b0001;\n                else next_state = 4'b0000;\n            end\n            4'b0001: begin\n                if (counter == 0) next_state = 4'b0010;\n                else next_state = 4'b0001;\n            end\n            4'b0010: begin\n                if (counter == 0) next_state = 4'b0100;\n                else next_state = 4'b0010;\n            end\n            4'b0100: begin\n                if (ack) next_state = 4'b0000;\n                else next_state = 4'b0100;\n            end\n            default: next_state = 4'b0000;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            shift_reg <= 4'b0000;\n            delay <= 4'b0000;\n            counter <= 4'b0000;\n            done <= 1'b0;\n            counting <= 1'b0;\n        end else begin\n            case (state)\n                4'b0000: begin\n                    shift_reg <= {shift_reg[2:0], data};\n                    counting <= 1'b0;\n                    done <= 1'b0;\n                end\n                4'b0001: begin\n                    shift_reg <= {shift_reg[2:0], data};\n                    delay <= {delay[2:0], data};\n                    counting <= 1'b0;\n                    done <= 1'b0;\n                end\n                4'b0010: begin\n                    if (counter == 0) begin\n                        counter <= delay + 1;\n                        counting <= 1'b1;\n                        done <= 1'b0;\n                    end else begin\n                        counter <= counter - 1;\n                        counting <= 1'b1;\n                        done <= 1'b0;\n                    end\n                end\n                4'b0100: begin\n                    done <= 1'b1;\n                    counting <= 1'b0;\n                end\n                default: begin\n                    shift_reg <= 4'b0000;\n                    delay <= 4'b0000;\n                    counter <= 4'b0000;\n                    done <= 1'b0;\n                    counting <= 1'b0;\n                end\n            endcase\n        end\n    end\nendmodule"}
{"task_id": "ece241_2013_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input [3:1] s,\n    output reg fr3,\n    output reg fr2,\n    output reg fr1,\n    output reg dfr\n);\n\nreg [2:0] current_level, next_level;\nreg [2:0] current_flow, next_flow;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        current_level <= 3'b000;\n        current_flow <= 3'b111;\n    end else begin\n        current_level <= next_level;\n        current_flow <= next_flow;\n    end\nend\n\nalways @(*) begin\n    case (s)\n        3'b111: next_level = 3'b000;\n        3'b110: next_level = 3'b001;\n        3'b100: next_level = 3'b010;\n        3'b000: next_level = 3'b101;\n        default: next_level = current_level;\n    endcase\n\n    if (current_level < next_level) begin\n        next_flow = current_flow + 1'b1;\n    end else begin\n        next_flow = 3'b000;\n        case (next_level)\n            3'b000: next_flow = 3'b111;\n            3'b001: next_flow = 3'b110;\n            3'b010: next_flow = 3'b100;\n            3'b101: next_flow = 3'b000;\n        endcase\n    end\n    dfr = (current_flow < next_flow);\n    fr3 = current_flow[2];\n    fr2 = current_flow[1];\n    fr1 = current_flow[0];\nend\n\nendmodule"}
{"task_id": "fsm_serial", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output done\n);\n\n    // State encoding\n    localparam [2:0] IDLE = 3'b000,\n                     START = 3'b001,\n                     DATA = 3'b010,\n                     STOP = 3'b011,\n                     ERROR = 3'b100;\n\n    reg [2:0] state, next_state;\n    reg [7:0] data;\n    reg done_reg;\n\n    // Next state logic\n    always @(*) begin\n        next_state = state;\n        case (state)\n            IDLE:    next_state = in ? IDLE : START;\n            START:   next_state = in ? ERROR : DATA;\n            DATA:    next_state = (in ? (data[7:1] == 8'hff) ? ERROR : DATA : IDLE);\n            STOP:    next_state = in ? ERROR : IDLE;\n            ERROR:   next_state = in ? ERROR : STOP;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // State register\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    // Data register\n    always @(posedge clk) begin\n        if (state == DATA)\n            data <= {data[6:0], in};\n    end\n\n    // Done signal\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            done_reg <= 1'b0;\n        else if (state == IDLE)\n            done_reg <= 1'b1;\n        else\n            done_reg <= 1'b0;\n    end\n\n    assign done = done_reg;\n\nendmodule"}
{"task_id": "fsm_serialdata", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output [7:0] out_byte,\n    output done\n);\n\nreg [2:0] state;\nreg [7:0] data;\nreg [2:0] count;\nreg [1:0] valid;\n\nlocalparam IDLE = 3'b000;\nlocalparam START = 3'b001;\nlocalparam DATA = 3'b010;\nlocalparam STOP = 3'b011;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= IDLE;\n        data <= 8'b0;\n        count <= 3'b000;\n        valid <= 2'b00;\n        out_byte <= 8'b0;\n        done <= 1'b0;\n    end else begin\n        case (state)\n            IDLE: begin\n                if (in == 1'b0) begin\n                    state <= START;\n                    count <= 3'b000;\n                end\n            end\n            START: begin\n                state <= DATA;\n                count <= 3'b001;\n            end\n            DATA: begin\n                if (count == 3'b100) begin\n                    state <= STOP;\n                    count <= 3'b000;\n                    valid <= 2'b10;\n                end else begin\n                    data <= {data[6:0], in};\n                    count <= count + 1'b1;\n                end\n            end\n            STOP: begin\n                if (in == 1'b1) begin\n                    state <= IDLE;\n                    out_byte <= data;\n                    valid <= 2'b11;\n                    done <= 1'b1;\n                end else begin\n                    state <= STOP;\n                    valid <= 2'b00;\n                    done <= 1'b0;\n                end\n            end\n            default: state <= IDLE;\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "gshare", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input predict_valid,\n    input [6:0] predict_pc,\n    output predict_taken,\n    output [6:7:0] predict_history,\n    input train_valid,\n    input train_taken,\n    input train_mispredicted,\n    input [6:0] train_history,\n    input [6:0] train_pc\n);\n    localparam [1:0] STRENGTH_0 = 2'b00; // Strongly Not Taken\n    localparam [1:0] STRENGTH_1 = 2'b01; // Weakly Not Taken\n    localparam [1:0] STRENGTH_2 = 2'b10; // Weakly Taken\n    localparam [1:0] STRENGTH_3 = 2'b11; // Strongly Taken\n    localparam [1:0] PHT_INIT = 2'b00;\n    \n    // Branch History Register\n    reg [6:0] bhr;\n    // Pattern History Table\n    reg [127:0][1:0] pht;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            bhr <= 7'b0;\n            pht <= 128{PHT_INIT};\n        end else begin\n            if (train_valid) begin\n                pht[train_pc ^ train_history] <= train_taken ? STRENGTH_3 : STRENGTH_0;\n            end\n            if (predict_valid && !train_valid) begin\n                bhr <= bhr ^ {1'b0, predict_taken};\n            end\n        end\n    end\n\n    // Prediction logic\n    assign predict_taken = pht[predict_pc ^ bhr] > STRENGTH_1;\n    assign predict_history = bhr;\n\n    // Training logic\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            bhr <= 7'b0;\n        end else if (train_mispredicted) begin\n            bhr <= train_history;\n        end\n    end\nendmodule"}
{"task_id": "lemmings4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n    // State encoding\n    localparam [2:0] WALK_LEFT = 3'd0,\n                     WALK_RIGHT = 3'd1,\n                     FALL = 3'd2,\n                     DIG = 3'd3,\n                     SPLATTER = 3'd4;\n\n    reg [2:0] state, next_state;\n    reg [4:0] fall_count;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        next_state = state;\n        fall_count = fall_count + 1'b1;\n\n        case (state)\n            WALK_LEFT: begin\n                if (bump_left) next_state = WALK_RIGHT;\n                else if (bump_right) next_state = WALK_LEFT;\n                else if (ground == 1'b0) begin\n                    next_state = FALL;\n                    fall_count = 5'd0;\n                end\n                else if (dig == 1'b1) next_state = DIG;\n            end\n            WALK_RIGHT: begin\n                if (bump_right) next_state = WALK_LEFT;\n                else if (bump_left) next_state = WALK_RIGHT;\n                else if (ground == 1'b0) begin\n                    next_state = FALL;\n                    fall_count = 5'd0;\n                end\n                else if (dig == 1'b1) next_state = DIG;\n            end\n            FALL: begin\n                if (ground == 1'b1) begin\n                    next_state = (state == WALK_LEFT) ? WALK_LEFT : WALK_RIGHT;\n                    fall_count = 5'd0;\n                end\n                else if (fall_count > 5'd20) next_state = SPLATTER;\n            end\n            DIG: begin\n                if (ground == 1'b0) begin\n                    next_state = FALL;\n                    fall_count = 5'd0;\n                end\n            end\n            SPLATTER: begin\n                next_state = SPLATTER;\n            end\n            default: next_state = WALK_LEFT;\n        endcase\n    end\n\n    assign walk_left = (state == WALK_LEFT) || (state == FALL) || (state == DIG);\n    assign walk_right = (state == WALK_RIGHT) || (state == FALL) || (state == DIG);\n    assign aaah = (state == FALL) && (ground == 1'b1);\n    assign digging = (state == DIG) && (ground == 1'b1);\n\nendmodule"}
{"task_id": "review2015_fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack\n);\n\n    localparam START = 3'b000;\n    localparam SHIFT = 3'b001;\n    localparam COUNT = 3'b010;\n    localparam DONE  = 3'b011;\n\n    reg [2:0] state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= START;\n            counting <= 1'b0;\n            done <= 1'b0;\n            shift_ena <= 1'b0;\n        end else begin\n            state <= next_state;\n            case (state)\n                START: begin\n                    counting <= 1'b0;\n                    done <= 1'b0;\n                    shift_ena <= 1'b0;\n                end\n                SHIFT: begin\n                    shift_ena <= 1'b1;\n                end\n                COUNT: begin\n                    counting <= 1'b1;\n                    shift_ena <= 1'b0;\n                end\n                DONE: begin\n                    done <= 1'b1;\n                    shift_ena <= 1'b0;\n                    counting <= 1'b0;\n                end\n            endcase\n        end\n    end\n\n    always @(*) begin\n        case (state)\n            START: begin\n                if (data == 1'b1) next_state = SHIFT;\n                else next_state = START;\n            end\n            SHIFT: begin\n                if (data == 1'b1) next_state = COUNT;\n                else next_state = START;\n            end\n            COUNT: begin\n                if (done_counting) next_state = DONE;\n                else next_state = COUNT;\n            end\n            DONE: begin\n                if (ack) next_state = START;\n                else next_state = DONE;\n            end\n        endcase\n    end\n\nendmodule"}
{"task_id": "conwaylife", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [255:0] data,\n    output reg [255:0] q);\n\n    // Function to count neighbors for a given cell\n    function [3:0] count_neighbors;\n        input [255:0] state;\n        input [7:0] x, y;\n        begin\n            count_neighbors = 0;\n            count_neighbors = count_neighbors + state[(y+15)%16 + (x+1)%16 * 16];\n            count_neighbors = count_neighbors + state[(y+15)%16 + (x+0)%16 * 16];\n            count_neighbors = count_neighbors + state[(y+15)%16 + (x+15)%16 * 16];\n            count_neighbors = count_neighbors + state[(y+0)%16 + (x+1)%16 * 16];\n            count_neighbors = count_neighbors + state[(y+0)%16 + (x+15)%16 * 16];\n            count_neighbors = count_neighbors + state[(y+1)%16 + (x+1)%16 * 16];\n            count_neighbors = count_neighbors + state[(y+1)%16 + (x+0)%16 * 16];\n            count_neighbors = count_neighbors + state[(y+1)%16 + (x+15)%16 * 16];\n        end\n    endfunction\n\n    // Next state calculation\n    always @(posedge clk) begin\n        if (load) q <= data;\n        else begin\n            q <= 256'b0;\n            for (int i = 0; i < 16; i = i + 1) begin\n                for (int j = 0; j < 16; j = j + 1) begin\n                    int count = count_neighbors(q, i, j);\n                    case (count)\n                        2: q[i + j * 16] <= q[i + j * 16];\n                        3: q[i + j * 16] <= 1'b1;\n                        default: q[i + j * 16] <= 1'b0;\n                    endcase\n                end\n            end\n        end\n    end\n\nendmodule"}
{"task_id": "lemmings3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n    // State encoding\n    localparam [3:0] WALK_LEFT = 4'd0,\n                     WALK_RIGHT = 4'd1,\n                     FALL = 4'd2,\n                     DIG = 4'd3;\n\n    reg [3:0] state, next_state;\n\n    // State transitions\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            WALK_LEFT: begin\n                if (bump_left) next_state = WALK_RIGHT;\n                else if (dig) next_state = DIG;\n                else if (!ground) next_state = FALL;\n                else next_state = WALK_LEFT;\n            end\n            WALK_RIGHT: begin\n                if (bump_right) next_state = WALK_LEFT;\n                else if (dig) next_state = DIG;\n                else if (!ground) next_state = FALL;\n                else next_state = WALK_RIGHT;\n            end\n            FALL: begin\n                if (ground) next_state = WALK_LEFT;\n                else next_state = FALL;\n            end\n            DIG: begin\n                if (!ground) next_state = FALL;\n                else next_state = DIG;\n            end\n            default: next_state = WALK_LEFT;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n\n        case (state)\n            WALK_LEFT: walk_left = 1'b1;\n            WALK_RIGHT: walk_right = 1'b1;\n            FALL: aaah = 1'b1;\n            DIG: digging = 1'b1;\n        endcase\n    end\nendmodule"}
{"task_id": "count_clock", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input ena,\n    output reg pm,\n    output reg [7:0] hh,\n    output reg [7:0] mm,\n    output reg [7:0] ss);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            pm <= 1'b0;\n            hh <= 8'd12;\n            mm <= 8'd00;\n            ss <= 8'd00;\n        end else if (ena) begin\n            if (ss == 8'd59) begin\n                ss <= 8'd00;\n                if (mm == 8'd59) begin\n                    mm <= 8'd00;\n                    if (hh == 8'd12) begin\n                        hh <= 8'd1;\n                        pm <= ~pm;\n                    end else begin\n                        hh <= hh + 1;\n                    end\n                end else begin\n                    mm <= mm + 1;\n                end\n            end else begin\n                ss <= ss + 1;\n            end\n        end\n    end\n\nendmodule"}
{"task_id": "lemmings2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    output walk_left,\n    output walk_right,\n    output aaah\n);\n\n    // State encoding\n    localparam [1:0] WALK_LEFT  = 2'b00;\n    localparam [1:0] WALK_RIGHT = 2'b01;\n    localparam [1:0] FALLING    = 2'b10;\n\n    reg [1:0] current_state, next_state;\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= WALK_LEFT;\n        else\n            current_state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        // Default next state\n        next_state = current_state;\n        aaah = 1'b0;\n\n        case (current_state)\n            WALK_LEFT: begin\n                if (bump_left) next_state = WALK_RIGHT;\n                else if (!ground) begin\n                    next_state = FALLING;\n                    aaah = 1'b1;\n                end\n            end\n            WALK_RIGHT: begin\n                if (bump_right) next_state = WALK_LEFT;\n                else if (!ground) begin\n                    next_state = FALLING;\n                    aaah = 1'b1;\n                end\n            end\n            FALLING: begin\n                if (ground) next_state = WALK_LEFT;\n            end\n        endcase\n    end\n\n    // Outputs\n    assign walk_left = (current_state == WALK_LEFT);\n    assign walk_right = (current_state == WALK_RIGHT);\n\nendmodule"}
{"task_id": "countbcd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output [3:1] ena,\n    output reg [15:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 16'h0000;\n        else begin\n            if (q[3:0] == 4'h9) begin\n                q[3:0] <= 4'h0;\n                if (q[7:4] == 4'h9) begin\n                    q[7:4] <= 4'h0;\n                    if (q[11:8] == 4'h9) begin\n                        q[11:8] <= 4'h0;\n                        if (q[15:12] == 4'h9)\n                            q[15:12] <= 4'h0;\n                        else\n                            q[15:12] <= q[15:12] + 4'h1;\n                    end\n                    else\n                        q[11:8] <= q[11:8] + 4'h1;\n                end\n                else\n                    q[7:4] <= q[7:4] + 4'h1;\n            end\n            else\n                q[3:0] <= q[3:0] + 4'h1;\n        end\n    end\n\n    assign ena = {((q[11:8] == 4'h9) && (q[15:12] == 4'h9)),\n                  ((q[7:4] == 4'h9) && (q[11:8] == 4'h9)),\n                  (q[3:0] == 4'h9)};\n\nendmodule"}
{"task_id": "mux2to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] a,\n    input [99:0] b,\n    input sel,\n    output [99:0] out\n);\n    assign out = sel ? b : a;\nendmodule"}
{"task_id": "m2014_q6b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "module top_module(\n    input [3:1] y,\n    input w,\n    output reg Y2);\n\n    always @(*) begin\n        case(y)\n            3'b000: Y2 = 1'b0; // A\n            3'b001: Y2 = 1'b0; // B\n            3'b010: Y2 = 1'b0; // C\n            3'b011: Y2 = 1'b0; // D\n            3'b100: Y2 = 1'b1; // E\n            3'b101: Y2 = 1'b0; // F\n            default: Y2 = 1'bx;\n        endcase\n    end\n\nendmodule"}
{"task_id": "ringer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "module top_module(\n    input ring, \n    input vibrate_mode,\n    output ringer,\n    output motor\n);\n    assign ringer = ~vibrate_mode & ring;\n    assign motor = vibrate_mode & ring;\nendmodule"}
{"task_id": "alwaysblock1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an AND gate using both an assign statement and a combinational always block. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out_assign,\n    output reg out_alwaysblock\n);\n\n    // Assign statement for AND gate\n    assign out_assign = a & b;\n\n    // Combinational always block for AND gate\n    always @(*) begin\n        out_alwaysblock = a & b;\n    end\n\nendmodule"}
{"task_id": "zero", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that always outputs a LOW.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput zero);\n", "completion": "module top_module(\n    output zero);\n    assign zero = 1'b0;\nendmodule"}
{"task_id": "circuit7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg q\n);\n\nalways @(posedge clk) begin\n    if (a)\n        q <= #1 ~q;\n    else\n        q <= #1 1'b1;\nend\n\nendmodule"}
{"task_id": "ece241_2014_q5a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n    \n    // States\n    localparam IDLE = 2'b00, PREPARE = 2'b01, COMPLEMENT = 2'b10, OUTPUT = 2'b11;\n\n    reg [1:0] state, next_state;\n    reg [31:0] temp;\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        next_state = state;\n        case (state)\n            IDLE: next_state = areset ? IDLE : PREPARE;\n            PREPARE: next_state = COMPLEMENT;\n            COMPLEMENT: next_state = OUTPUT;\n            OUTPUT: next_state = COMPLEMENT;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Output logic\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            temp <= 32'b0;\n        else if (state == OUTPUT)\n            temp <= {1'b1, temp[30:0]};\n        else if (state == COMPLEMENT)\n            temp <= {temp[30:0], ~x};\n    end\n\n    // Output assignment\n    always @(*) begin\n        z = 1'b0;\n        case (state)\n            IDLE: z = 1'b0;\n            PREPARE: z = 1'b0;\n            COMPLEMENT: z = 1'b0;\n            OUTPUT: z = temp[31];\n            default: z = 1'b0;\n        endcase\n    end\n\nendmodule"}
{"task_id": "fsm3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n    \n    // State encoding\n    localparam A = 3'b000;\n    localparam B = 3'b001;\n    localparam C = 3'b010;\n    localparam D = 3'b011;\n\n    // State register\n    reg [2:0] state, next_state;\n\n    // Output register\n    reg [1:0] output;\n\n    // State transition logic\n    always @(*) begin\n        case(state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        case(state)\n            A: output = 2'b00;\n            B: output = 2'b00;\n            C: output = 2'b00;\n            D: output = 2'b01;\n            default: output = 2'b00;\n        endcase\n    end\n\n    // Sequential logic\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Assign output\n    assign out = output[0];\n\nendmodule"}
{"task_id": "vector2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that reverses the byte order of a 32-bit vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [31:0] in,\n    output [31:0] out\n);\n    assign out = {in[7:0], in[15:8], in[23:16], in[31:24]};\nendmodule"}
{"task_id": "m2014_q4c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a simple D flip flop with active high synchronous reset (reset output to 0).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input r,\n    output logic q\n);\n    always @(posedge clk or posedge r) begin\n        if (r)\n            q <= 1'b0; // Reset output to 0 when r is high\n        else\n            q <= d; // Set output to d on clock edge\n    end\nendmodule"}
{"task_id": "mt2015_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the boolean function z = (x^y) & x.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n    \n    assign z = (x ^ y) & x;\n\nendmodule"}
{"task_id": "shift18", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input ena,\n    input [1:0] amount,\n    input [63:0] data,\n    output reg [63:0] q);\n\n    always @(posedge clk) begin\n        if (load) begin\n            q <= data;\n        end else if (ena) begin\n            case (amount)\n                2'b00: q <= {q[62:0], 1'b0}; // shift left by 1 bit\n                2'b01: q <= {q[55:0], 8'b0}; // shift left by 8 bits\n                2'b10: q <= {{1{q[63]}}, q[62:1]}; // arithmetic shift right by 1 bit\n                2'b11: q <= {{8{q[63]}}, q[55:8]}; // arithmetic shift right by 8 bits\n                default: q <= q; // no change if amount is unknown\n            endcase\n        end\n    end\n\nendmodule"}
{"task_id": "ece241_2013_q8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input aresetn,\n    input x,\n    output reg z\n);\n    localparam [1:0] S0 = 2'b00, S1 = 2'b01, S2 = 2'b10;\n    reg [1:0] state, next_state;\n\n    always @(posedge clk or negedge aresetn) begin\n        if (!aresetn)\n            state <= S0;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            S0: next_state = x ? S1 : S0;\n            S1: next_state = x ? S0 : S2;\n            S2: next_state = x ? S1 : S0;\n            default: next_state = S0;\n        endcase\n    end\n\n    always @(*) begin\n        z = (state == S2);\n    end\n\nendmodule"}
{"task_id": "m2014_q6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n    // State encoding\n    localparam [2:0] A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n    reg [2:0] state, next_state;\n    wire z_wire;\n\n    // State register\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = w ? A : B;\n            B: next_state = w ? D : C;\n            C: next_state = w ? D : E;\n            D: next_state = w ? A : F;\n            E: next_state = w ? D : E;\n            F: next_state = w ? D : C;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    assign z_wire = (state == E) || (state == F);\n\n    // Output assignment\n    assign z = z_wire;\n\nendmodule"}
{"task_id": "fsm_ps2data", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output [23:0] out_bytes,\n    output done\n);\n    reg [2:0] state, next_state;\n    reg [7:0] msg [2:0];\n    reg [2:0] byte_cnt;\n    reg [2:0] msg_byte_index;\n    reg [23:0] done_out_bytes;\n\n    // State encoding: 0: Idle, 1: Byte1, 2: Byte2, 3: Byte3\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= 3'b000;\n            byte_cnt <= 3'b000;\n            msg_byte_index <= 3'b000;\n            done_out_bytes <= 24'b0;\n            done <= 1'b0;\n        end else begin\n            state <= next_state;\n            if (state == 3'b011 && byte_cnt == 3'b010) begin\n                done <= 1'b1;\n                done_out_bytes <= {msg[2], msg[1], msg[0]};\n                byte_cnt <= 3'b000;\n                msg_byte_index <= 3'b000;\n            end else if (state == 3'b011 && byte_cnt == 3'b011) begin\n                done <= 1'b0;\n                byte_cnt <= 3'b000;\n                msg_byte_index <= 3'b000;\n            end else begin\n                done <= 1'b0;\n            end\n        end\n    end\n\n    always @(*) begin\n        next_state = state;\n        case (state)\n            3'b000: begin\n                if (in[3]) begin\n                    next_state = 3'b001;\n                    msg[0] = in;\n                end\n            end\n            3'b001: begin\n                next_state = 3'b010;\n                msg[1] = in;\n            end\n            3'b010: begin\n                next_state = 3'b011;\n                msg[2] = in;\n            end\n            3'b011: next_state = 3'b000;\n        endcase\n    end\n\n    assign out_bytes = done ? done_out_bytes : 24'b0;\nendmodule"}
{"task_id": "2012_q2b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\n\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "module top_module (\n    input [5:0] y,\n    input w,\n    output Y1,\n    output Y3\n);\n\nassign Y1 = y[2] & ~w | y[4] & w;\nassign Y3 = y[0] & ~w | y[3] & w;\n\nendmodule"}
{"task_id": "vector0", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "module top_module(\n    input [2:0] vec, \n    output [2:0] outv,\n    output o2,\n    output o1,\n    output o0\n);\n    assign outv = vec; // Assign input vector to output vector\n    assign o0 = vec[0]; // Assign bit 0 of input to o0\n    assign o1 = vec[1]; // Assign bit 1 of input to o1\n    assign o2 = vec[2]; // Assign bit 2 of input to o2\nendmodule"}
{"task_id": "kmap4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n    \n    always @(*) begin\n        case ({c,d,b,a})\n            4'b0010, 4'b0101, 4'b1001, 4'b1110: out = 1'b1;\n            default: out = 1'b0;\n        endcase\n    end\n    \nendmodule"}
{"task_id": "vector1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "module top_module (\n    input [15:0] in,\n    output [7:0] out_hi,\n    output [7:0] out_lo\n);\n    assign out_lo = in[7:0];  // Assign lower 8 bits\n    assign out_hi = in[15:8]; // Assign upper 8 bits\nendmodule"}
{"task_id": "norgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = ~(a | b); // NOR gate implementation: output is the inverse of the OR of inputs a and b\nendmodule"}
{"task_id": "alwaysblock2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "module top_module(\n    input clk,\n    input a, \n    input b,\n    output out_assign,\n    output reg out_always_comb,\n    output reg out_always_ff\n);\n\n    // Assign statement\n    assign out_assign = a ^ b;\n\n    // Combinational always block\n    always @(*) begin\n        out_always_comb = a ^ b;\n    end\n\n    // Clocked always block\n    always @(posedge clk) begin\n        out_always_ff <= a ^ b;\n    end\n\nendmodule"}
{"task_id": "m2014_q6c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "module top_module (\n    input [6:1] y,\n    input w,\n    output Y2,\n    output Y4\n);\n    assign Y2 = y[1] & w | y[2] & ~w | y[4] & w | y[5] & ~w;\n    assign Y4 = y[1] & ~w | y[3] & w | y[4] & ~w | y[5] & ~w;\nendmodule"}
{"task_id": "mux256to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "module top_module (\n    input [255:0] in,\n    input [7:0] sel,\n    output  out\n);\n    assign out = in[sel];\nendmodule"}
{"task_id": "2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input w,\n    input R,\n    input E,\n    input L,\n    output reg Q\n);\n\nalways @(posedge clk) begin\n    if (L)\n        Q <= R;\n    else if (E)\n        Q <= w;\n    else\n        Q <= Q;\nend\n\nendmodule"}
{"task_id": "ece241_2014_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    output z\n);\n    \n    reg q1, q2, q3;\n    wire x1, x2, x3;\n\n    // XOR gate\n    assign x1 = x ^ q1;\n    // AND gate\n    assign x2 = x & ~q2;\n    // OR gate\n    assign x3 = x | ~q3;\n\n    // D flip-flops\n    always @(posedge clk) begin\n        q1 <= x1;\n        q2 <= x2;\n        q3 <= x3;\n    end\n\n    // XNOR gate\n    assign z = ~(q1 ^ q2 ^ q3);\n\nendmodule"}
{"task_id": "circuit4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n    assign q = (a & b & c & d) | (!a & b & c & d) | (!a & !b & c & d) | (!a & b & !c & d);\nendmodule"}
{"task_id": "rule110", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q);\n\nalways @(posedge clk) begin\n    if (load)\n        q <= data;\n    else\n        q <= {q[510:0], q[511] ^ q[510] ^ q[509]}; // Rule 110 logic\nend\n\nendmodule"}
{"task_id": "fsm3s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n    \n    // Define states\n    localparam A = 2'b00;\n    localparam B = 2'b01;\n    localparam C = 2'b10;\n    localparam D = 2'b11;\n    \n    reg [1:0] state, next_state;\n    \n    // State transition logic\n    always @(*) begin\n        case(state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A; // Should never reach here\n        endcase\n    end\n    \n    // Output logic\n    always @(*) begin\n        case(state)\n            A: out = 1'b0;\n            B: out = 1'b0;\n            C: out = 1'b0;\n            D: out = 1'b1;\n            default: out = 1'b0; // Should never reach here\n        endcase\n    end\n    \n    // State register\n    always @(posedge clk) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n    \nendmodule"}
{"task_id": "circuit5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "module top_module (\n    input [3:0] a, \n    input [3:0] b, \n    input [3:0] c, \n    input [3:0] d,\n    input [3:0] e,\n    output reg [3:0] q\n);\n\nalways @(*) begin\n    case(c)\n        4'h0: q = b;\n        4'h1: q = e;\n        4'h2: q = a;\n        4'h3: q = d;\n        default: q = 4'hf;\n    endcase\nend\n\nendmodule"}
{"task_id": "bugs_mux2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFind the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input sel,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out\n);\n    \n    always @(*) begin\n        out = (sel) ? b : a;\n    end\n\nendmodule"}
{"task_id": "mt2015_muxdff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "module top_module(\n    input clk,\n    input L,\n    input q_in,\n    input r_in,\n    output reg Q\n);\n    always @(posedge clk) begin\n        if (L) begin\n            Q <= r_in;\n        end else begin\n            Q <= q_in ^ Q;\n        end\n    end\nendmodule\n\nmodule full_module (\n    input [2:0] r,\n    input L,\n    input clk,\n    output reg [2:0] q\n);\n    wire q0_in, q1_in, q2_in;\n    wire r0, r1, r2;\n\n    assign r0 = r[0];\n    assign r1 = r[1];\n    assign r2 = r[2];\n    assign q0_in = q[1] ^ q[2];\n    assign q1_in = q[0];\n    assign q2_in = q[2];\n\n    top_module t0 (.clk(clk), .L(L), .q_in(q0_in), .r_in(r0), .Q(q[0]));\n    top_module t1 (.clk(clk), .L(L), .q_in(q1_in), .r_in(r1), .Q(q[1]));\n    top_module t2 (.clk(clk), .L(L), .q_in(q2_in), .r_in(r2), .Q(q[2]));\nendmodule"}
{"task_id": "edgecapture", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input [31:0] in,\n    output reg [31:0] out\n);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            out <= 32'b0;\n        else\n            out <= (in & (~in << 1)) & out;\n    end\n\nendmodule"}
{"task_id": "dff8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    output reg [7:0] q);\n\n    always @(posedge clk) begin\n        q <= d;\n    end\n\nendmodule"}
{"task_id": "ece241_2014_q1c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nAssume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [7:0] b,\n    output [7:0] s,\n    output overflow\n);\n    assign s = a + b;\n    assign overflow = ((a[7] & b[7] & ~s[7]) | (~a[7] & ~b[7] & s[7]));\nendmodule"}
{"task_id": "review2015_fsmonehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n);\n    // State transitions\n    assign B3_next = &state[6:3]; // B3 to Count\n    assign S_next = (state[0]) | (state[3] & ~d);\n    assign S1_next = (state[1]) | (state[2] & ~d);\n    assign Count_next = (state[8] & done_counting);\n    assign Wait_next = (state[9] & ~ack);\n\n    // Outputs\n    assign done = state[9];\n    assign counting = state[8];\n    assign shift_ena = |state[7:0]; // True when B0, B1, B2, B3 are active\n\nendmodule"}
{"task_id": "counter_2bc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 2'b01;  // Reset to weakly not-taken\n        else if (train_valid) begin\n            if (train_taken)\n                state <= state + 1'b1;  // Increment\n            else\n                state <= state - 1'b1;  // Decrement\n            if (state > 2'b11)\n                state <= 2'b11;  // Saturate at max\n            else if (state < 2'b00)\n                state <= 2'b00;  // Saturate at min\n        end\n    end\nendmodule"}
{"task_id": "always_casez", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output reg [2:0] pos\n);\n    always @(*) begin\n        if (in[0]) pos = 3'd0;\n        else if (in[1]) pos = 3'd1;\n        else if (in[2]) pos = 3'd2;\n        else if (in[3]) pos = 3'd3;\n        else if (in[4]) pos = 3'd4;\n        else if (in[5]) pos = 3'd5;\n        else if (in[6]) pos = 3'd6;\n        else if (in[7]) pos = 3'd7;\n        else pos = 3'd0;\n    end\nendmodule"}
{"task_id": "always_nolatches", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "module top_module (\n    input [15:0] scancode,\n    output reg left,\n    output reg down,\n    output reg right,\n    output reg up\n);\n    always @(*) begin\n        left = (scancode == 16'hE06B);\n        down = (scancode == 16'hE072);\n        right = (scancode == 16'hE074);\n        up = (scancode == 16'hE075);\n    end\nendmodule"}
{"task_id": "m2014_q4j", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 4-bit adder with full adders. The output sum should include the overflow bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "module top_module (\n    input [3:0] x,\n    input [4:0] y,\n    output [4:0] sum\n);\n    wire [3:0] carry;\n    \n    wire overflow;\n    // Full adder logic\n    genvar i;\n    generate\n    for (i = 0; i < 4; i = i + 1) begin : full_adder_gen\n        assign carry[i] = x[i] & y[i] | (x[i] ^ y[i]) & carry[i-1];\n    end\n    endgenerate\n    // Overflow detection\n    assign overflow = x[3] & y[3] | x[3] & carry[3] | y[3] & carry[3];\n    // Sum calculation\n    assign sum[3:0] = x ^ y ^ {carry[3:0]};\n    // Include overflow bit in sum\n    assign sum[4] = overflow;\nendmodule"}
{"task_id": "history_shift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            predict_history <= 32'b0;\n        end else if (train_mispredicted) begin\n            predict_history <= {train_history, train_taken};\n        end else if (predict_valid) begin\n            predict_history <= {predict_history[30:0], predict_taken};\n        end\n    end\nendmodule"}
{"task_id": "wire_decl", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out,\n    output out_n\n);\n    wire and1, and2;\n    \n    and1 = a & b;\n    and2 = c & d;\n    \n    out = and1 | and2;\n    out_n = ~out;\n    \nendmodule"}
{"task_id": "dff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a single D flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q);\n    \n    always @(posedge clk) begin\n        q <= d;\n    end\nendmodule"}
{"task_id": "ece241_2013_q12", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "module top_module (\n    input clk,\n    input enable,\n    input S,\n    input A,\n    input B,\n    input C,\n    output reg Z\n);\n    \n    reg [7:0] shift_reg;\n    \n    always @(posedge clk) begin\n        if (enable)\n            shift_reg <= {S, shift_reg[7:1]};\n    end\n    \n    always @* begin\n        case({A,B,C})\n            3'b000: Z = shift_reg[0];\n            3'b001: Z = shift_reg[1];\n            3'b010: Z = shift_reg[2];\n            3'b011: Z = shift_reg[3];\n            3'b100: Z = shift_reg[4];\n            3'b101: Z = shift_reg[5];\n            3'b110: Z = shift_reg[6];\n            3'b111: Z = shift_reg[7];\n        endcase\n    end\nendmodule"}
{"task_id": "thermostat", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "module top_module(\n    input mode,\n    input too_cold, \n    input too_hot,\n    input fan_on,\n    output heater,\n    output aircon,\n    output fan\n);\n    assign heater = mode & too_cold;\n    assign aircon = ~mode & too_hot;\n    assign fan = heater | aircon | fan_on;\nendmodule"}
{"task_id": "ece241_2013_q2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out_sop,\n    output out_pos\n);\n\n    // Sum-of-Products (SOP) form\n    assign out_sop = (a & ~b & ~c & ~d) | (~a & b & ~c & ~d & ~e) | (~a & ~b & ~c & d);\n\n    // Product-of-Sums (POS) form\n    assign out_pos = ~(a | b | c | d) & ~(~a | ~b | c | d) & ~(~a | ~b | ~c | ~d);\n\nendmodule"}
{"task_id": "lfsr32", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [31:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 32'h1;\n        else begin\n            q <= {q[30:0], (q[31] ^ q[21] ^ q[1] ^ q[0])};\n        end\n    end\n\nendmodule"}
{"task_id": "circuit3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n\nassign q = (a & ~(b ^ c)) | (d & b & c);\n\nendmodule"}
{"task_id": "7420", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d, \n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n    // 4-input NAND gate for output p1y\n    assign p1y = ~(p1a & p1b & p1c & p1d);\n    // 4-input NAND gate for output p2y\n    assign p2y = ~(p2a & p2b & p2c & p2d);\nendmodule"}
{"task_id": "popcount255", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input [254:0] in,\n    output reg [7:0] out\n);\n    // Split input into 32-bit chunks\n    genvar i;\n    generate\n        for (i = 0; i < 8; i = i + 1) begin : bit_chunks\n            // Assign each 32-bit chunk\n            assign in_chunk[i] = in[(i+1)*32-1 : i*32];\n        end\n    endgenerate\n\n    // Count 1's in each chunk\n    reg [4:0] count[0:7];\n    always @(*) begin\n        for (i = 0; i < 8; i = i + 1) begin\n            count[i] = $countones(in_chunk[i]);\n        end\n    end\n\n    // Sum counts\n    always @(*) begin\n        out = 0;\n        for (i = 0; i < 8; i = i + 1) begin\n            out = out + count[i];\n        end\n    end\nendmodule"}
{"task_id": "gatesv", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output [2:0] out_both,\n    output [3:1] out_any,\n    output [3:0] out_different\n);\n    assign out_both = {in[3] & in[2], in[2] & in[1], in[1] & in[0]};\n    assign out_any = {in[0] | in[3], in[3] | in[2], in[2] | in[1], in[1] | in[0]};\n    assign out_different = {in[0] ^ in[3], in[3] ^ in[2], in[2] ^ in[1], in[1] ^ in[0]};\nendmodule"}
{"task_id": "circuit6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "module top_module (\n    input [2:0] a, \n    output reg [15:0] q\n);\n    always @(*) begin\n        case(a)\n            3'd0: q = 16'h1232;\n            3'd1: q = 16'hAEE0;\n            3'd2: q = 16'h27D4;\n            3'd3: q = 16'h5A0E;\n            3'd4: q = 16'h2066;\n            3'd5: q = 16'h64CE;\n            3'd6: q = 16'hC526;\n            3'd7: q = 16'h2F19;\n            default: q = 16'x;\n        endcase\n    end\nendmodule"}
{"task_id": "countslow", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input slowena,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'b0000; // Reset to 0\n        else if (slowena)\n            q <= (q == 4'b1001) ? 4'b0000 : q + 1'b1; // Increment or wrap to 0\n    end\n\nendmodule"}
{"task_id": "m2014_q4f", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    logic in2_bubbled;\n\n    // Bubble inverter for in2 input\n    assign in2_bubbled = ~in2;\n\n    // AND gate with in1 and bubbled in2\n    assign out = in1 & in2_bubbled;\n\nendmodule"}
{"task_id": "m2014_q4h", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module assigns the output port to the same value as the input port combinationally.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = in;\nendmodule"}
{"task_id": "fsm1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n    localparam [1:0] B = 2'b10, A = 2'b01;\n    reg [1:0] state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= B;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            B: next_state = in ? B : A;\n            A: next_state = in ? A : B;\n            default: next_state = B;\n        endcase\n    end\n\n    assign out = (state == A);\n\nendmodule"}
{"task_id": "dualedge", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q);\n\n    reg clk_d;\n    always @(posedge clk) begin\n        clk_d <= ~clk_d;\n    end\n\n    always @(posedge clk_d) begin\n        q <= d;\n    end\n\nendmodule"}
{"task_id": "xnorgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an XNOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    \n    assign out = ~(a ^ b);\n    \nendmodule"}
{"task_id": "mt2015_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nModule A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n    \n    wire a1_out, a2_out, b1_out, b2_out, or_out, and_out;\n\n    // Instantiate module A\n    module_A a1(.x(x), .y(y), .z(a1_out));\n    module_A a2(.x(x), .y(y), .z(a2_out));\n\n    // Instantiate module B\n    module_B b1(.x(x), .y(y), .z(b1_out));\n    module_B b2(.x(x), .y(y), .z(b2_out));\n\n    // OR gate\n    or_gate or1(.a(a1_out), .b(b1_out), .z(or_out));\n\n    // AND gate\n    and_gate and1(.a(a2_out), .b(b2_out), .z(and_out));\n\n    // XOR gate\n    xor_gate xor1(.a(or_out), .b(and_out), .z);\n\nendmodule\n\nmodule module_A(\n    input x,\n    input y,\n    output z);\n    \n    assign z = (x ^ y) & x;\n\nendmodule\n\nmodule module_B(\n    input x,\n    input y,\n    output z);\n    \n    // Define the behavior of B based on the simulation waveform\n    always @(*) begin\n        case({x, y})\n            2'b00: z = 1;\n            2'b01: z = 0;\n            2'b10: z = 0;\n            2'b11: z = 1;\n        endcase\n    end\n\nendmodule\n\nmodule or_gate(\n    input a,\n    input b,\n    output z);\n    \n    assign z = a | b;\n\nendmodule\n\nmodule and_gate(\n    input a,\n    input b,\n    output z);\n    \n    assign z = a & b;\n\nendmodule\n\nmodule xor_gate(\n    input a,\n    input b,\n    output z);\n    \n    assign z = a ^ b;\n\nendmodule"}
{"task_id": "rotate100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [1:0] ena,\n    input [99:0] data,\n    output reg [99:0] q);\n\n    always @(posedge clk) begin\n        if (load) begin\n            q <= data; // Load data when load is high\n        end else if (ena != 2'b00) begin\n            case (ena)\n                2'b01: q <= {q[0], q[99:1]}; // Rotate right\n                2'b10: q <= {q[98:0], q[99]}; // Rotate left\n                default: q <= q; // No rotation\n            endcase\n        end\n    end\n\nendmodule"}
{"task_id": "review2015_count1k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [9:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 10'd0;\n        else if (q == 10'd999)\n            q <= 10'd0;\n        else\n            q <= q + 1'b1;\n    end\n\nendmodule"}
{"task_id": "notgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOT gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = ~in;\nendmodule"}
{"task_id": "fsm_onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "module top_module (\n    input in,\n    input [9:0] state,\n    output [9:0] next_state,\n    output out1,\n    output out2);\n\n    // Next state logic\n    // S0 always transitions to S0 or S1\n    assign next_state[0] = ~state[0] & (state[9] | state[8] | state[7] | state[6] | state[5] | state[4] | state[3] | state[2] | state[1]);\n    assign next_state[1] = state[0] & ~in;\n    assign next_state[2] = state[1] & ~in;\n    assign next_state[3] = state[2] & ~in;\n    assign next_state[4] = state[3] & ~in;\n    assign next_state[5] = state[4] & ~in;\n    assign next_state[6] = state[5] & in;\n    assign next_state[7] = state[6] & ~in;\n    assign next_state[8] = state[5] & ~in;\n    assign next_state[9] = state[6] & in;\n    // All other states transition to S0\n    assign next_state[9:10] = 9'b0;\n\n    // Output logic\n    assign out1 = state[8];\n    assign out2 = state[7];\n\nendmodule"}
{"task_id": "ece241_2013_q7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    output reg Q\n);\n    \n    always @(posedge clk) begin\n        case ({j, k})\n            2'b00: Q <= Q; // No change\n            2'b01: Q <= 1'b0; // Reset\n            2'b10: Q <= 1'b1; // Set\n            2'b11: Q <= ~Q; // Toggle\n        endcase\n    end\n\nendmodule"}
{"task_id": "popcount3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "module top_module (\n    input [2:0] in,\n    output [1:0] out\n);\n    assign out = in[0] + in[1] + in[2];\nendmodule"}
{"task_id": "vector5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    input e,\n    output [24:0] out\n);\n    \n    // Compute the equality comparisons\n    assign out[24] = ~a ^ a;\n    assign out[23] = ~a ^ b;\n    assign out[22] = ~a ^ c;\n    assign out[21] = ~a ^ d;\n    assign out[20] = ~a ^ e;\n    assign out[19] = ~b ^ a;\n    assign out[18] = ~b ^ b;\n    assign out[17] = ~b ^ c;\n    assign out[16] = ~b ^ d;\n    assign out[15] = ~b ^ e;\n    assign out[14] = ~c ^ a;\n    assign out[13] = ~c ^ b;\n    assign out[12] = ~c ^ c;\n    assign out[11] = ~c ^ d;\n    assign out[10] = ~c ^ e;\n    assign out[ 9] = ~d ^ a;\n    assign out[ 8] = ~d ^ b;\n    assign out[ 7] = ~d ^ c;\n    assign out[ 6] = ~d ^ d;\n    assign out[ 5] = ~d ^ e;\n    assign out[ 4] = ~e ^ a;\n    assign out[ 3] = ~e ^ b;\n    assign out[ 2] = ~e ^ c;\n    assign out[ 1] = ~e ^ d;\n    assign out[ 0] = ~e ^ e;\n    \nendmodule"}
{"task_id": "lemmings1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    output walk_left,\n    output walk_right\n);\n    \n    // State encoding\n    localparam WALK_LEFT = 2'b00;\n    localparam WALK_RIGHT = 2'b01;\n\n    reg [1:0] current_state, next_state;\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= WALK_LEFT;\n        else\n            current_state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            WALK_LEFT: next_state = bump_left ? WALK_RIGHT : WALK_LEFT;\n            WALK_RIGHT: next_state = bump_right ? WALK_LEFT : WALK_RIGHT;\n            default: next_state = WALK_LEFT;\n        endcase\n    end\n\n    // Output logic\n    assign walk_left = current_state == WALK_LEFT;\n    assign walk_right = current_state == WALK_RIGHT;\n\nendmodule"}
{"task_id": "circuit1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    output q\n);\n    assign q = a & b;\nendmodule"}
{"task_id": "7458", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d,\n    input p1e,\n    input p1f,\n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n    wire and1, and2, and3, and4;\n\n    assign and1 = p1a & p1b & p1c;\n    assign and2 = p1d & p1e & p1f;\n    assign and3 = p2a & p2b;\n    assign and4 = p2c & p2d;\n\n    assign p1y = and1 | and2;\n    assign p2y = and3 | and4;\nendmodule"}
{"task_id": "2014_q3c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    input [2:0] y,\n    output reg Y0,\n    output reg z\n);\nreg [2:0] next_state;\n\nalways @(posedge clk) begin\n    case(y)\n        3'b000: next_state <= (x == 1'b0) ? 3'b000 : 3'b001;\n        3'b001: next_state <= (x == 1'b0) ? 3'b001 : 3'b100;\n        3'b010: next_state <= (x == 1'b0) ? 3'b010 : 3'b001;\n        3'b011: next_state <= (x == 1'b0) ? 3'b001 : 3'b010;\n        3'b100: next_state <= (x == 1'b0) ? 3'b011 : 3'b100;\n        default: next_state <= 3'b000;\n    endcase\nend\n\nalways @(posedge clk) begin\n    case(y)\n        3'b000, 3'b001, 3'b010: begin\n            Y0 <= 1'b0;\n            z <= 1'b0;\n        end\n        3'b011, 3'b100: begin\n            Y0 <= 1'b1;\n            z <= 1'b1;\n        end\n        default: begin\n            Y0 <= 1'b0;\n            z <= 1'b0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 2-input NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    \n    // NOR gate implementation\n    assign out = ~(in1 | in2);\n\nendmodule"}
{"task_id": "wire4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    output w,\n    output x,\n    output y,\n    output z\n);\n    // Connections as specified\n    assign w = a;\n    assign x = b;\n    assign y = b;\n    assign z = c;\n\nendmodule"}
{"task_id": "m2014_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input ar,\n    output logic q\n);\n    always @(posedge clk or posedge ar) begin\n        if (ar)\n            q <= 1'b0; // Reset q to 0 when ar is asserted\n        else\n            q <= d; // On rising edge of clk, set q to d\n    end\nendmodule"}
{"task_id": "always_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "module top_module (\n    input [2:0] sel,\n    input [3:0] data0,\n    input [3:0] data1,\n    input [3:0] data2,\n    input [3:0] data3,\n    input [3:0] data4,\n    input [3:0] data5,\n    output reg [3:0] out\n);\n    always @(*) begin\n        case(sel)\n            3'd0: out = data0;\n            3'd1: out = data1;\n            3'd2: out = data2;\n            3'd3: out = data3;\n            3'd4: out = data4;\n            3'd5: out = data5;\n            default: out = 4'b0000;\n        endcase\n    end\nendmodule"}
{"task_id": "timer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "module top_module(\n    input clk, \n    input load, \n    input [9:0] data, \n    output reg tc\n);\n   reg [9:0] counter;\n\n   always @(posedge clk) begin\n      if (load) begin\n         counter <= data;\n         tc <= 1'b0;\n      end else if (counter != 0) begin\n         counter <= counter - 1;\n      end\n   end\n\n   assign tc = (counter == 10'd0);\n\nendmodule"}
{"task_id": "review2015_fsmseq", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg start_shifting);\n\n    parameter [3:0] S0 = 4'b0000, S1 = 4'b0001, S2 = 4'b0010, S3 = 4'b0011, S4 = 4'b0100;\n    reg [3:0] state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= S0;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            S0: next_state = data ? S1 : S0;\n            S1: next_state = data ? S2 : S0;\n            S2: next_state = data ? S3 : S0;\n            S3: next_state = data ? S4 : S0;\n            S4: next_state = data ? S4 : S0;\n            default: next_state = S0;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            start_shifting <= 1'b0;\n        else if (next_state == S4)\n            start_shifting <= 1'b1;\n    end\n\nendmodule"}
{"task_id": "dff8r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 8'b0;\n        else\n            q <= d;\n    end\nendmodule"}
{"task_id": "edgedetect2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] anyedge);\n\n    reg [7:0] in_prev;\n\n    always @(posedge clk) begin\n        in_prev <= in;\n        anyedge <= (in & ~in_prev);\n    end\n\nendmodule"}
{"task_id": "count1to10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nMake a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'd1; // Reset to 1\n        else if (q == 4'd10)\n            q <= 4'd1; // Wrap around to 1\n        else\n            q <= q + 1'b1; // Increment by 1\n    end\n\nendmodule"}
{"task_id": "circuit9", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg [2:0] q\n);\n\nalways @(posedge clk) begin\n    if (a)\n        q <= 4'b0100; // q = 4 in binary\n    else begin\n        if (q == 4'b0100)\n            q <= 4'b0101; // q = 5 in binary\n        else if (q == 4'b0101)\n            q <= 4'b0110; // q = 6 in binary\n        else if (q == 4'b0110)\n            q <= 4'b0000; // q = 0 in binary\n        else \n            q <= 4'b0001; // q = 1 in binary\n    end\nend\n\nendmodule"}
{"task_id": "lfsr5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [4:0] q\n);\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 5'b00001;  // Active-high synchronous reset\n        else\n            q <= {q[3], q[1], q[0], q[4] ^ q[3], q[4]};  // Galois LFSR with taps at bit positions 5 and 3\n    end\nendmodule"}
{"task_id": "bugs_addsubz", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "module top_module (\n    input do_sub,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out,\n    output reg result_is_zero\n);\n\n    always @(*) begin\n        if (do_sub)\n            out = a - b;\n        else\n            out = a + b;\n\n        result_is_zero = (out == 8'b0);\n    end\n\nendmodule"}
{"task_id": "m2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n    \n    always_comb begin\n        case (x)\n            4'b0000, 4'b0001, 4'b0111, 4'b0110: f = 1'b0; // 0111 and 0110 are don't-care\n            4'b0010, 4'b0101, 4'b1010, 4'b1100: f = 1'b1; // 0010 and 1100 are don't-care\n            default: f = 1'b0; // don't-care values\n        endcase\n    end\n    \nendmodule"}
{"task_id": "bugs_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "module top_module (\n    input [7:0] code,\n    output reg [3:0] out,\n    output reg valid\n);\n\nalways @(*) begin\n    case (code)\n        8'h45: {out, valid} = 4'd0;\n        8'h16: {out, valid} = 4'd1;\n        8'h1e: {out, valid} = 4'd2;\n        8'h26: {out, valid} = 4'd3;\n        8'h25: {out, valid} = 4'd4;\n        8'h2e: {out, valid} = 4'd5;\n        8'h36: {out, valid} = 4'd6;\n        8'h3d: {out, valid} = 4'd7;\n        8'h3e: {out, valid} = 4'd8;\n        8'h46: {out, valid} = 4'd9;\n        default: {out, valid} = 2'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "vectorr", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven an 8-bit input vector [7:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [7:0] out\n);\n    assign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\nendmodule"}
{"task_id": "kmap3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n\nalways @(*) begin\n    case({c, d, b, a})\n        4'b0000, 4'b0001, 4'b0010, 4'b0011, 4'b0100, 4'b0110, 4'b0111,\n        4'b1000, 4'b1001, 4'b1010, 4'b1011, 4'b1100, 4'b1101, 4'b1110, 4'b1111: out = 1'b0;\n        4'b1011, 4'b1111: out = 1'b1;\n        default: out = 1'bx;\n    endcase\nend\n\nendmodule"}
{"task_id": "review2015_shiftcount", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input shift_ena,\n    input count_ena,\n    input data,\n    output reg [3:0] q);\n\n    always @(posedge clk) begin\n        if (count_ena && !shift_ena)\n            q <= q - 1'b1; // decrement when count_ena is high\n        else if (shift_ena && !count_ena)\n            q <= {data, q[3:1]}; // shift in new data\n    end\n\nendmodule"}
{"task_id": "wire", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with one input and one output that behaves like a wire.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = in; // Connect input to output directly\nendmodule"}
{"task_id": "review2015_fsmshift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output shift_ena\n);\n   reg [1:0] state, next_state;\n   wire [1:0] enable_counter;\n   \n   // State encoding: 00 = idle, 01 = enable_1, 10 = enable_2, 11 = enable_3\n   localparam IDLE = 2'b00;\n   localparam ENABLE_1 = 2'b01;\n   localparam ENABLE_2 = 2'b10;\n   localparam ENABLE_3 = 2'b11;\n\n   // State register\n   always @(posedge clk or posedge reset) begin\n      if (reset)\n         state <= IDLE;\n      else\n         state <= next_state;\n   end\n\n   // Next state logic\n   always @(*) begin\n      case (state)\n         IDLE:     next_state = reset ? ENABLE_1 : IDLE;\n         ENABLE_1: next_state = ENABLE_2;\n         ENABLE_2: next_state = ENABLE_3;\n         ENABLE_3: next_state = IDLE;\n         default:  next_state = IDLE;\n      endcase\n   end\n\n   // Output logic\n   assign shift_ena = (state != IDLE);\n\nendmodule"}
{"task_id": "count15", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk) begin\n        if (reset)\n            q <= 4'b0000; // Reset counter to 0\n        else\n            q <= q + 1'b1; // Increment counter\n    end\n\nendmodule"}
{"task_id": "always_if", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel_b1,\n    input sel_b2,\n    output out_assign,\n    output reg out_always\n);\n\n    // Using assign statements\n    assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\n    // Using procedural if statement\n    always @(*) begin\n        if (sel_b1 & sel_b2)\n            out_always = b;\n        else\n            out_always = a;\n    end\n\nendmodule"}
{"task_id": "kmap1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    input c,\n    output out\n);\n    assign out = ~a & b & c | a; // Simplified expression from Karnaugh map\nendmodule"}
{"task_id": "2013_q2afsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input [3:1] r,\n    output [3:1] g\n);\n\nreg [1:0] state, next_state;\n\n// State encoding: 00 - A, 01 - B, 10 - C, 11 - D\nparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\n// State transition logic\nalways @(*) begin\n    if (r[1] && !r[2] && !r[3]) next_state = B; // Device 1 request\n    else if (!r[1] && r[2] && !r[3]) next_state = C; // Device 2 request\n    else if (!r[1] && !r[2] && r[3]) next_state = D; // Device 3 request\n    else next_state = A; // No request\nend\n\n// State register\nalways @(posedge clk or negedge resetn) begin\n    if (!resetn) state <= A;\n    else state <= next_state;\nend\n\n// Output logic\nalways @(*) begin\n    g[1] = (state == B);\n    g[2] = (state == C);\n    g[3] = (state == D);\nend\n\nendmodule"}
{"task_id": "count10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        q <= 4'b0000; // Reset to 0\n    else if (q == 4'b1001) // When q reaches 9\n        q <= 4'b0000; // Reset to 0\n    else\n        q <= q + 1'b1; // Increment by 1\nend\n\nendmodule"}
{"task_id": "fsm_ps2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output reg done\n);\n    localparam [1:0] SEARCH = 2'b00, BYTE1 = 2'b01, BYTE2 = 2'b10, BYTE3 = 2'b11;\n    reg [1:0] state, next_state;\n    reg [7:0] byte_count;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= SEARCH;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            SEARCH: next_state = in[3] ? BYTE1 : SEARCH;\n            BYTE1:  next_state = BYTE2;\n            BYTE2:  next_state = BYTE3;\n            BYTE3:  next_state = SEARCH;\n            default: next_state = SEARCH;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            done <= 1'b0;\n            byte_count <= 8'd0;\n        end else begin\n            case (state)\n                BYTE3: begin\n                    byte_count <= byte_count + 1;\n                    done <= (byte_count == 8'd3);\n                end\n                default: begin\n                    byte_count <= 8'd0;\n                    done <= 1'b0;\n                end\n            endcase\n        end\n    end\n\nendmodule"}
{"task_id": "mux2to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel,\n    output out\n);\n    assign out = sel ? b : a;\nendmodule"}
{"task_id": "gates4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and = &in;  // 4-input AND gate\n    assign out_or = |in;   // 4-input OR gate\n    assign out_xor = ^in;  // 4-input XOR gate\nendmodule"}
{"task_id": "2014_q3bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input x,\n    output reg z\n);\n    reg [2:0] y;\n\n    always @(posedge clk) begin\n        if (reset)\n            y <= 3'b000;\n        else begin\n            case (y)\n                3'b000: y <= x ? 3'b001 : 3'b000;\n                3'b001: y <= x ? 3'b100 : 3'b001;\n                3'b010: y <= x ? 3'b001 : 3'b010;\n                3'b011: y <= x ? 3'b100 : 3'b010;\n                3'b100: y <= x ? 3'b100 : 3'b011;\n                default: y <= 3'b000;\n            endcase\n        end\n    end\n\n    always @(posedge clk) begin\n        case (y)\n            3'b001, 3'b100: z <= 1'b1;\n            default: z <= 1'b0;\n        endcase\n    end\n\nendmodule"}
{"task_id": "2013_q2bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input x,\n    input y,\n    output f,\n    output g\n);\n    // State encoding\n    parameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\n    reg [1:0] state, next_state;\n    reg [1:0] x_seq, next_x_seq;\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn) begin\n            state <= A;\n            x_seq <= 2'b00;\n            f <= 1'b0;\n            g <= 1'b0;\n        end else begin\n            state <= next_state;\n            x_seq <= next_x_seq;\n            f <= (state == A);\n            g <= (state == D);\n        end\n    end\n\n    always @(*) begin\n        next_state = state;\n        next_x_seq = x_seq;\n\n        case (state)\n            A: begin\n                if (!resetn) begin\n                    next_state = A;\n                end else begin\n                    next_state = B;\n                    next_x_seq = {x, 2'b00};\n                end\n            end\n            B: begin\n                if (x_seq == 2'b10) begin\n                    next_state = C;\n                    next_x_seq = {x, 2'b00};\n                end else begin\n                    next_x_seq = {x, x_seq[1:0]};\n                end\n            end\n            C: begin\n                if (x_seq == 2'b11) begin\n                    next_state = D;\n                end else begin\n                    next_x_seq = {x, x_seq[1:0]};\n                end\n            end\n            D: begin\n                if (y) begin\n                    next_state = D;\n                end else begin\n                    next_state = A;\n                end\n            end\n        endcase\n    end\n\nendmodule"}
{"task_id": "dff8p", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n\n    always @(negedge clk or posedge reset) begin\n        if (reset)\n            q <= 8'h34;  // Reset value to 0x34\n        else\n            q <= d;  // Load input data\n    end\n\nendmodule"}
{"task_id": "reduction", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nParity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output parity\n);\n    assign parity = ^in; // XOR all input bits to generate even parity\nendmodule"}
{"task_id": "fsm3comb", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [1:0] state,\n    output reg [1:0] next_state,\n    output out\n);\n    always @(*) begin\n        case(state)\n            2'b00: begin next_state = in ? 2'b01 : 2'b00; out = 1'b0; end\n            2'b01: begin next_state = in ? 2'b01 : 2'b10; out = 1'b0; end\n            2'b10: begin next_state = in ? 2'b11 : 2'b00; out = 1'b0; end\n            2'b11: begin next_state = in ? 2'b10 : 2'b01; out = 1'b1; end\n            default: begin next_state = 2'b00; out = 1'b0; end\n        endcase\n    end\nendmodule"}
{"task_id": "mt2015_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z\n);\nreg z_reg;\n\nalways @(posedge x or posedge y) begin\n    if (x & y)\n        z_reg <= 1'b1;\n    else\n        z_reg <= 1'b0;\nend\n\nassign z = ~z_reg;\n\nendmodule"}
{"task_id": "2012_q2fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n\n    // State encoding\n    localparam [2:0] A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n\n    // State register\n    reg [2:0] state, next_state;\n\n    // Output logic\n    assign z = (state == E) ? 1'b1 : 1'b0;\n\n    // State transition logic\n    always @(*) begin\n        case (state)\n            A: next_state = w ? B : A;\n            B: next_state = w ? C : D;\n            C: next_state = w ? E : D;\n            D: next_state = w ? F : A;\n            E: next_state = w ? E : D;\n            F: next_state = w ? C : D;\n            default: next_state = A;\n        endcase\n    end\n\n    // State register update\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\nendmodule"}
{"task_id": "dff16e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input resetn,\n    input [1:0] byteena,\n    input [15:0] d,\n    output reg [15:0] q\n);\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            q <= 16'b0;\n        else begin\n            if (byteena[1])\n                q[15:8] <= d[15:8];\n            if (byteena[0])\n                q[7:0] <= d[7:0];\n        end\n    end\nendmodule"}
{"task_id": "edgedetect", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] pedge\n);\nreg [7:0] in_prev;\n\nalways @(posedge clk) begin\n    in_prev <= in;\n    pege <= in & ~in_prev; // Detect positive edge\nend\n\nendmodule"}
{"task_id": "circuit8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "module top_module (\n    input clock,\n    input a, \n    output reg p,\n    output reg q\n);\n\nalways @(posedge clock) begin\n    if (a) begin\n        p <= ~p;\n        q <= ~q;\n    end\n    else begin\n        p <= 0;\n        q <= 0;\n    end\nend\n\nendmodule"}
{"task_id": "rule90", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q\n);\n\nalways @(posedge clk) begin\n    if (load)\n        q <= data;  // Load data on the rising edge of clk if load is high\n    else\n        q <= {q[510:0], 1'b0} ^ {1'b0, q};  // Apply Rule 90 for next state\nend\n\nendmodule"}
{"task_id": "mt2015_eq2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "module top_module(\n    input [1:0] A,\n    input [1:0] B,\n    output z\n);\n    assign z = (A == B);\nendmodule"}
{"task_id": "gatesv100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output [98:0] out_both,\n    output [99:1] out_any,\n    output [99:0] out_different\n);\n    assign out_both = in[98:0] & in[99:1];\n    assign out_any = in[98:0] | in[99:1];\n    assign out_different = in ^ {in[0], in[99:1]};\nendmodule"}
{"task_id": "m2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D latch using an always block.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input d,\n    input ena,\n    output logic q\n);\n    always @(posedge ena or posedge d) begin\n        if (ena)\n            q <= d;\n    end\nendmodule"}
{"task_id": "mux256to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "module top_module (\n    input [1023:0] in,\n    input [7:0] sel,\n    output [3:0] out\n);\n    assign out = in[(sel*4+3):(sel*4)];\nendmodule"}
{"task_id": "mux9to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "module top_module (\n    input [15:0] a,\n    input [15:0] b,\n    input [15:0] c,\n    input [15:0] d,\n    input [15:0] e,\n    input [15:0] f,\n    input [15:0] g,\n    input [15:0] h,\n    input [15:0] i,\n    input [3:0] sel,\n    output logic [15:0] out\n);\n    always @(*) begin\n        case (sel)\n            4'd0: out = a;\n            4'd1: out = b;\n            4'd2: out = c;\n            4'd3: out = d;\n            4'd4: out = e;\n            4'd5: out = f;\n            4'd6: out = g;\n            4'd7: out = h;\n            4'd8: out = i;\n            default: out = 16'hFFFF;\n        endcase\n    end\nendmodule"}
{"task_id": "vectorgates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "module top_module(\n    input [2:0] a, \n    input [2:0] b, \n    output [2:0] out_or_bitwise,\n    output out_or_logical,\n    output [5:0] out_not\n);\n    // Bitwise OR of inputs a and b\n    assign out_or_bitwise = a | b;\n    // Logical OR of inputs a and b\n    assign out_or_logical = a | b;\n    // Inverse of input b in upper half of out_not\n    assign out_not[5:3] = ~b;\n    // Inverse of input a in lower half of out_not\n    assign out_not[2:0] = ~a;\nendmodule"}
{"task_id": "fsm3onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [3:0] state,\n    output reg [3:0] next_state,\n    output out\n);\n\n    always @(*) begin\n        case(state)\n            4'b0001: next_state = in ? 4'b0010 : 4'b0001;\n            4'b0010: next_state = in ? 4'b0010 : 4'b0100;\n            4'b0100: next_state = in ? 4'b1000 : 4'b0001;\n            4'b1000: next_state = in ? 4'b0100 : 4'b0010;\n            default: next_state = 4'b0001;\n        endcase\n    end\n\n    assign out = (state == 4'b1000) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "conditional", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [7:0] b,\n    input [7:0] c,\n    input [7:0] d,\n    output reg [7:0] min\n);\n    always @(*) begin\n        if (a < b) begin\n            min = a < c ? a : c;\n        end else begin\n            min = b < c ? b : c;\n        end\n        min = min < d ? min : d;\n    end\nendmodule"}
{"task_id": "gates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output out_and,\n    output out_or,\n    output out_xor,\n    output out_nand,\n    output out_nor,\n    output out_xnor,\n    output out_anotb\n);\n\n// Logic gates\nassign out_and = a & b;\nassign out_or = a | b;\nassign out_xor = a ^ b;\nassign out_nand = ~(a & b);\nassign out_nor = ~(a | b);\nassign out_xnor = ~(a ^ b);\nassign out_anotb = a & ~b;\n\nendmodule"}
{"task_id": "kmap2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output out\n);\n\n    assign out = ~(a & ~b & ~c) | (a & ~b & d) | (b & c & ~d) | (~a & b & ~c & d);\n\nendmodule"}
{"task_id": "2014_q3fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input s,\n    input w,\n    output reg z\n);\n\nreg [1:0] state, next_state;\n\nlocalparam A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= A;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    next_state = state;\n    z = 1'b0;\n    case (state)\n        A: begin\n            next_state = s ? B : A;\n        end\n        B: begin\n            next_state = C;\n        end\n        C: begin\n            next_state = D;\n        end\n        D: begin\n            z = w; // Check w in the last cycle\n            next_state = B;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "vector4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nOne common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [31:0] out\n);\n    assign out = {{24{in[7]}}, in};\nendmodule"}
{"task_id": "m2014_q4k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a shift register with four D flops. Reset is active-low synchronous resettable.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input in,\n    output out\n);\n    \n    reg [3:0] data;\n    \n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            data <= 4'b0000;  // Synchronous reset\n        else\n            data <= {data[2:0], in};  // Shift in new bit\n    end\n    \n    assign out = data[3];  // Output the MSB of the shift register\n    \nendmodule"}
{"task_id": "always_case2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output reg [1:0] pos\n);\n    always @* begin\n        casez (in)\n            4'b1??? : pos = 2'b00;  // 4\n            4'b01?? : pos = 2'b01;  // 3\n            4'b001? : pos = 2'b10;  // 2\n            4'b0001 : pos = 2'b11;  // 1\n            default : pos = 2'b00;  // 0\n        endcase\n    end\nendmodule"}
{"task_id": "fsm2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input areset,\n    output out\n);\n    reg state, next_state;\n\n    // State transition logic\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 1'b0; // Reset to OFF\n        else\n            state <= next_state;\n    end\n\n    // Next state and output logic\n    always @(*) begin\n        case (state)\n            1'b0: begin // OFF state\n                next_state = j;\n                out = 1'b0;\n            end\n            1'b1: begin // ON state\n                next_state = k;\n                out = 1'b1;\n            end\n            default: begin\n                next_state = 1'b0;\n                out = 1'b0;\n            end\n        endcase\n    end\nendmodule"}
{"task_id": "m2014_q4i", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 0 (or logic low).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput out);\n", "completion": "module top_module(\n    output out);\n    \n    // Always drive the output to logic low\n    assign out = 1'b0;\n\nendmodule"}
{"task_id": "step_one", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 1 (or logic high).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput one);\n", "completion": "module top_module(\n    output one);\n    assign one = 1'b1;\nendmodule"}
{"task_id": "vector100r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven a 100-bit input vector [99:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output reg [99:0] out\n);\n    always @(*) begin\n        out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7], in[8], in[9],\n            in[10], in[11], in[12], in[13], in[14], in[15], in[16], in[17], in[18], in[19],\n            in[20], in[21], in[22], in[23], in[24], in[25], in[26], in[27], in[28], in[29],\n            in[30], in[31], in[32], in[33], in[34], in[35], in[36], in[37], in[38], in[39],\n            in[40], in[41], in[42], in[43], in[44], in[45], in[46], in[47], in[48], in[49],\n            in[50], in[51], in[52], in[53], in[54], in[55], in[56], in[57], in[58], in[59],\n            in[60], in[61], in[62], in[63], in[64], in[65], in[66], in[67], in[68], in[69],\n            in[70], in[71], in[72], in[73], in[74], in[75], in[76], in[77], in[78], in[79],\n            in[80], in[81], in[82], in[83], in[84], in[85], in[86], in[87], in[88], in[89],\n            in[90], in[91], in[92], in[93], in[94], in[95], in[96], in[97], in[98], in[99]};\n    end\nendmodule"}
{"task_id": "m2014_q4d", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    output logic out\n);\n    logic xor_out;\n\n    // XOR gate to compute the input for the D flip-flop\n    assign xor_out = in ^ out;\n\n    // D flip-flop, triggered on the positive edge of clk\n    always_ff @(posedge clk) begin\n        out <= xor_out;\n    end\nendmodule"}
{"task_id": "shift4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input load,\n    input ena,\n    input [3:0] data,\n    output reg [3:0] q);\n\nalways @(posedge clk or posedge areset) begin\n    if (areset)\n        q <= 4'b0000;\n    else if (load)\n        q <= data;\n    else if (ena)\n        q <= {q[2:0], 1'b0};\n    else\n        q <= q;\nend\n\nendmodule"}
{"task_id": "truthtable1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "module top_module (\n    input x3,\n    input x2,\n    input x1,\n    output f\n);\n    \n    assign f = x3 & x2 | x2 & x1;\n\nendmodule"}
{"task_id": "dff8ar", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input areset,\n    output reg [7:0] q\n);\n\nalways @(posedge clk or posedge areset) begin\n    if (areset)\n        q <= 8'b0;\n    else\n        q <= d;\nend\n\nendmodule"}
{"task_id": "gates100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n\n    // 100-input AND gate\n    assign out_and = &in;\n\n    // 100-input OR gate\n    assign out_or = |in;\n\n    // 100-input XOR gate\n    assign out_xor = ^in;\n\nendmodule"}
{"task_id": "hadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output sum,\n    output cout\n);\n    assign sum = a ^ b; // Sum is the XOR of the inputs\n    assign cout = a & b; // Carry-out is the AND of the inputs\nendmodule"}
{"task_id": "always_if2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "module top_module (\n    input cpu_overheated,\n    output reg shut_off_computer,\n    input arrived,\n    input gas_tank_empty,\n    output reg keep_driving\n);\n\n    always @(*) begin\n        if (cpu_overheated)\n            shut_off_computer = 1'b1;\n        else\n            shut_off_computer = 1'b0;\n    end\n\n    always @(*) begin\n        if (~arrived)\n            keep_driving = ~gas_tank_empty;\n        else\n            keep_driving = 1'b0;\n    end\n\nendmodule"}
{"task_id": "fsm2s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input reset,\n    output reg out\n);\n\nreg [1:0] state, next_state;\n\nparameter OFF = 2'b00;\nparameter ON = 2'b01;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= OFF;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        OFF: next_state = (j) ? ON : OFF;\n        ON:  next_state = (k) ? OFF : ON;\n    endcase\nend\n\nalways @(*) begin\n    case (state)\n        OFF: out = 1'b0;\n        ON:  out = 1'b1;\n    endcase\nend\n\nendmodule"}
{"task_id": "vector3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "module top_module (\n    input [4:0] a,\n    input [4:0] b,\n    input [4:0] c,\n    input [4:0] d,\n    input [4:0] e,\n    input [4:0] f,\n    output [7:0] w,\n    output [7:0] x,\n    output [7:0] y,\n    output [7:0] z\n);\n    // Concatenate inputs and add two 1 bits to the LSB\n    wire [31:0] combined = {a, b, c, d, e, f, 2'b01};\n    \n    // Assign output vectors\n    assign w = combined[31:24];\n    assign x = combined[23:16];\n    assign y = combined[15:8];\n    assign z = combined[7:0];\nendmodule"}
{"task_id": "circuit2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n\nassign q = (~a & ~b & c & d) | (a & ~b & ~c & d) | (a & ~b & c & ~d) | (a & b & ~c & ~d);\n\nendmodule"}
{"task_id": "andgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an AND gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = a & b;\nendmodule"}
{"task_id": "fsm1s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n    localparam B = 2'b00;\n    localparam A = 2'b01;\n    \n    reg [1:0] state, next_state;\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= B;\n        else\n            state <= next_state;\n    end\n    \n    always @(*) begin\n        case (state)\n            B: next_state = in ? B : A;\n            A: next_state = in ? A : B;\n            default: next_state = B;\n        endcase\n    end\n    \n    always @(*) begin\n        out = (state == B);\n    end\n    \nendmodule"}
{"task_id": "fadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input cin,\n    output cout,\n    output sum\n);\n\nwire carry1, carry2;\n\nassign carry1 = a & b; // Generate carry for a & b\nassign carry2 = (a ^ b) & cin; // Generate carry for (a ^ b) & cin\nassign cout = carry1 | carry2; // Final carry-out\nassign sum = a ^ b ^ cin; // Sum of inputs\n\nendmodule"}
{"task_id": "m2014_q4g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    input in3,\n    output logic out\n);\n    logic xnor_out;\n    \n    // XNOR gate\n    assign xnor_out = ~(in1 ^ in2);\n    \n    // XOR gate\n    assign out = xnor_out ^ in3;\n    \nendmodule"}
{"task_id": "ece241_2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "module top_module (\n    input c,\n    input d,\n    output [3:0] mux_in\n);\n    wire one, zero;\n    wire mux_a, mux_b;\n    \n    // 2-to-1 mux for mux_a\n    assign mux_a = c & d;\n    assign mux_b = c | d;\n    \n    // 2-to-1 mux for mux_in[2] and mux_in[3]\n    assign mux_in[2] = ~mux_a & ~mux_b;\n    assign mux_in[3] = ~mux_a & mux_b;\n    \n    // Direct connections for mux_in[0] and mux_in[1]\n    assign mux_in[0] = 1'b1;\n    assign mux_in[1] = 1'b0;\nendmodule"}
{"task_id": "ece241_2014_q5b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n    // State encoding\n    parameter A = 2'b00;\n    parameter B = 2'b01;\n\n    reg [1:0] current_state, next_state;\n\n    // State registers\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= A;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // State transitions\n    always @(*) begin\n        case (current_state)\n            A: next_state = (x == 1'b0) ? A : B;\n            B: next_state = B;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    assign z = (current_state == A) ? x : ~x;\nendmodule"}
{"task_id": "circuit10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "module top_module (\n    input clk,\n    input a,\n    input b,\n    output q,\n    output state\n);\nreg q_reg, state_reg;\n\nalways @(posedge clk) begin\n    if (a && b)\n        q_reg <= 1'b0;\n    else if (b)\n        q_reg <= 1'b1;\n    else\n        q_reg <= q_reg;\nend\n\nassign state = a ? 1'b0 : (b ? 1'b1 : q_reg);\nassign q = q_reg;\n\nendmodule"}
{"task_id": "2012_q1g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n\n    assign f = x[3] | (x[1] & ~x[2]) | (~x[1] & x[2] & x[4]);\n\nendmodule"}
{"task_id": "fsm_hdlc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSynchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input in,\n    output disc,\n    output flag,\n    output err\n);\n    localparam [4:0] S0 = 5'b00000,\n                     S1 = 5'b00001,\n                     S2 = 5'b00010,\n                     S3 = 5'b00011,\n                     S4 = 5'b00100,\n                     S5 = 5'b00101,\n                     S6 = 5'b00110,\n                     S7 = 5'b00111,\n                     S8 = 5'b01000,\n                     S9 = 5'b01001;\n\n    reg [4:0] state, next_state;\n    reg [1:0] disc_flag, next_disc_flag;\n    reg [1:0] err_flag, next_err_flag;\n\n    reg [4:0] counter, next_counter;\n\n    wire next_state_flag, next_disc_flag_flag, next_err_flag_flag;\n\n    // State transitions and output logic\n    always @(*) begin\n        next_state = state;\n        next_disc_flag = disc_flag;\n        next_err_flag = err_flag;\n        next_counter = counter;\n\n        case (state)\n            S0: if (in) next_state = S1; else next_state = S0;\n            S1: if (in) next_state = S2; else next_state = S0;\n            S2: if (in) next_state = S3; else next_state = S0;\n            S3: if (in) next_state = S4; else next_state = S0;\n            S4: if (in) next_state = S5; else next_state = S0;\n            S5: if (in) next_state = S6; else next_state = S0;\n            S6: if (in) next_state = S8; else next_state = S1;\n            S7: if (in) next_state = S8; else next_state = S0;\n            S8: if (in) begin next_state = S9; next_counter = 1; end\n                else begin next_state = S0; next_counter = 0; end\n            S9: if (in) begin next_state = S9; next_counter = counter + 1; end\n                else begin next_state = S0; next_counter = 0; end\n            default: next_state = S0;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        disc_flag = disc_flag;\n        err_flag = err_flag;\n        if (state == S6) begin\n            next_disc_flag = 2'b10;\n            next_err_flag = 2'b00;\n        end\n        else if (state == S8) begin\n            next_disc_flag = 2'b00;\n            next_err_flag = 2'b00;\n        end\n        else if (state == S9) begin\n            next_disc_flag = 2'b00;\n            next_err_flag = 2'b10;\n        end\n    end\n\n    // Next state register\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= S0;\n            disc_flag <= 2'b00;\n            err_flag <= 2'b00;\n            counter <= 0;\n        end else begin\n            state <= next_state;\n            disc_flag <= next_disc_flag;\n            err_flag <= next_err_flag;\n            counter <= next_counter;\n        end\n    end\n\n    // Output assignment\n    assign disc = disc_flag[1];\n    assign flag = (state == S8);\n    assign err = err_flag[1];\n\nendmodule"}
{"task_id": "review2015_fancytimer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "module top_module(\n    input wire clk,\n    input wire reset,\n    input wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack\n);\n\nreg [3:0] state, next_state;\nreg [3:0] delay, delay_reg;\nreg [3:0] counter, counter_reg;\nreg [3:0] shift_reg;\n\nparameter SEARCH = 4'd0;\nparameter READ_DELAY = 4'd1;\nparameter COUNT = 4'd2;\nparameter DONE = 4'd3;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= SEARCH;\n        delay <= 4'd0;\n        counter <= 4'd0;\n        shift_reg <= 4'd0;\n        counting <= 1'b0;\n        done <= 1'b0;\n    end else begin\n        state <= next_state;\n        case (state)\n            SEARCH: begin\n                if (data == 1'b1) shift_reg <= {shift_reg[2:0], data};\n                if (shift_reg == 4'b1101) next_state <= READ_DELAY;\n                else next_state <= SEARCH;\n            end\n            READ_DELAY: begin\n                delay <= {delay[2:0], data};\n                if (delay[3:0] == 4'b1111) next_state <= COUNT;\n                else next_state <= READ_DELAY;\n            end\n            COUNT: begin\n                if (counter == (delay + 4'd1)) begin\n                    counter <= 4'd0;\n                    done <= 1'b1;\n                    next_state <= DONE;\n                end else begin\n                    counter <= counter + 1;\n                    done <= 1'b0;\n                    next_state <= COUNT;\n                end\n                count <= delay - counter[2:0];\n            end\n            DONE: begin\n                if (ack) begin\n                    state <= SEARCH;\n                    done <= 1'b0;\n                end else next_state <= DONE;\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "ece241_2013_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input [3:1] s,\n    output reg fr3,\n    output reg fr2,\n    output reg fr1,\n    output reg dfr\n);\n\nreg [2:0] state, next_state;\nlocalparam [2:0] LOW = 3'b000, BETWEEN = 3'b001, MID = 3'b010, HIGH = 3'b011;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= LOW;\n        fr3 <= 1'b1;\n        fr2 <= 1'b1;\n        fr1 <= 1'b1;\n        dfr <= 1'b0;\n    end else begin\n        state <= next_state;\n        case (next_state)\n            LOW: begin\n                fr3 <= 1'b1;\n                fr2 <= 1'b1;\n                fr1 <= 1'b1;\n                dfr <= 1'b0;\n            end\n            BETWEEN: begin\n                fr3 <= 1'b0;\n                fr2 <= 1'b1;\n                fr1 <= 1'b1;\n                dfr <= 1'b0;\n            end\n            MID: begin\n                fr3 <= 1'b0;\n                fr2 <= 1'b0;\n                fr1 <= 1'b1;\n                dfr <= 1'b0;\n            end\n            HIGH: begin\n                fr3 <= 1'b0;\n                fr2 <= 1'b0;\n                fr1 <= 1'b0;\n                dfr <= 1'b0;\n            end\n        endcase\n    end\nend\n\nalways @(*) begin\n    case (s)\n        3'b111: next_state = HIGH;\n        3'b110: next_state = BETWEEN;\n        3'b100: next_state = MID;\n        default: next_state = LOW;\n    endcase\nend\n\nendmodule"}
{"task_id": "fsm_serial", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output done\n);\n    localparam IDLE = 3'b000, START = 3'b001, DATA = 3'b010, STOP = 3'b011, ERROR = 3'b100;\n    reg [2:0] state, next_state;\n    reg [2:0] count;\n    reg [7:0] data;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= IDLE;\n            count <= 3'd0;\n            data <= 8'b0;\n            done <= 1'b0;\n        end else begin\n            state <= next_state;\n            done <= (state == IDLE);\n            if (state == DATA) begin\n                data <= {data[6:0], in};\n                count <= count + 1'b1;\n            end\n        end\n    end\n\n    always @(*) begin\n        next_state = state;\n        case (state)\n            IDLE:   next_state = in ? IDLE : START;\n            START:  next_state = in ? ERROR : DATA;\n            DATA:   next_state = count == 7 ? STOP : DATA;\n            STOP:   next_state = in ? IDLE : ERROR;\n            ERROR:  next_state = in ? ERROR : IDLE;\n        endcase\n    end\nendmodule"}
{"task_id": "fsm_serialdata", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output [7:0] out_byte,\n    output done\n);\n    localparam [2:0] IDLE = 3'b000, START = 3'b001, DATA = 3'b010, STOP = 3'b011, ERROR = 3'b100;\n    reg [2:0] state, next_state;\n    reg [7:0] data_reg;\n    reg done_reg;\n    reg start_bit;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= IDLE;\n            data_reg <= 8'b0;\n            done_reg <= 1'b0;\n        end else begin\n            state <= next_state;\n            done_reg <= (next_state == STOP);\n            if (next_state == DATA) begin\n                data_reg <= {data_reg[6:0], in};\n            end\n        end\n    end\n\n    always @(*) begin\n        case (state)\n            IDLE: next_state = in ? IDLE : START;\n            START: next_state = in ? ERROR : DATA;\n            DATA: next_state = in ? DATA : STOP;\n            STOP: next_state = in ? ERROR : IDLE;\n            ERROR: next_state = in ? ERROR : IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    assign done = done_reg;\n    assign out_byte = done_reg ? data_reg : 8'bz;\nendmodule"}
{"task_id": "gshare", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input predict_valid,\n    input [6:0] predict_pc,\n    output predict_taken,\n    output [6:0] predict_history,\n    input train_valid,\n    input train_taken,\n    input train_mispredicted,\n    input [6:7] train_history,\n    input [6:0] train_pc\n);\n\nreg [6:0] history;\nreg [6:0] pht_index;\nreg [1:0] pht [0:127];\nwire [1:0] pht_out;\n\ninitial begin\n    history = 7'b0;\n    for (int i = 0; i < 128; i = i + 1) begin\n        pht[i] = 2'b00;\n    end\nend\n\nalways @(posedge clk or posedge areset) begin\n    if (areset) begin\n        history <= 7'b0;\n    end else if (train_valid) begin\n        if (train_mispredicted) begin\n            history <= history ^ {1'b0, train_pc[6:1]};\n        end else begin\n            history <= history ^ {1'b0, train_pc[6:1]} ^ {1'b0, train_taken};\n        end\n    end else if (predict_valid) begin\n        history <= history ^ {1'b0, predict_pc[6:1]} ^ {1'b0, predict_taken};\n    end\nend\n\nassign pht_index = train_valid ? (history ^ {1'b0, train_pc[6:1]}) : (history ^ {1'b0, predict_pc[6:1]});\nalways @(posedge clk) begin\n    if (train_valid) begin\n        pht[pht_index] <= train_mispredicted ? 2'b01 : train_taken ? 2'b10 : 2'b00;\n    end\nend\n\nassign pht_out = pht[pht_index];\nassign predict_taken = pht_out[1];\nassign predict_history = history;\n\nendmodule"}
{"task_id": "lemmings4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n    reg [2:0] state, next_state;\n    reg falling;\n    reg [4:0] fall_counter;\n    reg splatter;\n    reg walk_dir;\n\n    localparam WALK_LEFT = 3'b000, WALK_RIGHT = 3'b001, FALL = 3'b010, DIG = 3'b011, SPLATTER = 3'b100;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        next_state = state;\n        falling = 1'b0;\n        aaah = 1'b0;\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        digging = 1'b0;\n        splatter = 1'b0;\n        walk_dir = 1'b0;\n\n        case (state)\n            WALK_LEFT: begin\n                walk_left = 1'b1;\n                walk_dir = 1'b1;\n                if (bump_left || bump_right)\n                    next_state = WALK_RIGHT;\n                else if (!ground)\n                    next_state = FALL;\n                else if (dig)\n                    next_state = DIG;\n            end\n            WALK_RIGHT: begin\n                walk_right = 1'b1;\n                walk_dir = 1'b0;\n                if (bump_right || bump_left)\n                    next_state = WALK_LEFT;\n                else if (!ground)\n                    next_state = FALL;\n                else if (dig)\n                    next_state = DIG;\n            end\n            FALL: begin\n                falling = 1'b1;\n                aaah = 1'b1;\n                if (ground) begin\n                    next_state = WALK_LEFT;\n                    walk_left = walk_dir;\n                    walk_right = !walk_dir;\n                end\n            end\n            DIG: begin\n                digging = 1'b1;\n                if (!ground)\n                    next_state = FALL;\n                else if (fall_counter == 5'd20)\n                    next_state = SPLATTER;\n            end\n            SPLATTER: begin\n                splatter = 1'b1;\n            end\n        endcase\n    end\n\n    always @(posedge clk) begin\n        if (!falling || splatter)\n            fall_counter <= 5'd0;\n        else if (state == FALL)\n            fall_counter <= fall_counter + 1'b1;\n    end\n\n    assign walk_left = state == WALK_LEFT;\n    assign walk_right = state == WALK_RIGHT;\n    assign aaah = state == FALL && falling;\n    assign digging = state == DIG;\n    assign splatter = state == SPLATTER;\n\nendmodule"}
{"task_id": "review2015_fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack\n);\n    // State encoding\n    localparam IDLE = 3'b000,\n               SEARCH = 3'b001,\n               SHIFT = 3'b010,\n               COUNT = 3'b011,\n               DONE = 3'b100;\n\n    reg [2:0] state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            IDLE: next_state = data ? SEARCH : IDLE;\n            SEARCH: next_state = data ? IDLE : SEARCH;\n            SHIFT: next_state = shift_ena ? COUNT : SHIFT;\n            COUNT: next_state = done_counting ? DONE : COUNT;\n            DONE: next_state = ack ? IDLE : DONE;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            shift_ena <= 1'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n        end else begin\n            case (next_state)\n                IDLE: begin\n                    shift_ena <= 1'b0;\n                    counting <= 1'b0;\n                    done <= 1'b0;\n                end\n                SEARCH: begin\n                    shift_ena <= 1'b0;\n                    counting <= 1'b0;\n                    done <= 1'b0;\n                end\n                SHIFT: begin\n                    shift_ena <= 1'b1;\n                    counting <= 1'b0;\n                    done <= 1'b0;\n                end\n                COUNT: begin\n                    shift_ena <= 1'b0;\n                    counting <= 1'b1;\n                    done <= 1'b0;\n                end\n                DONE: begin\n                    shift_ena <= 1'b0;\n                    counting <= 1'b0;\n                    done <= 1'b1;\n                end\n            endcase\n        end\n    end\nendmodule"}
{"task_id": "conwaylife", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [255:0] data,\n    output reg [255:0] q\n);\n\nreg [255:0] q_next;\n\nalways @(posedge clk) begin\n    if (load)\n        q <= data;\n    else\n        q <= q_next;\nend\n\nalways @* begin\n    q_next = q;\n    for (int i = 0; i < 256; i = i + 16) begin\n        for (int j = 0; j < 16; j = j + 1) begin\n            int count = 0;\n            // Count neighbors\n            count += get_cell(q, i-16, j-1); // Top-left\n            count += get_cell(q, i-16, j);   // Top-center\n            count += get_cell(q, i-16, j+1); // Top-right\n            count += get_cell(q, i, j-1);    // Left\n            count += get_cell(q, i, j+1);    // Right\n            count += get_cell(q, i+16, j-1); // Bottom-left\n            count += get_cell(q, i+16, j);   // Bottom-center\n            count += get_cell(q, i+16, j+1); // Bottom-right\n\n            // Apply game rules\n            if (q[i + j] && (count < 2 || count > 3))\n                q_next[i + j] = 1'b0;\n            else if (!q[i + j] && count == 3)\n                q_next[i + j] = 1'b1;\n            else\n                q_next[i + j] = q[i + j];\n        end\n    end\nend\n\nfunction [0:0] get_cell;\n    input [255:0] q;\n    input [7:0] row, col;\nbegin\n    get_cell = q[(row % 16) * 16 + (col % 16)];\nend\nendfunction\n\nendmodule"}
{"task_id": "lemmings3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n\n    // State encoding\n    localparam [3:0] WALK_LEFT = 4'd1,\n                     WALK_RIGHT = 4'd2,\n                     FALL = 4'd3,\n                     DIG = 4'd4;\n\n    reg [3:0] current_state, next_state;\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= WALK_LEFT;\n        else\n            current_state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            WALK_LEFT: begin\n                if (bump_right)\n                    next_state = WALK_RIGHT;\n                else if (ground && dig)\n                    next_state = DIG;\n                else if (!ground)\n                    next_state = FALL;\n                else\n                    next_state = WALK_LEFT;\n            end\n            WALK_RIGHT: begin\n                if (bump_left)\n                    next_state = WALK_LEFT;\n                else if (ground && dig)\n                    next_state = DIG;\n                else if (!ground)\n                    next_state = FALL;\n                else\n                    next_state = WALK_RIGHT;\n            end\n            FALL: begin\n                if (ground)\n                    next_state = current_state; // Stay in FALL if ground reappears\n                else if (ground && dig)\n                    next_state = DIG;\n                else\n                    next_state = FALL;\n            end\n            DIG: begin\n                if (!ground)\n                    next_state = FALL;\n                else if (ground && dig)\n                    next_state = DIG;\n                else\n                    next_state = current_state; // Stay in DIG\n            end\n            default: next_state = WALK_LEFT;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        walk_left = (current_state == WALK_LEFT);\n        walk_right = (current_state == WALK_RIGHT);\n        aaah = (current_state == FALL);\n        digging = (current_state == DIG);\n    end\n\nendmodule"}
{"task_id": "count_clock", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input ena,\n    output reg pm,\n    output reg [7:0] hh,\n    output reg [7:0] mm,\n    output reg [7:0] ss);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            pm <= 1'b0;\n            hh <= 8'd12;\n            mm <= 8'd0;\n            ss <= 8'd0;\n        end else if (ena) begin\n            if (ss == 8'd59) begin\n                ss <= 8'd0;\n                if (mm == 8'd59) begin\n                    mm <= 8'd0;\n                    if (hh == 8'd12) begin\n                        hh <= 8'd1;\n                        pm <= ~pm;\n                    end else begin\n                        hh <= hh + 1;\n                    end\n                end else begin\n                    mm <= mm + 1;\n                end\n            end else begin\n                ss <= ss + 1;\n            end\n        end\n    end\n\nendmodule"}
{"task_id": "lemmings2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    output walk_left,\n    output walk_right,\n    output aaah\n);\n    // States\n    localparam [1:0] WALK_LEFT  = 2'b00,\n                    WALK_RIGHT = 2'b01,\n                    FALL = 2'b10,\n                    IDLE = 2'b11;\n    \n    reg [1:0] current_state, next_state;\n    reg falling;\n\n    // State transition logic\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= WALK_LEFT;\n        else\n            current_state <= next_state;\n    end\n\n    always @(*) begin\n        case (current_state)\n            WALK_LEFT: begin\n                if (bump_left)\n                    next_state = WALK_RIGHT;\n                else if (bump_right)\n                    next_state = WALK_LEFT;\n                else if (!ground)\n                    next_state = FALL;\n                else\n                    next_state = current_state;\n            end\n            WALK_RIGHT: begin\n                if (bump_right)\n                    next_state = WALK_LEFT;\n                else if (bump_left)\n                    next_state = WALK_RIGHT;\n                else if (!ground)\n                    next_state = FALL;\n                else\n                    next_state = current_state;\n            end\n            FALL: begin\n                if (ground)\n                    next_state = current_state;\n                else if (bump_left || bump_right)\n                    next_state = FALL;\n                else\n                    next_state = current_state;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        walk_left = (current_state == WALK_LEFT);\n        walk_right = (current_state == WALK_RIGHT);\n        aaah = (current_state == FALL);\n    end\n\nendmodule"}
{"task_id": "countbcd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output [3:1] ena,\n    output reg [15:0] q\n);\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 16'b0;\n        else begin\n            if (q[3:0] == 4'b1001) begin\n                q[3:0] <= 4'b0000;\n                if (q[7:4] == 4'b1001) begin\n                    q[7:4] <= 4'b0000;\n                    if (q[11:8] == 4'b1001) begin\n                        q[11:8] <= 4'b0000;\n                        if (q[15:12] == 4'b1001)\n                            q[15:12] <= 4'b0000;\n                        else\n                            q[15:12] <= q[15:12] + 4'b0001;\n                    end\n                    else\n                        q[11:8] <= q[11:8] + 4'b0001;\n                end\n                else\n                    q[7:4] <= q[7:4] + 4'b0001;\n            end\n            else\n                q[3:0] <= q[3:0] + 4'b0001;\n        end\n    end\n    assign ena = {q[15:12] == 4'b1001, q[11:8] == 4'b1001, q[7:4] == 4'b1001};\nendmodule"}
{"task_id": "mux2to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] a,\n    input [99:0] b,\n    input sel,\n    output [99:0] out\n);\n    assign out = sel ? b : a;\nendmodule"}
{"task_id": "m2014_q6b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "module top_module(\n    input [3:1] y,\n    input w,\n    output reg Y2\n);\n    always @(*) begin\n        case(y)\n            3'b000: Y2 = w; // State A\n            3'b001: Y2 = w; // State B\n            3'b010: Y2 = w; // State C\n            3'b011: Y2 = ~w; // State D\n            3'b100: Y2 = w; // State E\n            3'b101: Y2 = ~w; // State F\n            default: Y2 = 1'bx; // Default case\n        endcase\n    end\nendmodule"}
{"task_id": "ringer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "module top_module(\n    input ring, \n    input vibrate_mode,\n    output ringer,\n    output motor\n);\n    assign motor = vibrate_mode;\n    assign ringer = ~vibrate_mode & ring;\nendmodule"}
{"task_id": "alwaysblock1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an AND gate using both an assign statement and a combinational always block. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out_assign,\n    output reg out_alwaysblock\n);\n\n    // Using assign statement\n    assign out_assign = a & b;\n\n    // Using combinational always block\n    always @(*) begin\n        out_alwaysblock = a & b;\n    end\n\nendmodule"}
{"task_id": "zero", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that always outputs a LOW.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput zero);\n", "completion": "module top_module(\n    output zero);\n    assign zero = 1'b0;\nendmodule"}
{"task_id": "circuit7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg q\n);\n\nalways @(posedge clk) begin\n    if (a)\n        q <= 0;\n    else\n        q <= 1;\nend\n\nendmodule"}
{"task_id": "ece241_2014_q5a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n\nreg state, next_state;\nlocalparam S_IDLE = 1'b0, S_CONVERT = 1'b1;\n\nalways @(posedge clk or posedge areset) begin\n    if (areset)\n        state <= S_IDLE;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case(state)\n        S_IDLE: next_state = (x == 1'b0) ? S_IDLE : S_CONVERT;\n        S_CONVERT: next_state = S_CONVERT;\n        default: next_state = S_IDLE;\n    endcase\nend\n\nalways @(*) begin\n    case(state)\n        S_IDLE: z = 1'b0;\n        S_CONVERT: z = ~x;\n        default: z = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "fsm3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n\n    parameter A = 2'b00;\n    parameter B = 2'b01;\n    parameter C = 2'b10;\n    parameter D = 2'b11;\n\n    reg [1:0] state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A;\n        endcase\n    end\n\n    assign out = (state == D);\n\nendmodule"}
{"task_id": "vector2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that reverses the byte order of a 32-bit vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [31:0] in,\n    output [31:0] out\n);\n    assign out = {in[7:0], in[15:8], in[23:16], in[31:24]};\nendmodule"}
{"task_id": "m2014_q4c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a simple D flip flop with active high synchronous reset (reset output to 0).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input r,\n    output logic q\n);\n    always @(posedge clk or posedge r) begin\n        if (r)\n            q <= 1'b0;  // Reset q to 0 when r is high\n        else\n            q <= d;    // Set q to d on the rising edge of clk\n    end\nendmodule"}
{"task_id": "mt2015_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the boolean function z = (x^y) & x.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n    \n    assign z = (x ^ y) & x;\n    \nendmodule"}
{"task_id": "shift18", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input ena,\n    input [1:0] amount,\n    input [63:0] data,\n    output reg [63:0] q\n);\n    always @(posedge clk) begin\n        if (load)\n            q <= data; // Load data when load is high\n        else if (ena) begin\n            case (amount)\n                2'b00: q <= {q[62:0], q[63]}; // Shift left by 1 bit\n                2'b01: q <= {q[55:0], 8'b0}; // Shift left by 8 bits\n                2'b10: q <= {q[63], q[63:1]}; // Arithmetic shift right by 1 bit\n                2'b11: q <= {q[63], 8'b0, q[55:8]}; // Arithmetic shift right by 8 bits\n                default: q <= q; // No change if amount is invalid\n            endcase\n        end\n    end\nendmodule"}
{"task_id": "ece241_2013_q8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input aresetn,\n    input x,\n    output reg z\n);\n\nreg [1:0] state, next_state;\nlocalparam S0 = 2'b00, S1 = 2'b01, S2 = 2'b10;\n\nalways @(posedge clk or negedge aresetn) begin\n    if (!aresetn)\n        state <= S0;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        S0: if (x) next_state = S1; else next_state = S0;\n        S1: if (x) next_state = S2; else next_state = S0;\n        S2: if (x) next_state = S1; else next_state = S0;\n        default: next_state = S0;\n    endcase\nend\n\nalways @(*) begin\n    case (state)\n        S0: z = 1'b0;\n        S1: z = 1'b0;\n        S2: z = 1'b1;\n        default: z = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n    parameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11, E = 2'b100, F = 2'b101;\n    reg [2:0] state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;  // Initialize to state A\n        else\n            state <= next_state;  // Update state\n    end\n\n    always @(*) begin\n        case (state)\n            A: next_state = w ? A : B;\n            B: next_state = w ? D : C;\n            C: next_state = w ? D : E;\n            D: next_state = w ? A : F;\n            E: next_state = w ? D : E;\n            F: next_state = w ? D : C;\n            default: next_state = A;  // Default case\n        endcase\n    end\n\n    assign z = (state == E);  // Output z is high when in state E\nendmodule"}
{"task_id": "fsm_ps2data", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output [23:0] out_bytes,\n    output done\n);\n    \n    // State encoding\n    localparam [1:0] SEARCHING = 2'b00,\n                     COLLECTING_BYTE1 = 2'b01,\n                     COLLECTING_BYTE2 = 2'b10,\n                     COLLECTING_BYTE3 = 2'b11;\n    \n    reg [1:0] state, next_state;\n    reg [23:0] message;\n    reg message_valid;\n    \n    // State transition logic\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= SEARCHING;\n        end else begin\n            state <= next_state;\n        end\n    end\n    \n    // Next state logic\n    always @(*) begin\n        next_state = state;\n        case (state)\n            SEARCHING: begin\n                if (in[3]) next_state = COLLECTING_BYTE1;\n            end\n            COLLECTING_BYTE1: begin\n                next_state = COLLECTING_BYTE2;\n            end\n            COLLECTING_BYTE2: begin\n                next_state = COLLECTING_BYTE3;\n            end\n            COLLECTING_BYTE3: begin\n                next_state = SEARCHING;\n            end\n        endcase\n    end\n    \n    // Output logic\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            message_valid <= 1'b0;\n            message <= 24'b0;\n        end else begin\n            case (state)\n                COLLECTING_BYTE1: begin\n                    message <= {in, 16'b0};\n                end\n                COLLECTING_BYTE2: begin\n                    message <= {message[23:8], in, 8'b0};\n                end\n                COLLECTING_BYTE3: begin\n                    message <= {message[23:16], in, 8'b0};\n                    message_valid <= 1'b1;\n                end\n                default: message_valid <= 1'b0;\n            endcase\n        end\n    end\n    \n    // Assign outputs\n    assign out_bytes = message_valid ? message : 24'hxxxxxxxx;\n    assign done = message_valid;\n    \nendmodule"}
{"task_id": "2012_q2b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\n\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "module top_module (\n    input [5:0] y,\n    input w,\n    output Y1,\n    output Y3\n);\n    assign Y1 = y[1] & w | y[0] & ~w | y[2] & ~w | y[3] & w | y[4] & ~w | y[5] & ~w;\n    assign Y3 = y[3] & w | y[1] & ~w | y[2] & w | y[4] & ~w | y[5] & w;\nendmodule"}
{"task_id": "vector0", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "module top_module(\n    input [2:0] vec, \n    output [2:0] outv,\n    output o2,\n    output o1,\n    output o0\n);\n    assign outv = vec; // Directly assign input to output vector\n    assign o2 = vec[2]; // Assign input bit 2 to o2\n    assign o1 = vec[1]; // Assign input bit 1 to o1\n    assign o0 = vec[0]; // Assign input bit 0 to o0\nendmodule"}
{"task_id": "kmap4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n    always @(*) begin\n        case({c,d,b,a})\n            4'b0000, 4'b0110, 4'b1001, 4'b1111: out = 1'b1;\n            default: out = 1'b0;\n        endcase\n    end\nendmodule"}
{"task_id": "vector1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "module top_module (\n    input [15:0] in,\n    output [7:0] out_hi,\n    output [7:0] out_lo\n);\n    assign out_hi = in[15:8];\n    assign out_lo = in[7:0];\nendmodule"}
{"task_id": "norgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = ~(a | b);\nendmodule"}
{"task_id": "alwaysblock2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "module top_module(\n    input clk,\n    input a, \n    input b,\n    output out_assign,\n    output reg out_always_comb,\n    output reg out_always_ff\n);\n    // Using assign statement\n    assign out_assign = a ^ b;\n\n    // Combinational always block\n    always @(*) begin\n        out_always_comb = a ^ b;\n    end\n\n    // Clocked always block\n    always @(posedge clk) begin\n        out_always_ff <= a ^ b;\n    end\nendmodule"}
{"task_id": "m2014_q6c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "module top_module (\n    input [6:1] y,\n    input w,\n    output Y2,\n    output Y4\n);\n\nwire a, b, c, d, e, f;\n\nassign a = y[1];\nassign b = y[2];\nassign c = y[3];\nassign d = y[4];\nassign e = y[5];\nassign f = y[6];\n\nassign Y2 = (a & ~w) | (b & w) | (c & ~w) | (d & w) | (e & w) | (f & ~w);\nassign Y4 = (a & w) | (b & ~w) | (c & w) | (d & ~w) | (e & ~w) | (f & w);\n\nendmodule"}
{"task_id": "mux256to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "module top_module (\n    input [255:0] in,\n    input [7:0] sel,\n    output out\n);\nassign out = in[sel];\nendmodule"}
{"task_id": "2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input w,\n    input R,\n    input E,\n    input L,\n    output reg Q\n);\n    \n    always @(posedge clk) begin\n        if (L)\n            Q <= R;  // Load R when L is asserted\n        else if (E)\n            Q <= w;  // Shift in w when E is asserted\n        else\n            Q <= Q;  // Hold Q otherwise\n    end\n\nendmodule"}
{"task_id": "ece241_2014_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    output z\n);\n    reg q1, q2, q3;\n\n    always @(posedge clk) begin\n        q1 <= x ^ q1;\n        q2 <= x & ~q2;\n        q3 <= x | ~q3;\n    end\n\n    assign z = ~(q1 ^ q2 ^ q3);\nendmodule"}
{"task_id": "circuit4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n    assign q = ~(a & b & c & d);\nendmodule"}
{"task_id": "rule110", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else\n            q <= {1'b0, q[510:0], 1'b0} + {1'b0, q[511:0], 1'b0} + {q[511:0], 1'b0};\n    end\n\nendmodule"}
{"task_id": "fsm3s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n    \n    // State encoding\n    localparam [1:0] A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n    \n    // State register\n    reg [1:0] state, next_state;\n    \n    // Next state logic\n    always @(*) begin\n        case(state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A; // Default case for safety\n        endcase\n    end\n    \n    // Output logic\n    assign out = (state == D) ? 1'b1 : 1'b0;\n    \n    // State register update\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A; // Reset to state A\n        else\n            state <= next_state;\n    end\n    \nendmodule"}
{"task_id": "circuit5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "module top_module (\n    input [3:0] a, \n    input [3:0] b, \n    input [3:0] c, \n    input [3:0] d,\n    input [3:0] e,\n    output reg [3:0] q\n);\nalways @(*) begin\n    case (c)\n        4'd0: q = b;\n        4'd1: q = e;\n        4'd2: q = a;\n        4'd3: q = d;\n        4'd4: q = 4'd15; // f\n        default: q = 4'd15; // f\n    endcase\nend\nendmodule"}
{"task_id": "bugs_mux2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFind the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input sel,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out\n);\n\n    always @(*) begin\n        out = sel ? b : a;\n    end\n\nendmodule"}
{"task_id": "mt2015_muxdff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "module top_module(\n    input clk,\n    input L,\n    input q_in,\n    input r_in,\n    output reg Q\n);\n    always @(posedge clk) begin\n        if (L) begin\n            Q <= r_in;\n        end else begin\n            Q <= q_in ^ r_in;\n        end\n    end\nendmodule\n\nmodule full_module (\n    input [2:0] r,\n    input L,\n    input clk,\n    output reg [2:0] q\n);\n    wire q0_in, q1_in, q2_in;\n    wire r0_in, r1_in, r2_in;\n\n    // Instantiate the submodules\n    top_module q0_submodule (\n        .clk(clk),\n        .L(L),\n        .q_in(q[0]),\n        .r_in(r[0]),\n        .Q(q0_in)\n    );\n    top_module q1_submodule (\n        .clk(clk),\n        .L(L),\n        .q_in(q[1]),\n        .r_in(r[1]),\n        .Q(q1_in)\n    );\n    top_module q2_submodule (\n        .clk(clk),\n        .L(L),\n        .q_in(q[2]),\n        .r_in(r[2]),\n        .Q(q2_in)\n    );\n\n    // Connect outputs\n    assign {q[2], q[1], q[0]} = {q2_in, q1_in, q0_in};\n\nendmodule"}
{"task_id": "edgecapture", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input [31:0] in,\n    output reg [31:0] out\n);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            out <= 32'b0;\n        else\n            out <= (in & ~in[31:0] >>> 1) | out;\n    end\n\nendmodule"}
{"task_id": "dff8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    output reg [7:0] q);\n\n    always @(posedge clk) begin\n        q <= d;\n    end\n\nendmodule"}
{"task_id": "ece241_2014_q1c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nAssume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [7:0] b,\n    output [7:0] s,\n    output overflow\n);\n    wire [8:0] sum;\n    assign {overflow, s} = a + b;\nendmodule"}
{"task_id": "review2015_fsmonehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n);\n\n    // State definitions\n    localparam S = 10'b0000000001;\n    localparam S1 = 10'b0000000010;\n    localparam S11 = 10'b0000000100;\n    localparam S110 = 10'b0000001000;\n    localparam B0 = 10'b0000010000;\n    localparam B1 = 10'b0000100000;\n    localparam B2 = 10'b0001000000;\n    localparam B3 = 10'b0010000000;\n    localparam Count = 10'b0100000000;\n    localparam Wait = 10'b1000000000;\n\n    // Next-state logic\n    assign B3_next = (state == B3);\n    assign S_next = (state == S) ? (d ? S1 : S) : 10'b0;\n    assign S1_next = (state == S1) ? (d ? S11 : S) : 10'b0;\n    assign Count_next = (state == Count) ? (!done_counting ? Count : Wait) : 10'b0;\n    assign Wait_next = (state == Wait) ? (ack ? S : Wait) : 10'b0;\n\n    // Output logic\n    assign done = (state == Wait);\n    assign counting = (state == Count);\n    assign shift_ena = (state == B0) | (state == B1) | (state == B2) | (state == B3);\n\nendmodule"}
{"task_id": "counter_2bc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 2'b01; // weakly not-taken\n        else if (train_valid) begin\n            if (train_taken)\n                state <= state + 1'b1; // increment\n            else\n                state <= state - 1'b1; // decrement\n        end\n    end\n    always @(*) begin\n        if (state > 2'b11) // saturate at max\n            state = 2'b11;\n        else if (state < 2'b00) // saturate at min\n            state = 2'b00;\n    end\nendmodule"}
{"task_id": "always_casez", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output reg [2:0] pos\n);\nalways @* begin\n    casez(in)\n        8'b00000001: pos = 3'd0;\n        8'b00000010: pos = 3'd1;\n        8'b00000100: pos = 3'd2;\n        8'b00001000: pos = 3'd3;\n        8'b00010000: pos = 3'd4;\n        8'b00100000: pos = 3'd5;\n        8'b01000000: pos = 3'd6;\n        8'b10000000: pos = 3'd7;\n        default: pos = 3'd0; // reset to 0 if no high bit is found\n    endcase\nend\n\nendmodule"}
{"task_id": "always_nolatches", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "module top_module (\n    input [15:0] scancode,\n    output reg left,\n    output reg down,\n    output reg right,\n    output reg up\n);\n\nalways @(*) begin\n    left = 1'b0;\n    down = 1'b0;\n    right = 1'b0;\n    up = 1'b0;\n\n    case(scancode)\n        16'hE06B: left = 1'b1;\n        16'hE072: down = 1'b1;\n        16'hE074: right = 1'b1;\n        16'hE075: up = 1'b1;\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4j", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 4-bit adder with full adders. The output sum should include the overflow bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "module top_module (\n    input [3:0] x,\n    input [4:0] y,\n    output [4:0] sum\n);\n    wire [3:0] carry;\n    wire overflow;\n\n    // Full adder for each bit\n    assign {sum, overflow} = x + y;\n\nendmodule"}
{"task_id": "history_shift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            predict_history <= 32'b0;\n        end else if (train_mispredicted) begin\n            predict_history <= {train_history, train_taken};\n        end else if (predict_valid) begin\n            predict_history <= {predict_history[30:0], predict_taken};\n        end\n    end\nendmodule"}
{"task_id": "wire_decl", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out,\n    output out_n );\n    \n    wire and1, and2;\n    \n    // First layer: AND gates\n    assign and1 = a & b;\n    assign and2 = c & d;\n    \n    // Second layer: OR gate\n    assign out = and1 | and2;\n    \n    // Inverted output\n    assign out_n = ~out;\n    \nendmodule"}
{"task_id": "dff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a single D flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q\n);\n    always @(posedge clk) begin\n        q <= d;\n    end\nendmodule"}
{"task_id": "ece241_2013_q12", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "module top_module (\n    input clk,\n    input enable,\n    input S,\n    input A,\n    input B,\n    input C,\n    output reg Z\n);\n\nreg [7:0] shift_reg;\n\nalways @(posedge clk) begin\n    if (enable)\n        shift_reg <= {shift_reg[6:0], S};\nend\n\nassign Z = shift_reg[7 - (A + 2*B + 4*C)];\n\nendmodule"}
{"task_id": "thermostat", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "module top_module(\n    input mode,\n    input too_cold, \n    input too_hot,\n    input fan_on,\n    output heater,\n    output aircon,\n    output fan\n);\n    \n    assign heater = mode & too_cold;\n    assign aircon = ~mode & too_hot;\n    assign fan = heater | aircon | fan_on;\n    \nendmodule"}
{"task_id": "ece241_2013_q2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out_sop,\n    output out_pos\n);\n    // Sum-of-Products (SOP) form\n    wire sop1, sop2, sop3;\n    assign sop1 = (~a & b & c & d); // 7\n    assign sop2 = (~a & ~b & ~c & ~d); // 2\n    assign sop3 = (~a & ~b & ~c & d); // 15\n    assign out_sop = sop1 | sop2 | sop3;\n\n    // Product-of-Sums (POS) form\n    wire pos1, pos2, pos3;\n    assign pos1 = ~((a & b & c & ~d) | (a & b & ~c & d) | (a & ~b & c & d) | (~a & b & c & ~d)); // 7\n    assign pos2 = ~((a & ~b & ~c & ~d) | (~a & b & ~c & ~d) | (~a & ~b & c & ~d) | (~a & ~b & ~c & d)); // 2\n    assign pos3 = ~((a & ~b & ~c & d) | (~a & ~b & ~c & ~d) | (~a & ~b & c & d) | (~a & b & ~c & ~d)); // 15\n    assign out_pos = pos1 & pos2 & pos3;\nendmodule"}
{"task_id": "lfsr32", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [31:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 32'h1;\n        else\n            q <= {q[30:0], ^{q[31], q[21], q[1], q[0]}};\n    end\n\nendmodule"}
{"task_id": "circuit3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n\nassign q = (a & b) | (c & d);\n\nendmodule"}
{"task_id": "7420", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d, \n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n\n    // NAND gate for output p1y\n    assign p1y = ~(p1a & p1b & p1c & p1d);\n    // NAND gate for output p2y\n    assign p2y = ~(p2a & p2b & p2c & p2d);\n\nendmodule"}
{"task_id": "popcount255", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input [254:0] in,\n    output reg [7:0] out\n);\n    // Initialize out to 0\n    always @(*) begin\n        out = 0;\n        // Count the number of 1's in the input\n        for (int i = 0; i < 255; i = i + 1) begin\n            out = out + in[i];\n        end\n    end\nendmodule"}
{"task_id": "gatesv", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output [2:0] out_both,\n    output [3:1] out_any,\n    output [3:0] out_different\n);\n    assign out_both = {in[2] & in[3], in[1] & in[2], in[0] & in[1]};\n    assign out_any = {in[0] | in[3], in[3] | in[2], in[2] | in[1], in[1] | in[0]};\n    assign out_different = {in[3] ^ in[0], in[0] ^ in[1], in[1] ^ in[2], in[2] ^ in[3]};\nendmodule"}
{"task_id": "circuit6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "module top_module (\n    input [2:0] a,\n    output reg [15:0] q\n);\n\nalways @(*) begin\n    case(a)\n        3'b000: q = 16'h1232;\n        3'b001: q = 16'hAEE0;\n        3'b010: q = 16'h27D4;\n        3'b011: q = 16'h5A0E;\n        3'b100: q = 16'h2066;\n        3'b101: q = 16'h64CE;\n        3'b110: q = 16'hC526;\n        3'b111: q = 16'h2F19;\n        default: q = 16'h0000;\n    endcase\nend\n\nendmodule"}
{"task_id": "countslow", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input slowena,\n    input reset,\n    output reg [3:0] q\n);\n    always @(posedge clk) begin\n        if (reset)\n            q <= 4'b0000;  // Reset to 0\n        else if (slowena)\n            q <= (q == 4'b1001) ? 4'b0000 : q + 1'b1;  // Increment if not at 9\n    end\nendmodule"}
{"task_id": "m2014_q4f", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    // in2 is inverted before being connected to the AND gate\n    logic in2_inv;\n    assign in2_inv = ~in2;\n    assign out = in1 & in2_inv;\nendmodule"}
{"task_id": "m2014_q4h", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module assigns the output port to the same value as the input port combinationally.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = in;\nendmodule"}
{"task_id": "fsm1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n    \n    enum {B, A} state, next_state;\n    \n    // State registers\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= B;\n        else\n            state <= next_state;\n    end\n    \n    // Next state logic\n    always @(*) begin\n        case (state)\n            B: next_state = in ? B : A;\n            A: next_state = in ? A : B;\n            default: next_state = B;\n        endcase\n    end\n    \n    // Output logic\n    always @(*) begin\n        case (state)\n            B: out = 1'b1;\n            A: out = 1'b0;\n            default: out = 1'b1;\n        endcase\n    end\n    \nendmodule"}
{"task_id": "dualedge", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q);\n\n    // Use two always blocks to trigger on both edges\n    always @(posedge clk) begin\n        q <= d;  // Update on positive edge\n    end\n\n    always @(negedge clk) begin\n        q <= d;  // Update on negative edge\n    end\n\nendmodule"}
{"task_id": "xnorgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an XNOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = ~(a ^ b); // XNOR operation\nendmodule"}
{"task_id": "mt2015_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nModule A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n\n    // Instantiate submodules A and B\n    wire a1_out, b1_out, a2_out, b2_out;\n    \n    A a1(.x(x), .y(y), .z(a1_out));\n    B b1(.x(x), .y(y), .z(b1_out));\n    A a2(.x(x), .y(y), .z(a2_out));\n    B b2(.x(x), .y(y), .z(b2_out));\n    \n    // Connect outputs to gates\n    wire or_out, and_out;\n    \n    or #1 or1(a1_out, b1_out, or_out);\n    and #1 and1(a2_out, b2_out, and_out);\n    \n    // Final XOR gate\n    xor #1 xor1(or_out, and_out, z);\n    \nendmodule\n\nmodule A(\n    input x,\n    input y,\n    output z);\n    \n    assign z = (x ^ y) & x;\n\nendmodule\n\nmodule B(\n    input x,\n    input y,\n    output z);\n    \n    // Implement the waveform behavior using a case statement\n    always @(x or y) begin\n        case({x, y})\n            2'b00: z = 1;\n            2'b01, 2'b10: z = 0;\n            2'b11: z = 1;\n        endcase\n    end\n\nendmodule"}
{"task_id": "rotate100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [1:0] ena,\n    input [99:0] data,\n    output reg [99:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else if (ena == 2'b01)\n            q <= {q[0], q[99:1]};\n        else if (ena == 2'b10)\n            q <= {q[98:0], q[99]};\n    end\n\nendmodule"}
{"task_id": "review2015_count1k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [9:0] q);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 10'd0;  // Reset counter to 0\n        else if (q < 10'd999)\n            q <= q + 1'b1;  // Increment counter\n        else\n            q <= 10'd0;  // Reset counter to 0 after reaching 999\n    end\n\nendmodule"}
{"task_id": "notgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOT gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = ~in;\nendmodule"}
{"task_id": "fsm_onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "module top_module (\n    input in,\n    input [9:0] state,\n    output [9:0] next_state,\n    output out1,\n    output out2);\n\n    // Next state logic\n    assign next_state = (state == 10'b1000000000) ? {10{in}} :\n                        (state == 10'b0100000000) ? {10{in}} |\n                                                   10'b0010000000 :\n                        (state == 10'b0010000000) ? {10{in}} |\n                                                   10'b0001000000 :\n                        (state == 10'b0001000000) ? {10{in}} |\n                                                   10'b0000100000 :\n                        (state == 10'b0000100000) ? {10{in}} |\n                                                   10'b0000010000 :\n                        (state == 10'b0000010000) ? {10{in}} |\n                                                   10'b0000001000 :\n                        (state == 10'b0000001000) ? {10{in}} |\n                                                   10'b0000000100 :\n                        (state == 10'b0000000100) ? {10{in}} |\n                                                   10'b0000000010 :\n                        (state == 10'b0000000010) ? {10{in}} |\n                                                   10'b0000000001 :\n                                                   10'b1000000000;\n\n    // Output logic\n    assign {out1, out2} = (state == 10'b0000010000) ? 2'b01 :\n                          (state == 10'b0000100000) ? 2'b10 :\n                          (state == 10'b1000000000) ? 2'b00 :\n                          2'b00;\n\nendmodule"}
{"task_id": "ece241_2013_q7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    output reg Q\n);\n    always @(posedge clk) begin\n        case ({j, k})\n            2'b00: Q <= Q;   // Hold\n            2'b01: Q <= 1'b0;  // Reset\n            2'b10: Q <= 1'b1;  // Set\n            2'b11: Q <= ~Q;   // Toggle\n            default: Q <= Q;  // Hold\n        endcase\n    end\nendmodule"}
{"task_id": "popcount3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "module top_module (\n    input [2:0] in,\n    output [1:0] out\n);\n    assign out = in[0] + in[1] + in[2];\nendmodule"}
{"task_id": "vector5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    input e,\n    output [24:0] out\n);\n\nassign out = {~a^a, ~a^b, ~a^c, ~a^d, ~a^e,\n               ~b^a, ~b^b, ~b^c, ~b^d, ~b^e,\n               ~c^a, ~c^b, ~c^c, ~c^d, ~c^e,\n               ~d^a, ~d^b, ~d^c, ~d^d, ~d^e,\n               ~e^a, ~e^b, ~e^c, ~e^d, ~e^e};\n\nendmodule"}
{"task_id": "lemmings1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    output walk_left,\n    output walk_right\n);\n    \n    // State encoding\n    localparam LEFT = 2'b00;  // Walk left\n    localparam RIGHT = 2'b01; // Walk right\n    \n    reg [1:0] state, next_state;\n    \n    // State transition logic\n    always @(*) begin\n        case(state)\n            LEFT: next_state = bump_left ? RIGHT : LEFT;\n            RIGHT: next_state = bump_right ? LEFT : RIGHT;\n            default: next_state = LEFT;\n        endcase\n    end\n    \n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= LEFT;\n        else\n            state <= next_state;\n    end\n    \n    // Output logic\n    assign walk_left = (state == LEFT);\n    assign walk_right = (state == RIGHT);\n    \nendmodule"}
{"task_id": "circuit1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    output q\n);\n    assign q = a & b;\nendmodule"}
{"task_id": "7458", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d,\n    input p1e,\n    input p1f,\n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n    wire and1, and2, and3, and4;\n\n    assign and1 = p1a & p1b & p1c;\n    assign and2 = p1d & p1e & p1f;\n    assign and3 = p2a & p2b;\n    assign and4 = p2c & p2d;\n\n    assign p1y = and1 | and2;\n    assign p2y = and3 | and4;\n\nendmodule"}
{"task_id": "2014_q3c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    input [2:0] y,\n    output reg Y0,\n    output reg z\n);\n\nreg [2:0] Y;\n\nalways @(posedge clk) begin\n    case(y)\n        3'b000: Y <= x ? 3'b001 : 3'b000;\n        3'b001: Y <= x ? 3'b100 : 3'b001;\n        3'b010: Y <= x ? 3'b001 : 3'b010;\n        3'b011: Y <= x ? 3'b010 : 3'b001;\n        3'b100: Y <= x ? 3'b100 : 3'b011;\n        default: Y <= 3'b000;\n    endcase\nend\n\nalways @(posedge clk) begin\n    case(y)\n        3'b001, 3'b010: z <= 1'b0;\n        3'b011, 3'b100: z <= 1'b1;\n        default: z <= 1'b0;\n    endcase\nend\n\nalways @(posedge clk) begin\n    Y0 <= Y[0];\nend\n\nendmodule"}
{"task_id": "m2014_q4e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 2-input NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    \n    assign out = ~(in1 | in2);\n    \nendmodule"}
{"task_id": "wire4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    output w,\n    output x,\n    output y,\n    output z\n);\n    // Connect inputs to outputs\n    assign w = a;\n    assign x = b;\n    assign y = b;\n    assign z = c;\nendmodule"}
{"task_id": "m2014_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input ar,\n    output logic q\n);\n    always @(posedge clk or posedge ar) begin\n        if (ar)\n            q <= 1'b0;  // Asynchronous reset\n        else\n            q <= d;    // Data input on clock edge\n    end\nendmodule"}
{"task_id": "always_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "module top_module (\n    input [2:0] sel,\n    input [3:0] data0,\n    input [3:0] data1,\n    input [3:0] data2,\n    input [3:0] data3,\n    input [3:0] data4,\n    input [3:0] data5,\n    output reg [3:0] out\n);\n    always @(*) begin\n        case(sel)\n            3'b000: out = data0;\n            3'b001: out = data1;\n            3'b010: out = data2;\n            3'b011: out = data3;\n            3'b100: out = data4;\n            3'b101: out = data5;\n            default: out = 4'b0000;\n        endcase\n    end\nendmodule"}
{"task_id": "timer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "module top_module(\n    input clk, \n    input load, \n    input [9:0] data, \n    output tc\n);\n    reg [9:0] counter;\n\n    always @(posedge clk) begin\n        if (load) \n            counter <= data;\n        else if (counter != 0) \n            counter <= counter - 1'b1;\n    end\n\n    assign tc = (counter == 10'd0);\nendmodule"}
{"task_id": "review2015_fsmseq", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg start_shifting);\n    \n    reg [3:0] state, next_state;\n    \n    enum logic [3:0] {S0, S1, S2, S3, S4} states;\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= S0;\n        else\n            state <= next_state;\n    end\n    \n    always @(*) begin\n        case (state)\n            S0: next_state = data ? S1 : S0;\n            S1: next_state = data ? S0 : S2;\n            S2: next_state = data ? S3 : S0;\n            S3: next_state = data ? S4 : S0;\n            S4: next_state = S3;\n            default: next_state = S0;\n        endcase\n    end\n    \n    always @(*) begin\n        if (state == S4)\n            start_shifting = 1'b1;\n        else\n            start_shifting = 1'b0;\n    end\n    \nendmodule"}
{"task_id": "dff8r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 8'b0;\n        else\n            q <= d;\n    end\nendmodule"}
{"task_id": "edgedetect2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] anyedge);\n\n    always @(posedge clk) begin\n        anyedge <= (in != in[1:0]); // Detect rising edge on each bit\n    end\n\nendmodule"}
{"task_id": "count1to10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nMake a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'd1; // Reset to 1\n        else if (q == 4'd10)\n            q <= 4'd1; // Wrap around to 1\n        else\n            q <= q + 1; // Increment counter\n    end\n\nendmodule"}
{"task_id": "circuit9", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg [2:0] q\n);\n\n    always @(posedge clk) begin\n        if (a) begin\n            q <= 4; // Set q to 4 when a is high\n        end else begin\n            if (q == 4) begin\n                q <= 5; // Increment q from 4 to 5 when a is low\n            end else if (q == 5) begin\n                q <= 6; // Increment q from 5 to 6 when a is low\n            end else if (q == 6) begin\n                q <= 0; // Reset q to 0 when a is low\n            end else if (q == 0) begin\n                q <= 1; // Increment q from 0 to 1 when a is low\n            end\n        end\n    end\n\nendmodule"}
{"task_id": "lfsr5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [4:0] q);\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        q <= 5'b00001; // Active-high reset to 1\n    else\n        q <= {q[3:0], q[4] ^ q[2]}; // Galois LFSR with taps at bit 5 and 3\nend\n\nendmodule"}
{"task_id": "bugs_addsubz", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "module top_module (\n    input do_sub,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out,\n    output reg result_is_zero\n);\n    always @(*) begin\n        case (do_sub)\n            0: out = a + b;\n            1: out = a - b;\n            default: out = 0; // Added default case for completeness\n        endcase\n\n        result_is_zero = (out == 8'b0); // Corrected zero detection\n    end\nendmodule"}
{"task_id": "m2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n    \n    // Implementing the function f using the Karnaugh map\n    assign f = ~(x[4] & x[1]) | (x[4] & x[3] & x[2]) | (x[4] & ~x[3] & ~x[1]);\n    \nendmodule"}
{"task_id": "bugs_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "module top_module (\n    input [7:0] code,\n    output reg [3:0] out,\n    output reg valid\n);\n\nalways @(*) begin\n    case(code)\n        8'h45: out = 4'd0;\n        8'h16: out = 4'd1;\n        8'h1e: out = 4'd2;\n        8'h26: out = 4'd3;\n        8'h25: out = 4'd4;\n        8'h2e: out = 4'd5;\n        8'h36: out = 4'd6;\n        8'h3d: out = 4'd7;\n        8'h3e: out = 4'd8;\n        8'h46: out = 4'd9;\n        default: begin out = 4'd0; valid = 1'b0; end\n    endcase\n    valid = (out != 4'd0);\nend\n\nendmodule"}
{"task_id": "vectorr", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven an 8-bit input vector [7:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [7:0] out\n);\n    assign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\nendmodule"}
{"task_id": "kmap3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n\nalways @(*) begin\n    case({c, b, a})\n        3'b000, 3'b001, 3'b010: out = 1'b0;\n        3'b011, 3'b100: out = 1'b1;\n        3'b101, 3'b110, 3'b111: out = 1'b1;\n        default: out = 1'bx; // Handle don't-care case\n    endcase\nend\n\nendmodule"}
{"task_id": "review2015_shiftcount", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input shift_ena,\n    input count_ena,\n    input data,\n    output reg [3:0] q\n);\n    always @(posedge clk) begin\n        if (shift_ena)\n            q <= {data, q[3:1]};\n        else if (count_ena)\n            q <= q - 1;\n    end\nendmodule"}
{"task_id": "wire", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with one input and one output that behaves like a wire.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out);\n    \n    assign out = in;\n    \nendmodule"}
{"task_id": "review2015_fsmshift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output shift_ena);\n    \n    reg [1:0] count;\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            count <= 2'b00;\n        else if (count == 2'b11)\n            count <= 2'b00;\n        else\n            count <= count + 1'b1;\n    end\n    \n    assign shift_ena = (count < 2'b10);\n\nendmodule"}
{"task_id": "count15", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'b0000;\n        else\n            q <= q + 1'b1;\n    end\n    \nendmodule"}
{"task_id": "always_if", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel_b1,\n    input sel_b2,\n    output out_assign,\n    output reg out_always\n);\n\n    // Using assign statement\n    assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\n    // Using procedural if statement\n    always @(*) begin\n        if (sel_b1 & sel_b2)\n            out_always = b;\n        else\n            out_always = a;\n    end\n\nendmodule"}
{"task_id": "kmap1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    input c,\n    output out\n);\n    \n    assign out = ~a | b | c;\n\nendmodule"}
{"task_id": "2013_q2afsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input [3:1] r,\n    output [3:1] g\n);\n\n    // State encoding\n    localparam A = 3'b000;\n    localparam B = 3'b001;\n    localparam C = 3'b010;\n    localparam D = 3'b011;\n\n    reg [2:0] state, next_state;\n\n    // State register\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = r[1] ? B : r[2] ? C : r[3] ? D : A;\n            B: next_state = r[1] ? B : A;\n            C: next_state = r[2] ? C : A;\n            D: next_state = A;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        g[1] = (state == B);\n        g[2] = (state == C);\n        g[3] = (state == D);\n    end\n\nendmodule"}
{"task_id": "count10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'b0000; // Reset to 0\n        else if (q == 4'b1001) // If counter reaches 9\n            q <= 4'b0000; // Reset to 0\n        else\n            q <= q + 1'b1; // Increment counter\n    end\nendmodule"}
{"task_id": "fsm_ps2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output done\n);\n    reg [1:0] state, next_state;\n    reg [2:0] byte_cnt;\n    reg done_reg;\n\n    // State encoding: 00 - Search, 01 - Byte1, 10 - Byte2, 11 - Byte3\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= 2'b00;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            2'b00: next_state = in[3] ? 2'b01 : 2'b00; // Search for byte 1\n            2'b01: next_state = 2'b10; // Move to byte 2\n            2'b10: next_state = 2'b11; // Move to byte 3\n            2'b11: next_state = 2'b00; // Back to search after byte 3\n            default: next_state = 2'b00;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            byte_cnt <= 3'd0;\n            done_reg <= 1'b0;\n        end else begin\n            case (state)\n                2'b00: begin\n                    byte_cnt <= 3'd0;\n                    done_reg <= 1'b0;\n                end\n                2'b01: byte_cnt <= 3'd1;\n                2'b10: byte_cnt <= 3'd2;\n                2'b11: begin\n                    byte_cnt <= 3'd0;\n                    done_reg <= 1'b1; // Signal done after byte 3\n                end\n                default: byte_cnt <= 3'd0;\n            endcase\n        end\n    end\n\n    assign done = done_reg;\n\nendmodule"}
{"task_id": "mux2to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel,\n    output out\n);\n    assign out = sel ? b : a;\nendmodule"}
{"task_id": "gates4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n  assign out_and = &in;       // 4-input AND gate\n  assign out_or = |in;        // 4-input OR gate\n  assign out_xor = ^in;       // 4-input XOR gate\nendmodule"}
{"task_id": "2014_q3bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input x,\n    output reg z\n);\n    reg [2:0] y;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            y <= 3'b000;\n            z <= 1'b0;\n        end else begin\n            case (y)\n                3'b000: if (x) y <= 3'b001; else y <= 3'b000;\n                3'b001: if (x) y <= 3'b100; else y <= 3'b001;\n                3'b010: if (x) y <= 3'b001; else y <= 3'b010;\n                3'b011: if (x) y <= 3'b100; else y <= 3'b010;\n                3'b100: if (x) y <= 3'b100; else y <= 3'b011;\n                default: y <= 3'b000;\n            endcase\n            case (y)\n                3'b001, 3'b100: z <= 1'b1;\n                default: z <= 1'b0;\n            endcase\n        end\n    end\nendmodule"}
{"task_id": "2013_q2bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input x,\n    input y,\n    output f,\n    output g\n);\n\nreg [1:0] state, next_state;\nreg [2:0] x_seq;\n\nalways @(posedge clk or negedge resetn) begin\n    if (!resetn) begin\n        state <= 2'b00;\n        x_seq <= 3'b000;\n        f <= 1'b0;\n        g <= 1'b0;\n    end else begin\n        state <= next_state;\n        x_seq <= {x_seq[1:0], x};\n        f <= (state == 2'b01) ? 1'b1 : 1'b0;\n        g <= (state == 2'b10) ? 1'b1 : ((state == 2'b11) ? 1'b0 : g);\n    end\nend\n\nalways @(*) begin\n    case (state)\n        2'b00: next_state = (resetn) ? 2'b01 : 2'b00;\n        2'b01: next_state = (x_seq == 3'b101) ? 2'b10 : 2'b01;\n        2'b10: next_state = (y) ? 2'b11 : 2'b10;\n        2'b11: next_state = 2'b11;\n        default: next_state = 2'b00;\n    endcase\nend\n\nendmodule"}
{"task_id": "dff8p", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q\n);\n\nalways @(negedge clk) begin\n    if (reset)\n        q <= 8'h34;  // Reset to 0x34\n    else\n        q <= d;     // Load input d\nend\n\nendmodule"}
{"task_id": "reduction", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nParity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output parity\n);\n    assign parity = ^in;\nendmodule"}
{"task_id": "fsm3comb", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [1:0] state,\n    output reg [1:0] next_state,\n    output out\n);\n    always @(*) begin\n        case(state)\n            2'b00: begin\n                next_state = in ? 2'b01 : 2'b00;\n                out = 1'b0;\n            end\n            2'b01: begin\n                next_state = in ? 2'b01 : 2'b10;\n                out = 1'b0;\n            end\n            2'b10: begin\n                next_state = in ? 2'b11 : 2'b00;\n                out = 1'b0;\n            end\n            2'b11: begin\n                next_state = in ? 2'b10 : 2'b01;\n                out = 1'b1;\n            end\n            default: begin\n                next_state = 2'b00;\n                out = 1'b0;\n            end\n        endcase\n    end\nendmodule"}
{"task_id": "mt2015_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n\n    assign z = ~x & y;\n\nendmodule"}
{"task_id": "2012_q2fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n    \n    // State encoding\n    localparam A = 2'b00;\n    localparam B = 2'b01;\n    localparam C = 2'b10;\n    localparam D = 2'b11;\n    localparam E = 2'b00;\n    localparam F = 2'b01;\n    \n    // State register\n    reg [1:0] state, next_state;\n    \n    // Next state logic and output logic\n    always @(*) begin\n        case (state)\n            A: next_state = w ? B : A;\n            B: next_state = w ? C : D;\n            C: next_state = w ? E : D;\n            D: next_state = w ? F : A;\n            E: next_state = w ? E : D;\n            F: next_state = w ? C : D;\n            default: next_state = A;\n        endcase\n    end\n    \n    // State flip-flops\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n    \n    // Output logic\n    assign z = (state == E);\n    \nendmodule"}
{"task_id": "dff16e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input resetn,\n    input [1:0] byteena,\n    input [15:0] d,\n    output reg [15:0] q);\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            q <= 16'b0;\n        else begin\n            if (byteena[1])\n                q[15:8] <= d[15:8];\n            if (byteena[0])\n                q[7:0] <= d[7:0];\n        end\n    end\n\nendmodule"}
{"task_id": "edgedetect", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] pedge);\n\n    always @(posedge clk) begin\n        pege <= in & (~in[7:0] >> 1);\n    end\n\nendmodule"}
{"task_id": "circuit8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "module top_module (\n    input clock,\n    input a, \n    output reg p,\n    output reg q\n);\n\nalways @(posedge clock) begin\n    if (a) begin\n        p <= ~p;  // Toggle p when a is high\n        q <= 1'b1;  // Set q to 1\n    end else begin\n        q <= 1'b0;  // Set q to 0\n    end\nend\n\nendmodule"}
{"task_id": "rule90", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q\n);\nalways @(posedge clk) begin\n    if (load)\n        q <= data;\n    else\n        q <= {q[509:0], ^{1'b0, q[0], q[1]}, ^{q[510:0], 1'b0}};\nend\nendmodule"}
{"task_id": "mt2015_eq2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "module top_module(\n    input [1:0] A,\n    input [1:0] B,\n    output z\n);\n    assign z = (A == B);\nendmodule"}
{"task_id": "gatesv100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output [98:0] out_both,\n    output [99:1] out_any,\n    output [99:0] out_different\n);\n\ngenvar i;\ngenerate\n    for (i = 0; i < 99; i++) begin : both_loop\n        assign out_both[i] = in[i] & in[i+1];\n    end\n    for (i = 1; i <= 99; i++) begin : any_loop\n        assign out_any[i] = in[i] | in[i-1];\n    end\n    for (i = 0; i < 100; i++) begin : different_loop\n        assign out_different[i] = in[i] != in[(i+1) % 100];\n    end\nendgenerate\n\nendmodule"}
{"task_id": "m2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D latch using an always block.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input d,\n    input ena,\n    output logic q\n);\n    always @(posedge ena) begin\n        q <= d;\n    end\nendmodule"}
{"task_id": "mux256to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "module top_module (\n    input [1023:0] in,\n    input [7:0] sel,\n    output [3:0] out\n);\n    assign out = in[((sel*4)+3):((sel*4))];\nendmodule"}
{"task_id": "mux9to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "module top_module (\n    input [15:0] a,\n    input [15:0] b,\n    input [15:0] c,\n    input [15:0] d,\n    input [15:0] e,\n    input [15:0] f,\n    input [15:0] g,\n    input [15:0] h,\n    input [15:0] i,\n    input [3:0] sel,\n    output logic [15:0] out\n);\n    always @(*) begin\n        case (sel)\n            4'd0: out = a;\n            4'd1: out = b;\n            4'd2: out = c;\n            4'd3: out = d;\n            4'd4: out = e;\n            4'd5: out = f;\n            4'd6: out = g;\n            4'd7: out = h;\n            4'd8: out = i;\n            default: out = 16'b1; // Unused cases\n        endcase\n    end\nendmodule"}
{"task_id": "vectorgates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "module top_module(\n    input [2:0] a, \n    input [2:0] b, \n    output [2:0] out_or_bitwise,\n    output out_or_logical,\n    output [5:0] out_not\n);\n    // Bitwise OR of a and b\n    assign out_or_bitwise = a | b;\n    // Logical OR of a and b\n    assign out_or_logical = |a | |b;\n    // Inverse of b in upper half of out_not\n    assign out_not[5:3] = ~b;\n    // Inverse of a in lower half of out_not\n    assign out_not[2:0] = ~a;\nendmodule"}
{"task_id": "fsm3onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [3:0] state,\n    output reg [3:0] next_state,\n    output out\n);\n    always @(*) begin\n        case(state)\n            4'b0001: next_state = in ? 4'b0010 : 4'b0001;\n            4'b0010: next_state = in ? 4'b0010 : 4'b0100;\n            4'b0100: next_state = in ? 4'b1000 : 4'b0001;\n            4'b1000: next_state = in ? 4'b0100 : 4'b0010;\n            default: next_state = 4'b0001;\n        endcase\n    end\n\n    always @(*) begin\n        case(state)\n            4'b1000: out = 1'b1;\n            default: out = 1'b0;\n        endcase\n    end\nendmodule"}
{"task_id": "conditional", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [7:0] b,\n    input [7:0] c,\n    input [7:0] d,\n    output reg [7:0] min\n);\n    always @* begin\n        min = (a < b) ? a : b;\n        min = (min < c) ? min : c;\n        min = (min < d) ? min : d;\n    end\nendmodule"}
{"task_id": "gates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output out_and,\n    output out_or,\n    output out_xor,\n    output out_nand,\n    output out_nor,\n    output out_xnor,\n    output out_anotb\n);\n\n    assign out_and = a & b;\n    assign out_or = a | b;\n    assign out_xor = a ^ b;\n    assign out_nand = ~(a & b);\n    assign out_nor = ~(a | b);\n    assign out_xnor = ~(a ^ b);\n    assign out_anotb = a & ~b;\n\nendmodule"}
{"task_id": "kmap2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output out\n);\n    \n    assign out = ~(a & ~b & ~c & d) | (a & ~b & c & ~d) | (a & b & ~c & d) | (a & b & c & ~d) | (b & c & d) | (~a & b & ~c & d) | (~a & ~b & c & d);\n\nendmodule"}
{"task_id": "2014_q3fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input s,\n    input w,\n    output reg z\n);\n    // State encoding\n    localparam A = 2'b00;\n    localparam B1 = 2'b01;\n    localparam B2 = 2'b10;\n    localparam B3 = 2'b11;\n\n    reg [1:0] state, next_state;\n\n    // State register\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            A:  next_state = (s == 1) ? B1 : A;\n            B1: next_state = B2;\n            B2: next_state = B3;\n            B3: next_state = A;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            z <= 1'b0;\n        else if (state == B3)\n            z <= (w == 1) ? 1'b1 : 1'b0;\n    end\nendmodule"}
{"task_id": "vector4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nOne common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [31:0] out\n);\n    assign out = {{24{in[7]}}, in};\nendmodule"}
{"task_id": "m2014_q4k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a shift register with four D flops. Reset is active-low synchronous resettable.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input in,\n    output out\n);\n    \n    reg [3:0] shift_reg;\n    \n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            shift_reg <= 4'b0000;\n        else\n            shift_reg <= {shift_reg[2:0], in};\n    end\n\n    assign out = shift_reg[3];\n    \nendmodule"}
{"task_id": "always_case2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output reg [1:0] pos\n);\n    always @(*) begin\n        casez (in)\n            4'b0001: pos = 2'd0;\n            4'b001x: pos = 2'd1;\n            4'b01xx: pos = 2'd2;\n            4'b1xxx: pos = 2'd3;\n            default: pos = 2'd0;\n        endcase\n    end\nendmodule"}
{"task_id": "fsm2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input areset,\n    output out\n);\n    reg [1:0] state, next_state;\n\n    // State transition logic\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 2'b00; // OFF state\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            2'b00: next_state = j ? 2'b01 : 2'b00; // OFF to ON or OFF\n            2'b01: next_state = k ? 2'b00 : 2'b01; // ON to OFF or ON\n            default: next_state = 2'b00; // Default to OFF\n        endcase\n    end\n\n    // Output logic\n    assign out = state[1]; // Output is the second bit of the state\n\nendmodule"}
{"task_id": "m2014_q4i", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 0 (or logic low).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput out);\n", "completion": "module top_module(\n    output out\n);\n    assign out = 1'b0;\nendmodule"}
{"task_id": "step_one", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 1 (or logic high).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput one);\n", "completion": "module top_module(\n    output one);\n    assign one = 1'b1;\nendmodule"}
{"task_id": "vector100r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven a 100-bit input vector [99:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output reg [99:0] out\n);\n    always @(*) begin\n        out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7], in[8], in[9],\n               in[10], in[11], in[12], in[13], in[14], in[15], in[16], in[17], in[18], in[19],\n               in[20], in[21], in[22], in[23], in[24], in[25], in[26], in[27], in[28], in[29],\n               in[30], in[31], in[32], in[33], in[34], in[35], in[36], in[37], in[38], in[39],\n               in[40], in[41], in[42], in[43], in[44], in[45], in[46], in[47], in[48], in[49],\n               in[50], in[51], in[52], in[53], in[54], in[55], in[56], in[57], in[58], in[59],\n               in[60], in[61], in[62], in[63], in[64], in[65], in[66], in[67], in[68], in[69],\n               in[70], in[71], in[72], in[73], in[74], in[75], in[76], in[77], in[78], in[79],\n               in[80], in[81], in[82], in[83], in[84], in[85], in[86], in[87], in[88], in[89],\n               in[90], in[91], in[92], in[93], in[94], in[95], in[96], in[97], in[98], in[99]};\n    end\nendmodule"}
{"task_id": "m2014_q4d", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    output logic out\n);\n\n    logic q;\n\n    always_ff @(posedge clk) begin\n        q <= in ^ out;\n    end\n\n    assign out = q;\n\nendmodule"}
{"task_id": "shift4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input load,\n    input ena,\n    input [3:0] data,\n    output reg [3:0] q);\n\nalways @(posedge clk or posedge areset) begin\n    if (areset)\n        q <= 4'b0000;\n    else if (load)\n        q <= data;\n    else if (ena)\n        q <= {q[2:0], 1'b0};\nend\n\nendmodule"}
{"task_id": "truthtable1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "module top_module (\n    input x3,\n    input x2,\n    input x1,\n    output f\n);\n    assign f = (x2 & ~x1) | (x3 & x1);\nendmodule"}
{"task_id": "dff8ar", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input areset,\n    output reg [7:0] q);\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            q <= 8'b0;\n        else\n            q <= d;\n    end\nendmodule"}
{"task_id": "gates100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and = &in; // 100-input AND gate\n    assign out_or = |in;  // 100-input OR gate\n    assign out_xor = ^in; // 100-input XOR gate\nendmodule"}
{"task_id": "hadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output sum,\n    output cout\n);\n    assign sum = a ^ b;  // Sum is the XOR of a and b\n    assign cout = a & b; // Carry is the AND of a and b\nendmodule"}
{"task_id": "always_if2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "module top_module (\n    input cpu_overheated,\n    output reg shut_off_computer,\n    input arrived,\n    input gas_tank_empty,\n    output reg keep_driving\n);\n    always @(*) begin\n        // Set shut_off_computer to 1 if CPU overheated, otherwise 0\n        shut_off_computer = cpu_overheated;\n    end\n\n    always @(*) begin\n        // Set keep_driving to 1 if not arrived and gas_tank is not empty, otherwise 0\n        keep_driving = (~arrived) && (~gas_tank_empty);\n    end\n\nendmodule"}
{"task_id": "fsm2s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input reset,\n    output out\n);\n\nreg [1:0] state, next_state;\nwire out;\n\n// State encoding: 2'b00 = OFF, 2'b01 = ON\nparameter OFF = 2'b00, ON = 2'b01;\n\n// Next state logic\nalways @(*) begin\n    case (state)\n        OFF: next_state = j ? ON : OFF;\n        ON: next_state = k ? OFF : ON;\n        default: next_state = OFF;\n    endcase\nend\n\n// Output logic\nassign out = (state == ON);\n\n// State register\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= OFF;\n    else\n        state <= next_state;\nend\n\nendmodule"}
{"task_id": "vector3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "module top_module (\n    input [4:0] a,\n    input [4:0] b,\n    input [4:0] c,\n    input [4:0] d,\n    input [4:0] e,\n    input [4:0] f,\n    output [7:0] w,\n    output [7:0] x,\n    output [7:0] y,\n    output [7:0] z\n);\n    wire [31:0] combined;\n\n    assign combined = {a, b, c, d, e, f, 2'b11};\n    assign w = combined[31:24];\n    assign x = combined[23:16];\n    assign y = combined[15:8];\n    assign z = combined[7:0];\n\nendmodule"}
{"task_id": "circuit2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n    assign q = ~(a & b) | (c & d);\nendmodule"}
{"task_id": "andgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an AND gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n  assign out = a & b;\nendmodule"}
{"task_id": "fsm1s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n\nreg [1:0] state, next_state;\n\nparameter B = 2'b10;\nparameter A = 2'b01;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= B;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        B: next_state = in ? B : A;\n        A: next_state = in ? A : B;\n        default: next_state = B;\n    endcase\nend\n\nassign out = state[1];\n\nendmodule"}
{"task_id": "fadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input cin,\n    output cout,\n    output sum\n);\n    wire w1, w2;\n    assign w1 = a ^ b;\n    assign w2 = w1 ^ cin;\n    assign sum = w2;\n    assign cout = (a & b) | (w1 & cin);\nendmodule"}
{"task_id": "m2014_q4g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    input in3,\n    output logic out\n);\n    logic xnor_out;\n\n    // XNOR gate\n    assign xnor_out = ~(in1 ^ in2);\n    // XOR gate with XNOR output and in3\n    assign out = xnor_out ^ in3;\n\nendmodule"}
{"task_id": "ece241_2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "module top_module (\n    input c,\n    input d,\n    output [3:0] mux_in\n);\n    wire a, b;\n    assign a = c;\n    assign b = d;\n\n    assign mux_in[0] = 1'b0; // ab = 00\n    assign mux_in[1] = 1'b1; // ab = 01\n    assign mux_in[2] = (a & b); // ab = 11\n    assign mux_in[3] = 1'b1; // ab = 10\n\nendmodule"}
{"task_id": "ece241_2014_q5b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n\n    reg [1:0] state, next_state;\n    localparam A = 2'b00, B = 2'b01;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            A: next_state = x ? B : A;\n            B: next_state = B;\n            default: next_state = A;\n        endcase\n    end\n\n    assign z = (state == B) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "circuit10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "module top_module (\n    input clk,\n    input a,\n    input b,\n    output q,\n    output state\n);\nreg q_reg, state_reg;\n\nalways @(posedge clk) begin\n    if (a == 0 && b == 0)\n        q_reg <= 0;\n    else if (a == 1 && b == 1)\n        q_reg <= 1;\n    else\n        q_reg <= q_reg;\nend\n\nassign q = q_reg;\nassign state = (a == 0 && b == 0) ? 0 :\n               (a == 1 && b == 1) ? 1 :\n               state_reg;\n\nalways @(posedge clk) begin\n    state_reg <= (a == 0 && b == 0) ? 0 :\n                 (a == 1 && b == 1) ? 1 :\n                 state_reg;\nend\n\nendmodule"}
{"task_id": "2012_q1g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n\n    assign f = (x[3] & x[4]) | (~x[3] & x[2]) | (x[3] & ~x[4] & ~x[2]);\n\nendmodule"}
{"task_id": "fsm_hdlc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSynchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input in,\n    output reg disc,\n    output reg flag,\n    output reg err);\n    \n    localparam [5:0] S0 = 6'b000000,\n                     S1 = 6'b000001,\n                     S2 = 6'b000011,\n                     S3 = 6'b000111,\n                     S4 = 6'b001111,\n                     S5 = 6'b011111,\n                     S6 = 6'b111111,\n                     S7 = 6'b111110;\n    \n    reg [5:0] state, next_state;\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= S0;\n        else\n            state <= next_state;\n    end\n    \n    always @(*) begin\n        case (state)\n            S0: next_state = (in) ? S1 : S0;\n            S1: next_state = (in) ? S2 : S0;\n            S2: next_state = (in) ? S3 : S1;\n            S3: next_state = (in) ? S4 : S2;\n            S4: next_state = (in) ? S5 : S3;\n            S5: next_state = (in) ? S6 : S4;\n            S6: next_state = (in) ? S7 : S5;\n            S7: next_state = S0;\n            default: next_state = S0;\n        endcase\n    end\n    \n    always @(posedge clk) begin\n        disc <= (state == S5);\n        flag <= (state == S7);\n        err <= (state == S6);\n    end\n    \nendmodule"}
{"task_id": "review2015_fancytimer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "module top_module(\n    input wire clk,\n    input wire reset,\n    input wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n\n    reg [3:0] delay, counter;\n    reg [3:0] shift_reg;\n    reg [3:0] shift_count;\n    reg [3:0] shift_data;\n    reg [1:0] state;\n    reg [1:0] shift_state;\n    reg [3:0] shift_pattern;\n    reg [3:0] shift_delay;\n    reg [3:0] shift_counter;\n\n    // State machine for searching the start pattern and shifting in delay\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= 2'b00;\n            shift_reg <= 4'b0000;\n            shift_count <= 4'b0000;\n            shift_data <= 4'b0000;\n            shift_pattern <= 4'b1101;\n        end else begin\n            case (state)\n                2'b00: begin\n                    if (shift_reg == shift_pattern) begin\n                        state <= 2'b01;\n                        shift_data <= 4'b0000;\n                        shift_count <= 4'b0000;\n                    end else begin\n                        shift_reg <= {shift_reg[2:0], data};\n                    end\n                end\n                2'b01: begin\n                    if (shift_count < 4) begin\n                        shift_data <= {shift_data[2:0], data};\n                        shift_count <= shift_count + 1;\n                    end else begin\n                        state <= 2'b10;\n                        delay <= shift_data;\n                        counter <= 4'b0000;\n                        counting <= 1;\n                    end\n                end\n                2'b10: begin\n                    if (counter == (delay + 1)) begin\n                        counting <= 0;\n                        done <= 1;\n                    end else begin\n                        counter <= counter + 1;\n                    end\n                end\n                2'b11: begin\n                    if (ack) begin\n                        state <= 2'b00;\n                        done <= 0;\n                    end\n                end\n            endcase\n        end\n    end\n\n    assign count = counting ? (delay - counter / 1000) : 4'bXXXX;\n\nendmodule"}
{"task_id": "ece241_2013_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input [3:1] s,\n    output reg fr3,\n    output reg fr2,\n    output reg fr1,\n    output reg dfr\n);\n\nreg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= 3'b000;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        3'b000: begin\n            fr3 = 1; fr2 = 1; fr1 = 1; dfr = 1;\n        end\n        3'b001: begin\n            fr3 = 0; fr2 = 1; fr1 = 1; dfr = 0;\n        end\n        3'b010: begin\n            fr3 = 0; fr2 = 0; fr1 = 1; dfr = 0;\n        end\n        3'b011: begin\n            fr3 = 0; fr2 = 0; fr1 = 0; dfr = 0;\n        end\n        default: begin\n            fr3 = 0; fr2 = 0; fr1 = 0; dfr = 0;\n        end\n    endcase\nend\n\nalways @(*) begin\n    case (s)\n        3'b111: next_state = 3'b000;\n        3'b110: next_state = 3'b001;\n        3'b100: next_state = 3'b010;\n        3'b000: next_state = 3'b011;\n        default: next_state = state;\n    endcase\nend\n\nendmodule"}
{"task_id": "fsm_serial", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output reg done\n);\n\n    localparam [2:0] IDLE = 3'd0,\n                     START = 3'd1,\n                     DATA = 3'd2,\n                     STOP = 3'd3;\n\n    reg [2:0] state, next_state;\n    reg [7:0] data;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            IDLE: next_state = in ? IDLE : START;\n            START: next_state = in ? DATA : START;\n            DATA: next_state = in ? DATA : STOP;\n            STOP: next_state = in ? STOP : IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            data <= 8'b0;\n            done <= 1'b0;\n        end\n        else begin\n            case (state)\n                START: data <= 8'b0;\n                DATA: data <= {data[6:0], in};\n                STOP: done <= in;\n                default: done <= 1'b0;\n            endcase\n        end\n    end\n\nendmodule"}
{"task_id": "fsm_serialdata", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output reg [7:0] out_byte,\n    output reg done\n);\n\nreg [2:0] state, next_state;\nlocalparam IDLE = 3'd0, START = 3'd1, DATA = 3'd2, STOP = 3'd3;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= IDLE;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        IDLE: begin\n            if (in == 1'b0)\n                next_state = START;\n            else\n                next_state = IDLE;\n        end\n        START: begin\n            if (in == 1'b0)\n                next_state = DATA;\n            else\n                next_state = IDLE;\n        end\n        DATA: begin\n            if (in == 1'b0)\n                next_state = DATA;\n            else\n                next_state = STOP;\n        end\n        STOP: begin\n            if (in == 1'b1)\n                next_state = IDLE;\n            else\n                next_state = STOP;\n        end\n        default: next_state = IDLE;\n    endcase\nend\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        out_byte <= 8'b0;\n        done <= 1'b0;\n    end else begin\n        case (state)\n            IDLE: begin\n                out_byte <= 8'b0;\n                done <= 1'b0;\n            end\n            START: begin\n                out_byte <= 8'b0;\n                done <= 1'b0;\n            end\n            DATA: begin\n                if (in == 1'b0)\n                    out_byte <= {out_byte[6:0], 1'b0};\n                else\n                    out_byte <= {out_byte[6:0], 1'b1};\n                done <= 1'b0;\n            end\n            STOP: begin\n                out_byte <= out_byte; // Hold value\n                done <= 1'b1;\n            end\n            default: begin\n                out_byte <= 8'b0;\n                done <= 1'b0;\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "gshare", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n\n    input predict_valid,\n    input [6:0] predict_pc,\n    output predict_taken,\n    output [6:0] predict_history,\n\n    input train_valid,\n    input train_taken,\n    input train_mispredicted,\n    input [6:0] train_history,\n    input [6:0] train_pc\n);\n\nreg [6:0] global_history, next_global_history;\nreg [6:0] pht_index;\nreg [6:0] pht [0:127];\nreg [1:0] pht_training;\n\nalways @(posedge clk or posedge areset) begin\n    if (areset) begin\n        global_history <= 7'b0;\n        pht_training <= 2'b00;\n        pht[0] <= 2'b00;\n        pht[1] <= 2'b00;\n        // Initialize all PHT entries to 2'b00\n        for (int i = 2; i < 128; i = i + 1) begin\n            pht[i] <= 2'b00;\n        end\n    end else begin\n        if (train_valid) begin\n            if (train_mispredicted)\n                global_history <= {global_history[5:0], train_taken};\n            pht_training <= 2'b01;\n            pht[pht_index] <= train_taken ? 2'b11 : 2'b00;\n        end else if (pht_training == 2'b01) begin\n            pht_training <= 2'b00;\n        end\n        if (predict_valid) begin\n            pht_index <= predict_pc ^ global_history;\n            predict_taken <= pht[pht_index][1];\n            predict_history <= global_history;\n            next_global_history <= {global_history[5:0], predict_taken};\n        end else if (train_valid) begin\n            next_global_history <= {global_history[5:0], train_taken};\n        end\n    end\nend\n\nalways @(posedge clk) begin\n    if (!areset)\n        global_history <= next_global_history;\nend\n\nendmodule"}
{"task_id": "lemmings4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n\n    // State encoding\n    localparam [3:0] WALK_LEFT = 4'd0, WALK_RIGHT = 4'd1, FALL = 4'd2, DIG_LEFT = 4'd3, DIG_RIGHT = 4'd4, SPLATTER = 4'd5;\n    reg [3:0] state, next_state;\n    reg [4:0] fall_count;\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= WALK_LEFT;\n            fall_count <= 5'd0;\n        end else begin\n            state <= next_state;\n            if (state == FALL || state == DIG_LEFT || state == DIG_RIGHT) begin\n                if (ground && fall_count > 0)\n                    fall_count <= 5'd20;\n                else if (fall_count < 5'd20)\n                    fall_count <= fall_count + 1'b1;\n            end else begin\n                fall_count <= 5'd0;\n            end\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        next_state = state;\n        case (state)\n            WALK_LEFT: begin\n                if (bump_right)\n                    next_state = WALK_RIGHT;\n                else if (dig && ground)\n                    next_state = DIG_LEFT;\n                else if (!ground)\n                    next_state = FALL;\n            end\n            WALK_RIGHT: begin\n                if (bump_left)\n                    next_state = WALK_LEFT;\n                else if (dig && ground)\n                    next_state = DIG_RIGHT;\n                else if (!ground)\n                    next_state = FALL;\n            end\n            FALL: begin\n                if (ground && fall_count > 5'd20)\n                    next_state = SPLATTER;\n                else if (ground)\n                    next_state = state - 1'd3;\n            end\n            DIG_LEFT: begin\n                if (!ground)\n                    next_state = FALL;\n            end\n            DIG_RIGHT: begin\n                if (!ground)\n                    next_state = FALL;\n            end\n            SPLATTER: begin\n            end\n            default: next_state = WALK_LEFT;\n        endcase\n    end\n\n    // Outputs\n    always @(*) begin\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n        case (state)\n            WALK_LEFT: walk_left = 1'b1;\n            WALK_RIGHT: walk_right = 1'b1;\n            FALL: aaah = 1'b1;\n            DIG_LEFT: begin\n                walk_left = 1'b1;\n                digging = 1'b1;\n            end\n            DIG_RIGHT: begin\n                walk_right = 1'b1;\n                digging = 1'b1;\n            end\n        endcase\n    end\n\nendmodule"}
{"task_id": "review2015_fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack\n);\n    localparam IDLE = 3'b000;\n    localparam FINDING = 3'b001;\n    localparam SHIFTING = 3'b010;\n    localparam COUNTING = 3'b011;\n    localparam NOTIFIED = 3'b100;\n\n    reg [2:0] state, next_state;\n    reg [3:0] pattern;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        next_state = state;\n        case (state)\n            IDLE: begin\n                if (data == 1'b1) begin\n                    pattern[0] = data;\n                    if (pattern == 4'b1101) next_state = FINDING;\n                end\n            end\n            FINDING: begin\n                pattern = {pattern[3:1], data};\n                if (pattern == 4'b1101) next_state = SHIFTING;\n                else next_state = IDLE;\n            end\n            SHIFTING: begin\n                shift_ena = 1'b1;\n                if (pattern == 4'b1111) next_state = COUNTING;\n            end\n            COUNTING: begin\n                counting = 1'b1;\n                if (done_counting) next_state = NOTIFIED;\n            end\n            NOTIFIED: begin\n                done = 1'b1;\n                if (ack) next_state = IDLE;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule"}
{"task_id": "conwaylife", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [255:0] data,\n    output reg [255:0] q);\n\n    integer i, j, k;\n    reg [3:0] neighbors;\n    reg [255:0] next_q;\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else begin\n            for (i = 0; i < 16; i = i + 1) begin\n                for (j = 0; j < 16; j = j + 1) begin\n                    neighbors = 0;\n                    for (k = -1; k <= 1; k = k + 1) begin\n                        neighbors = neighbors +\n                            q[((i + k + 16) % 16) * 16 + ((j + k + 16) % 16)];\n                    end\n                    neighbors = neighbors - q[i * 16 + j];\n                    if (neighbors == 3 || (neighbors == 2 && q[i * 16 + j]))\n                        next_q[i * 16 + j] = 1;\n                    else\n                        next_q[i * 16 + j] = 0;\n                end\n            end\n            q <= next_q;\n        end\n    end\nendmodule"}
{"task_id": "lemmings3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n    localparam [3:0] WALK_LEFT = 4'd0, WALK_RIGHT = 4'd1, FALL = 4'd2, DIG_LEFT = 4'd3, DIG_RIGHT = 4'd4;\n    reg [3:0] state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            WALK_LEFT: next_state = bump_right ? WALK_RIGHT : (bump_left ? WALK_LEFT : WALK_LEFT);\n            WALK_RIGHT: next_state = bump_left ? WALK_LEFT : (bump_right ? WALK_RIGHT : WALK_RIGHT);\n            FALL: next_state = ground ? state : FALL;\n            DIG_LEFT: next_state = ground ? WALK_LEFT : FALL;\n            DIG_RIGHT: next_state = ground ? WALK_RIGHT : FALL;\n            default: next_state = WALK_LEFT;\n        endcase\n    end\n\n    always @(*) begin\n        case (state)\n            WALK_LEFT: begin\n                walk_left = 1'b1;\n                walk_right = 1'b0;\n                aaah = 1'b0;\n                digging = 1'b0;\n            end\n            WALK_RIGHT: begin\n                walk_left = 1'b0;\n                walk_right = 1'b1;\n                aaah = 1'b0;\n                digging = 1'b0;\n            end\n            FALL: begin\n                walk_left = 1'b0;\n                walk_right = 1'b0;\n                aaah = 1'b1;\n                digging = 1'b0;\n            end\n            DIG_LEFT: begin\n                walk_left = 1'b1;\n                walk_right = 1'b0;\n                aaah = 1'b0;\n                digging = 1'b1;\n            end\n            DIG_RIGHT: begin\n                walk_left = 1'b0;\n                walk_right = 1'b1;\n                aaah = 1'b0;\n                digging = 1'b1;\n            end\n            default: begin\n                walk_left = 1'b1;\n                walk_right = 1'b0;\n                aaah = 1'b0;\n                digging = 1'b0;\n            end\n        endcase\n    end\n\nendmodule"}
{"task_id": "count_clock", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input ena,\n    output reg pm,\n    output reg [7:0] hh,\n    output reg [7:0] mm,\n    output reg [7:0] ss);\n\n    // Counter states\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            pm <= 1'b0; // AM\n            hh <= 8'd12; // 12:00\n            mm <= 8'd00; // 00:00\n            ss <= 8'd00; // 00:00\n        end else if (ena) begin\n            if (ss == 8'd59) begin\n                ss <= 8'd00;\n                if (mm == 8'd59) begin\n                    mm <= 8'd00;\n                    if (hh == 8'd12) begin\n                        hh <= 8'd1;\n                        pm <= ~pm; // Toggle PM/AM\n                    end else begin\n                        hh <= hh + 1'b1;\n                    end\n                // AM/PM handling\n                end else begin\n                    mm <= mm + 1'b1;\n                end\n            end else begin\n                ss <= ss + 1'b1;\n            end\n        end\n    end\n\nendmodule"}
{"task_id": "lemmings2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    output walk_left,\n    output walk_right,\n    output aaah\n);\n    localparam [3:0] WALK_LEFT = 4'd0, WALK_RIGHT = 4'd1, FALL_LEFT = 4'd2, FALL_RIGHT = 4'd3;\n    reg [3:0] state, next_state;\n    wire fall;\n    assign fall = ~ground;\n\n    // State transition logic\n    always @(*) begin\n        case(state)\n            WALK_LEFT: next_state = (fall) ? FALL_LEFT : (bump_left) ? WALK_RIGHT : WALK_LEFT;\n            WALK_RIGHT: next_state = (fall) ? FALL_RIGHT : (bump_right) ? WALK_LEFT : WALK_RIGHT;\n            FALL_LEFT: next_state = WALK_LEFT;\n            FALL_RIGHT: next_state = WALK_RIGHT;\n            default: next_state = WALK_LEFT;\n        endcase\n    end\n\n    // State register logic\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n    end\n\n    // Output logic\n    always @(*) begin\n        walk_left = (state == WALK_LEFT || state == FALL_LEFT);\n        walk_right = (state == WALK_RIGHT || state == FALL_RIGHT);\n        aaah = fall;\n    end\nendmodule"}
{"task_id": "countbcd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output [3:1] ena,\n    output reg [15:0] q);\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        q <= 16'b0000_0000_0000_0000;\n    else begin\n        if (q[3:0] == 4'b1001) begin\n            q[3:0] <= 4'b0000;\n            if (q[7:4] == 4'b1001) begin\n                q[7:4] <= 4'b0000;\n                if (q[11:8] == 4'b1001) begin\n                    q[11:8] <= 4'b0000;\n                    if (q[15:12] == 4'b1001)\n                        q[15:12] <= 4'b0000;\n                    else\n                        q[15:12] <= q[15:12] + 1'b1;\n                end\n                else\n                    q[11:8] <= q[11:8] + 1'b1;\n            end\n            else\n                q[7:4] <= q[7:4] + 1'b1;\n        end\n        else\n            q[3:0] <= q[3:0] + 1'b1;\n    end\nend\n\nassign ena = {q[15:12] == 4'b1001, q[11:8] == 4'b1001, q[7:4] == 4'b1001};\n\nendmodule"}
{"task_id": "mux2to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] a,\n    input [99:0] b,\n    input sel,\n    output [99:0] out\n);\n    assign out = sel ? b : a;\nendmodule"}
{"task_id": "m2014_q6b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "module top_module(\n    input [3:1] y,\n    input w,\n    output reg Y2\n);\nalways @(*) begin\n    case(y)\n        3'b000: Y2 = 0; // State A\n        3'b001: Y2 = w; // State B\n        3'b010: Y2 = w; // State C\n        3'b011: Y2 = w; // State D\n        3'b100: Y2 = 1; // State E\n        3'b101: Y2 = w; // State F\n        default: Y2 = 0;\n    endcase\nend\nendmodule"}
{"task_id": "ringer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "module top_module(\n    input ring, \n    input vibrate_mode,\n    output ringer,\n    output motor\n);\n\n    assign ringer = ~vibrate_mode & ring;\n    assign motor = vibrate_mode & ring;\n\nendmodule"}
{"task_id": "alwaysblock1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an AND gate using both an assign statement and a combinational always block. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out_assign,\n    output reg out_alwaysblock\n);\n\n    // Using assign statement\n    assign out_assign = a & b;\n\n    // Using combinational always block\n    always @(*) begin\n        out_alwaysblock = a & b;\n    end\n\nendmodule"}
{"task_id": "zero", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that always outputs a LOW.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput zero);\n", "completion": "module top_module(\n    output zero);\n    assign zero = 1'b0;\nendmodule"}
{"task_id": "circuit7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg q\n);\n    always @(posedge clk) begin\n        if (a)\n            q <= ~q;  // Toggle q when a is high\n        else\n            q <= 1'b1;  // Set q to 1 when a is low\n    end\nendmodule"}
{"task_id": "ece241_2014_q5a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n    parameter [1:0] IDLE = 2'b00, COMPLEMENT = 2'b01, OUTPUT = 2'b10;\n    reg [1:0] state, next_state;\n    reg carry;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            IDLE: next_state = COMPLEMENT;\n            COMPLEMENT: next_state = (x) ? OUTPUT : COMPLEMENT;\n            OUTPUT: next_state = IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            carry <= 1'b0;\n        else if (state == COMPLEMENT && !x && carry)\n            carry <= 1'b1;\n        else\n            carry <= 1'b0;\n    end\n\n    assign z = (state == OUTPUT) ? carry : 1'b0;\n\nendmodule"}
{"task_id": "fsm3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n    localparam [1:0] A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n    reg [1:0] current_state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset) \n            current_state <= A;\n        else \n            current_state <= next_state;\n    end\n\n    always @(*) begin\n        case (current_state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A;\n        endcase\n    end\n\n    assign out = (current_state == D);\n\nendmodule"}
{"task_id": "vector2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that reverses the byte order of a 32-bit vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [31:0] in,\n    output [31:0] out\n);\n    // Reverse byte order of input\n    assign out = {in[7:0], in[15:8], in[23:16], in[31:24]};\nendmodule"}
{"task_id": "m2014_q4c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a simple D flip flop with active high synchronous reset (reset output to 0).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input r,\n    output logic q\n);\n    always @(posedge clk) begin\n        if (r)\n            q <= 1'b0;\n        else\n            q <= d;\n    end\nendmodule"}
{"task_id": "mt2015_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the boolean function z = (x^y) & x.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z\n);\n    assign z = (x ^ y) & x;\nendmodule"}
{"task_id": "shift18", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input ena,\n    input [1:0] amount,\n    input [63:0] data,\n    output reg [63:0] q);\n\nalways @(posedge clk) begin\n    if (load)\n        q <= data;\n    else if (ena) begin\n        case (amount)\n            2'b00: q <= {q[62:0], 1'b0}; // Shift left by 1 bit\n            2'b01: q <= {q[55:0], 8'b0}; // Shift left by 8 bits\n            2'b10: q <= {{1{q[63]}}, q[63:1]}; // Arithmetic shift right by 1 bit\n            2'b11: q <= {{8{q[63]}}, q[63:8]}; // Arithmetic shift right by 8 bits\n            default: q <= q; // No shift if amount is undefined\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "ece241_2013_q8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input aresetn,\n    input x,\n    output reg z\n);\n    localparam S0 = 2'b00, S1 = 2'b01, S2 = 2'b10;\n    reg [1:0] state, next_state;\n\n    always @(posedge clk or negedge aresetn) begin\n        if (!aresten)\n            state <= S0;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            S0: next_state = (x) ? S1 : S0;\n            S1: next_state = (x) ? S2 : S0;\n            S2: next_state = (x) ? S2 : S1;\n            default: next_state = S0;\n        endcase\n    end\n\n    always @(*) begin\n        case (state)\n            S0: z = 1'b0;\n            S1: z = 1'b0;\n            S2: z = 1'b1;\n            default: z = 1'b0;\n        endcase\n    end\nendmodule"}
{"task_id": "m2014_q6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output reg z\n);\n\n    localparam [2:0] A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n    reg [2:0] current_state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            current_state <= A;\n        else\n            current_state <= next_state;\n    end\n\n    always @(*) begin\n        case (current_state)\n            A: next_state = w ? A : B;\n            B: next_state = w ? D : C;\n            C: next_state = w ? D : E;\n            D: next_state = w ? A : F;\n            E: next_state = w ? D : E;\n            F: next_state = w ? D : C;\n            default: next_state = A;\n        endcase\n    end\n\n    always @(*) begin\n        case (current_state)\n            A, B, C, D: z = 0;\n            E, F: z = 1;\n            default: z = 0;\n        endcase\n    end\n\nendmodule"}
{"task_id": "fsm_ps2data", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output reg [23:0] out_bytes,\n    output reg done\n);\n    localparam [1:0] IDLE = 2'b00, BYTE1 = 2'b01, BYTE2 = 2'b10, BYTE3 = 2'b11;\n    reg [1:0] state, next_state;\n    reg [7:0] byte1, byte2, byte3;\n    wire valid_byte;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        next_state = state;\n        case (state)\n            IDLE: next_state = in[3] ? BYTE1 : IDLE;\n            BYTE1: next_state = BYTE2;\n            BYTE2: next_state = BYTE3;\n            BYTE3: next_state = IDLE;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            byte1 <= 8'b0;\n            byte2 <= 8'b0;\n            byte3 <= 8'b0;\n        end else begin\n            case (state)\n                BYTE1: byte1 <= in;\n                BYTE2: byte2 <= in;\n                BYTE3: byte3 <= in;\n            endcase\n        end\n    end\n\n    assign valid_byte = state == BYTE3;\n    assign done = valid_byte;\n    assign out_bytes = {byte3, byte2, byte1};\n\nendmodule"}
{"task_id": "2012_q2b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\n\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "module top_module (\n    input [5:0] y,\n    input w,\n    output Y1,\n    output Y3\n);\n    // Y1 logic for state D only\n    assign Y1 = &y[5:2] & ~y[1] & ~y[0];\n    \n    // Y3 logic for states C and F\n    assign Y3 = (y == 6'b000100) | (y == 6'b100000);\nendmodule"}
{"task_id": "vector0", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "module top_module(\n    input [2:0] vec, \n    output [2:0] outv,\n    output o2,\n    output o1,\n    output o0\n);\n    assign outv = vec;\n    assign o2 = vec[2];\n    assign o1 = vec[1];\n    assign o0 = vec[0];\nendmodule"}
{"task_id": "kmap4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\nalways @(*) begin\n    case ({c,d,a,b})\n        4'b0001, 4'b0110, 4'b1001, 4'b1110: out = 1'b1;\n        default: out = 1'b0;\n    endcase\nend\nendmodule"}
{"task_id": "vector1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "module top_module (\n    input [15:0] in,\n    output [7:0] out_hi,\n    output [7:0] out_lo\n);\n    assign out_lo = in[7:0];\n    assign out_hi = in[15:8];\nendmodule"}
{"task_id": "norgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\nassign out = ~(a | b);\nendmodule"}
{"task_id": "alwaysblock2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "module top_module(\n    input clk,\n    input a, \n    input b,\n    output out_assign,\n    output reg out_always_comb,\n    output reg out_always_ff\n);\n    // Assign statement for XOR\n    assign out_assign = a ^ b;\n    \n    // Combinational always block for XOR\n    always @(*) begin\n        out_always_comb = a ^ b;\n    end\n    \n    // Clocked always block for XOR\n    always @(posedge clk) begin\n        out_always_ff <= a ^ b;\n    end\nendmodule"}
{"task_id": "m2014_q6c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "module top_module (\n    input [6:1] y,\n    input w,\n    output Y2,\n    output Y4\n);\n    // Y2 logic\n    assign Y2 = ~y[1] & ~y[2] & ~y[3] & ~y[4] & ~y[5] & w | // A to B\n                ~y[1] & y[2] & ~y[3] & ~y[4] & ~y[5] & ~w | // B to C\n                ~y[1] & y[3] & ~y[2] & ~y[4] & ~y[5] & ~w | // C to E\n                y[4] & ~y[1] & ~y[2] & ~y[3] & ~y[5] & w; // E to D\n\n    // Y4 logic\n    assign Y4 = ~y[1] & ~y[2] & y[3] & ~y[4] & ~y[5] & ~w | // A to A\n                ~y[1] & y[2] & ~y[3] & y[4] & ~y[5] & w | // B to D\n                ~y[1] & y[2] & ~y[3] & ~y[4] & y[5] & ~w | // C to D\n                y[4] & ~y[1] & ~y[2] & ~y[3] & ~y[5] & ~w | // E to D\n                y[4] & ~y[1] & ~y[2] & ~y[3] & y[5] & w; // F to D\n\nendmodule"}
{"task_id": "mux256to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "module top_module (\n    input [255:0] in,\n    input [7:0] sel,\n    output  out\n);\n    assign out = in[sel];\nendmodule"}
{"task_id": "2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input w,\n    input R,\n    input E,\n    input L,\n    output reg Q\n);\n\nalways @(posedge clk or posedge E) begin\n    if (E) begin\n        if (L)\n            Q <= R;\n        else\n            Q <= {w, Q[1:0]};\n    end\nend\n\nendmodule"}
{"task_id": "ece241_2014_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    output z\n);\n    \n    reg a, b, c;\n\n    always @(posedge clk) begin\n        a <= x ^ a; // XOR gate\n        b <= x & ~b; // AND gate with complemented output\n        c <= x | ~c; // OR gate with complemented output\n    end\n\n    assign z = ~(a ^ b ^ c); // Three-input XNOR\n\nendmodule"}
{"task_id": "circuit4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n    assign q = ~(a & ~(b | c | d));\nendmodule"}
{"task_id": "rule110", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else begin\n            for (int i = 0; i < 512; i = i + 1) begin\n                case ({q[i-1], q[i], q[(i+1)%512]})\n                    3'b111: q[i] <= 1'b0;\n                    3'b110: q[i] <= 1'b1;\n                    3'b101: q[i] <= 1'b1;\n                    3'b100: q[i] <= 1'b0;\n                    3'b011: q[i] <= 1'b1;\n                    3'b010: q[i] <= 1'b1;\n                    3'b001: q[i] <= 1'b1;\n                    3'b000: q[i] <= 1'b0;\n                endcase\n            end\n        end\n    end\n\nendmodule"}
{"task_id": "fsm3s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n    parameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n    reg [1:0] state, next_state;\n    wire out_wire;\n\n    // State register\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    assign out_wire = (state == D);\n\n    // Output assignment\n    assign out = out_wire;\n\nendmodule"}
{"task_id": "circuit5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "module top_module (\n    input [3:0] a, \n    input [3:0] b, \n    input [3:0] c, \n    input [3:0] d,\n    input [3:0] e,\n    output reg [3:0] q\n);\nalways @(*) begin\n    case(c)\n        4'd0: q = b;\n        4'd1: q = e;\n        4'd2: q = a;\n        4'd3: q = d;\n        default: q = 4'b1111; // Fallback to 4'b1111 if c is not 0, 1, 2, or 3\n    endcase\nend\n\nendmodule"}
{"task_id": "bugs_mux2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFind the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input sel,\n    input [7:0] a,\n    input [8:0] b,\n    output reg [7:0] out\n);\n\n    always @(*) begin\n        out = sel ? b[7:0] : a;\n    end\n\nendmodule"}
{"task_id": "mt2015_muxdff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "module top_module(\n    input clk,\n    input L,\n    input q_in,\n    input r_in,\n    output reg Q);\n    always @(posedge clk) begin\n        if (L)\n            Q <= r_in;\n        else\n            Q <= q_in ^ Q;\n    end\nendmodule\n\nmodule full_module (\n    input [2:0] r,\n    input L,\n    input clk,\n    output reg [2:0] q\n);\n    // Instantiate three top_module instances\n    genvar i;\n    generate\n        for (i = 0; i < 3; i = i + 1) begin : top_instance\n            top_module top_inst (\n                .clk(clk),\n                .L(L),\n                .q_in(q[i+1] ? (i == 0) : q[i]),\n                .r_in(r[i]),\n                .Q(q[i])\n            );\n        end\n    endgenerate\nendmodule"}
{"task_id": "edgecapture", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input [31:0] in,\n    output reg [31:0] out\n);\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            out <= 32'b0;\n        else begin\n            genvar i;\n            generate\n                for (i = 0; i < 32; i = i + 1) begin : capture\n                    if (in[i] && !in[i+1]) // Check if in[i] is 1 and in[i+1] is 0\n                        out[i] <= 1'b1;\n                    else if (in[i] && in[i+1]) // Check if both in[i] and in[i+1] are 1\n                        out[i] <= 1'b0;\n                end\n            endgenerate\n        end\n    end\nendmodule"}
{"task_id": "dff8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    output reg [7:0] q);\n\n    always @(posedge clk) begin\n        q <= d;\n    end\n\nendmodule"}
{"task_id": "ece241_2014_q1c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nAssume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [7:0] b,\n    output [7:0] s,\n    output overflow\n);\n    wire [8:0] sum;\n    assign sum = {a[7], a} + {b[7], b};\n    assign s = sum[7:0];\n    assign overflow = sum[8] ^ sum[7];\nendmodule"}
{"task_id": "review2015_fsmonehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n);\n\n    // State definitions for one-hot encoding\n    localparam [9:0] S = 10'b0000000001,\n                     S1 = 10'b0000000010,\n                     S11 = 10'b0000000100,\n                     S110 = 10'b0000001000,\n                     B0 = 10'b0000010000,\n                     B1 = 10'b0000100000,\n                     B2 = 10'b0001000000,\n                     B3 = 10'b0010000000,\n                     Count = 10'b0100000000,\n                     Wait = 10'b1000000000;\n\n    // Next-state logic\n    assign B3_next = state == Count;\n    assign S_next = state == S110 || state == S;\n    assign S1_next = state == S;\n    assign Count_next = state == B3;\n    assign Wait_next = state == Count && done_counting;\n\n    // Output logic\n    assign done = state == Wait;\n    assign counting = state == Count;\n    assign shift_ena = state == B0 || state == B1 || state == B2 || state == B3;\n\nendmodule"}
{"task_id": "counter_2bc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 2'b01;  // Reset to weakly not-taken\n        else if (train_valid) begin\n            if (train_taken)\n                state <= state + 1'b1;  // Increment up to 3\n            else\n                state <= state - 1'b1;  // Decrement down to 0\n        end\n    end\nendmodule"}
{"task_id": "always_casez", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output reg [2:0] pos\n);\n    always @(*) begin\n        for (int i = 0; i < 8; i++) begin\n            if (in[i]) begin\n                pos = i;\n                break;\n            end\n        end\n        if (in == 8'b0) pos = 3'b000;\n    end\nendmodule"}
{"task_id": "always_nolatches", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "module top_module (\n    input [15:0] scancode,\n    output reg left,\n    output reg down,\n    output reg right,\n    output reg up\n);\n\nalways @(*) begin\n    left = 1'b0; down = 1'b0; right = 1'b0; up = 1'b0;\n    case(scancode)\n        16'hE06B: left = 1'b1;\n        16'hE072: down = 1'b1;\n        16'hE074: right = 1'b1;\n        16'hE075: up = 1'b1;\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4j", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 4-bit adder with full adders. The output sum should include the overflow bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "module top_module (\n    input [3:0] x,\n    input [4:0] y,\n    output [4:0] sum\n);\n    wire carry;\n    assign {carry, sum} = x + y;\nendmodule"}
{"task_id": "history_shift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            predict_history <= 32'b0;\n        end else if (train_mispredicted) begin\n            predict_history <= {train_history, train_taken};\n        end else if (predict_valid) begin\n            predict_history <= {predict_history[30:0], predict_taken};\n        end\n    end\n\nendmodule"}
{"task_id": "wire_decl", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out,\n    output out_n );\n\n    wire and1, and2;\n\n    // First layer: AND gates\n    assign and1 = a & b;\n    assign and2 = c & d;\n\n    // Second layer: OR gate\n    assign out = and1 | and2;\n\n    // Inverted output\n    assign out_n = ~out;\n\nendmodule"}
{"task_id": "dff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a single D flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q);\n    \n    always @(posedge clk) begin\n        q <= d;\n    end\n\nendmodule"}
{"task_id": "ece241_2013_q12", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "module top_module (\n    input clk,\n    input enable,\n    input S,\n    input A,\n    input B,\n    input C,\n    output reg Z\n);\n    \n    reg [7:0] shift_register;\n    \n    always @(posedge clk) begin\n        if (enable) begin\n            shift_register <= {shift_register[6:0], S};\n        end\n    end\n    \n    always @(*) begin\n        case ({A, B, C})\n            3'b000: Z = shift_register[0];\n            3'b001: Z = shift_register[1];\n            3'b010: Z = shift_register[2];\n            3'b011: Z = shift_register[3];\n            3'b100: Z = shift_register[4];\n            3'b101: Z = shift_register[5];\n            3'b110: Z = shift_register[6];\n            3'b111: Z = shift_register[7];\n            default: Z = 1'b0;\n        endcase\n    end\n    \nendmodule"}
{"task_id": "thermostat", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "module top_module(\n    input mode,\n    input too_cold,\n    input too_hot,\n    input fan_on,\n    output heater,\n    output aircon,\n    output fan\n);\n    \n    // Control signals for heater and aircon\n    assign heater = mode & too_cold;\n    assign aircon = ~mode & too_hot;\n    \n    // Fan control: on if heater or aircon is on, or fan_on is requested\n    assign fan = heater | aircon | fan_on;\n\nendmodule"}
{"task_id": "ece241_2013_q2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out_sop,\n    output out_pos\n);\n    wire w1, w2, w3, w4;\n\n    // Sum-of-Products (SOP)\n    assign w1 = ~a & ~b & ~c & ~d; // 0\n    assign w2 = ~a & ~b & ~c & d;  // 4\n    assign w3 = ~a & ~b & c & ~d;  // 1\n    assign w4 = ~a & b & c & d;    // 14\n    assign out_sop = ~(w1 | w2 | w3 | w4);\n\n    // Product-of-Sums (POS)\n    assign out_pos = (~a & ~b & ~c & ~d) | (~a & ~b & ~c & d) | (~a & ~b & c & ~d) | (~a & b & c & d);\n\nendmodule"}
{"task_id": "lfsr32", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [31:0] q);\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        q <= 32'h1; // Initialize or reset to 1\n    else begin\n        q <= {q[30:0], q[31] ^ q[21] ^ q[1] ^ q[0]}; // Galois LFSR update\n    end\nend\n\nendmodule"}
{"task_id": "circuit3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n\nassign q = (a & b) | (c & d);\n\nendmodule"}
{"task_id": "7420", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d, \n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n    // 4-input NAND gate for output p1y\n    assign p1y = ~(p1a & p1b & p1c & p1d);\n    // 4-input NAND gate for output p2y\n    assign p2y = ~(p2a & p2b & p2c & p2d);\nendmodule"}
{"task_id": "popcount255", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input [254:0] in,\n    output reg [7:0] out\n);\n    \n    // Divide input into 32-bit chunks, 7 32-bit chunks and 1 23-bit chunk\n    localparam [7:0] chunk_size = 8;\n    localparam [7:0] num_chunks = 255 / chunk_size;\n    localparam [7:0] last_chunk_size = 255 % chunk_size;\n    \n    // Declare registers for partial sum\n    reg [7:0] partial_sums [0:num_chunks]; // 8 bits for each chunk\n    assign partial_sums[num_chunks] = 0; // last partial sum is 0\n    \n    // Count bits in each chunk\n    genvar i;\n    generate\n        for (i = 0; i < num_chunks; i = i + 1) begin : chunk_loop\n            assign partial_sums[i] = (in[(i+1)*8-1 : i*8] == 8'b11111111) ? 8'd8 :\n                (in[(i+1)*8-1 : i*8] == 8'b11111110) ? 8'd7 :\n                (in[(i+1)*8-1 : i*8] == 8'b11111101) ? 8'd7 :\n                (in[(i+1)*8-1 : i*8] == 8'b11111011) ? 8'd7 :\n                (in[(i+1)*8-1 : i*8] == 8'b11110111) ? 8'd7 :\n                (in[(i+1)*8-1 : i*8] == 8'b11101111) ? 8'd7 :\n                (in[(i+1)*8-1 : i*8] == 8'b11011111) ? 8'd7 :\n                (in[(i+1)*8-1 : i*8] == 8'b10111111) ? 8'd7 :\n                (in[(i+1)*8-1 : i*8] == 8'b01111111) ? 8'd7 :\n                (in[(i+1)*8-1 : i*8] == 8'b11111100) ? 8'd6 :\n                (in[(i+1)*8-1 : i*8] == 8'b11111001) ? 8'd6 :\n                (in[(i+1)*8-1 : i*8] == 8'b11110011) ? 8'd6 :\n                (in[(i+1)*8-1 : i*8] == 8'b11100111) ? 8'd6 :\n                (in[(i+1)*8-1 : i*8] == 8'b11001111) ? 8'd6 :\n                (in[(i+1)*8-1 : i*8] == 8'b10011111) ? 8'd6 :\n                (in[(i+1)*8-1 : i*8] == 8'b00111111) ? 8'd6 :\n                (in[(i+1)*8-1 : i*8] == 8'b11111000) ? 8'd5 :\n                (in[(i+1)*8-1 : i*8] == 8'b11110001) ? 8'd5 :\n                (in[(i+1)*8-1 : i*8] == 8'b11100011) ? 8'd5 :\n                (in[(i+1)*8-1 : i*8] == 8'b11000111) ? 8'd5 :\n                (in[(i+1)*8-1 : i*8] == 8'b10001111) ? 8'd5 :\n                (in[(i+1)*8-1 : i*8] == 8'b00011111) ? 8'd5 :\n                (in[(i+1)*8-1 : i*8] == 8'b11110000) ? 8'd4 :\n                (in[(i+1)*8-1 : i*8] == 8'b11100001) ? 8'd4 :\n                (in[(i+1)*8-1 : i*8] == 8'b11000011) ? 8'd4 :\n                (in[(i+1)*8-1 : i*8] == 8'b10000111) ? 8'd4 :\n                (in[(i+1)*8-1 : i*8] == 8'b00001111) ? 8'd4 :\n                (in[(i+1)*8-1 : i*8] == 8'b00001110) ? 8'd3 :\n                (in[(i+1)*8-1 : i*8] == 8'b00001101) ? 8'd3 :\n                (in[(i+1)*8-1 : i*8] == 8'b00001011) ? 8'd3 :\n                (in[(i+1)*8-1 : i*8] == 8'b00000111) ? 8'd3 :\n                (in[(i+1)*8-1 : i*8] == 8'b00000110) ? 8'd2 :\n                (in[(i+1)*8-1 : i*8] == 8'b00000101) ? 8'd2 :\n                (in[(i+1)*8-1 : i*8] == 8'b00000011) ? 8'd2 :\n                (in[(i+1)*8-1 : i*8] == 8'b00000010) ? 8'd1 :\n                (in[(i+1)*8-1 : i*8] == 8'b00000001) ? 8'd1 :\n                8'd0;\n        end\n    endgenerate\n    \n    // Sum up all partial sums\n    assign out = partial_sums[0] + partial_sums[1] + partial_sums[2] + partial_sums[3] + partial_sums[4] + partial_sums[5] + partial_sums[6];\n    \nendmodule"}
{"task_id": "gatesv", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output [2:0] out_both,\n    output [3:1] out_any,\n    output [3:0] out_different\n);\n    assign out_both = {in[3] & in[2], in[2] & in[1], in[1] & in[0]};\n    assign out_any = {in[3] | in[0], in[0] | in[1], in[1] | in[2], in[2] | in[3]};\n    assign out_different = {in[3] ^ in[0], in[0] ^ in[1], in[1] ^ in[2], in[2] ^ in[3]};\nendmodule"}
{"task_id": "circuit6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "module top_module (\n    input [2:0] a, \n    output reg [15:0] q\n);\nalways @(*) begin\n    case(a)\n        3'b000: q = 16'h1232;\n        3'b001: q = 16'hAEE0;\n        3'b010: q = 16'h27D4;\n        3'b011: q = 16'h5A0E;\n        3'b100: q = 16'h2066;\n        3'b101: q = 16'h64CE;\n        3'b110: q = 16'hC526;\n        3'b111: q = 16'h2F19;\n        default: q = 16'h0000;\n    endcase\nend\nendmodule"}
{"task_id": "countslow", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input slowena,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk) begin\n        if (reset)\n            q <= 4'b0000; // Reset counter to 0\n        else if (slowena)\n            q <= (q == 4'b1001) ? 4'b0000 : q + 1'b1; // Increment counter, wrap around at 10\n    end\n\nendmodule"}
{"task_id": "m2014_q4f", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n\n    assign out = ~in1 & ~in2;\n\nendmodule"}
{"task_id": "m2014_q4h", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module assigns the output port to the same value as the input port combinationally.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out);\n    // Assign the output to the input value\n    assign out = in;\nendmodule"}
{"task_id": "fsm1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n\n    localparam [1:0] B = 2'b10, A = 2'b00;\n    reg [1:0] state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= B;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            B: next_state = in ? B : A;\n            A: next_state = in ? A : B;\n            default: next_state = B;\n        endcase\n    end\n\n    always @(*) begin\n        case (state)\n            B: out = 1'b1;\n            A: out = 1'b0;\n            default: out = 1'b1;\n        endcase\n    end\n\nendmodule"}
{"task_id": "dualedge", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q\n);\n    reg q_temp;\n    \n    always @(posedge clk) begin\n        q_temp <= d;\n    end\n    \n    always @(negedge clk) begin\n        q <= q_temp;\n    end\n    \nendmodule"}
{"task_id": "xnorgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an XNOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    wire not_a, not_b;\n    not not_a_inst (.in(a), .out(not_a));\n    not not_b_inst (.in(b), .out(not_b));\n    and and_inst (.a(not_a), .b(not_b), .f(out));\nendmodule"}
{"task_id": "mt2015_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nModule A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n\n    wire a1_out, a2_out, b1_out, b2_out;\n    wire or_out, and_out;\n\n    // Instantiate A modules\n    A a1 (.x(x), .y(y), .z(a1_out));\n    A a2 (.x(x), .y(y), .z(a2_out));\n\n    // Instantiate B modules\n    B b1 (.x(x), .y(y), .z(b1_out));\n    B b2 (.x(x), .y(y), .z(b2_out));\n\n    // OR gate\n    or_gate or1 (.a(a1_out), .b(b1_out), .out(or_out));\n\n    // AND gate\n    and_gate and1 (.a(a2_out), .b(b2_out), .out(and_out));\n\n    // XOR gate\n    xor_gate xor1 (.a(or_out), .b(and_out), .out(z));\n\nendmodule\n\nmodule A(\n    input x,\n    input y,\n    output z);\n    assign z = (x ^ y) & x;\nendmodule\n\nmodule B(\n    input x,\n    input y,\n    output z);\n    // Output matches the provided waveform\n    assign z = ~(x & y);\nendmodule\n\nmodule or_gate(\n    input a,\n    input b,\n    output out);\n    assign out = a | b;\nendmodule\n\nmodule and_gate(\n    input a,\n    input b,\n    output out);\n    assign out = a & b;\nendmodule\n\nmodule xor_gate(\n    input a,\n    input b,\n    output out);\n    assign out = a ^ b;\nendmodule"}
{"task_id": "rotate100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [1:0] ena,\n    input [99:0] data,\n    output reg [99:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else if (ena == 2'b01)\n            q <= {q[98:0], q[99]};\n        else if (ena == 2'b10)\n            q <= {q[0], q[99:1]};\n    end\n\nendmodule"}
{"task_id": "review2015_count1k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [9:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 10'd0;\n        else if (q == 10'd999)\n            q <= 10'd0;\n        else\n            q <= q + 1'b1;\n    end\n\nendmodule"}
{"task_id": "notgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOT gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = ~in;\nendmodule"}
{"task_id": "fsm_onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "module top_module (\n    input in,\n    input [9:0] state,\n    output [9:0] next_state,\n    output out1,\n    output out2);\n\n    // State transition logic\n    assign next_state = state ? \n        {state[8], state[6], state[7], state[5], state[4], state[3], state[2], state[1], state[0], state[9]} :\n        {state[0], state[0], state[0], state[0], state[0], state[0], state[0], state[0], state[0], state[9]};\n\n    // Output logic\n    assign out1 = state[7];\n    assign out2 = state[8];\n\nendmodule"}
{"task_id": "ece241_2013_q7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    output reg Q\n);\n    always @(posedge clk) begin\n        case ({j, k})\n            2'b00: Q <= Q; // No change\n            2'b01: Q <= 1'b0; // Reset\n            2'b10: Q <= 1'b1; // Set\n            2'b11: Q <= ~Q; // Toggle\n        endcase\n    end\nendmodule"}
{"task_id": "popcount3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "module top_module (\n    input [2:0] in,\n    output [1:0] out\n);\n    assign out = in[0] + in[1] + in[2];\nendmodule"}
{"task_id": "vector5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    input e,\n    output [24:0] out\n);\n    assign out[24] = ~a ^ a;\n    assign out[23] = ~a ^ b;\n    assign out[22] = ~a ^ c;\n    assign out[21] = ~a ^ d;\n    assign out[20] = ~a ^ e;\n    assign out[19] = ~b ^ a;\n    assign out[18] = ~b ^ b;\n    assign out[17] = ~b ^ c;\n    assign out[16] = ~b ^ d;\n    assign out[15] = ~b ^ e;\n    assign out[14] = ~c ^ a;\n    assign out[13] = ~c ^ b;\n    assign out[12] = ~c ^ c;\n    assign out[11] = ~c ^ d;\n    assign out[10] = ~c ^ e;\n    assign out[9] = ~d ^ a;\n    assign out[8] = ~d ^ b;\n    assign out[7] = ~d ^ c;\n    assign out[6] = ~d ^ d;\n    assign out[5] = ~d ^ e;\n    assign out[4] = ~e ^ a;\n    assign out[3] = ~e ^ b;\n    assign out[2] = ~e ^ c;\n    assign out[1] = ~e ^ d;\n    assign out[0] = ~e ^ e;\nendmodule"}
{"task_id": "lemmings1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    output walk_left,\n    output walk_right\n);\n\nreg state, next_state;\n\n// State encoding: 0 - walk_left, 1 - walk_right\nalways @(posedge clk or posedge areset) begin\n    if (areset) \n        state <= 0;\n    else \n        state <= next_state;\nend\n\nalways @(*) begin\n    case(state)\n        0: next_state = bump_left ? 1 : 0;  // Walking left\n        1: next_state = bump_right ? 0 : 1; // Walking right\n        default: next_state = 0; // Default to walk left\n    endcase\nend\n\nassign walk_left = ~state;\nassign walk_right = state;\n\nendmodule"}
{"task_id": "circuit1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    output q\n);\n\nassign q = a & b;\n\nendmodule"}
{"task_id": "7458", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d,\n    input p1e,\n    input p1f,\n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n    wire and1, and2, and3, and4;\n\n    assign and1 = p1a & p1b & p1c;\n    assign and2 = p1d & p1e & p1f;\n    assign and3 = p2a & p2b;\n    assign and4 = p2c & p2d;\n\n    assign p1y = and1 | and2;\n    assign p2y = and3 | and4;\nendmodule"}
{"task_id": "2014_q3c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    input [2:0] y,\n    output reg Y0,\n    output reg z\n);\n    reg [2:0] Y;\n\n    always @(posedge clk) begin\n        case(y)\n            3'b000: Y <= (x == 1'b0) ? 3'b000 : 3'b001;\n            3'b001: Y <= (x == 1'b0) ? 3'b001 : 3'b100;\n            3'b010: Y <= (x == 1'b0) ? 3'b010 : 3'b001;\n            3'b011: Y <= (x == 1'b0) ? 3'b001 : 3'b010;\n            3'b100: Y <= (x == 1'b0) ? 3'b011 : 3'b100;\n            default: Y <= 3'b000;\n        endcase\n    end\n\n    always @(posedge clk) begin\n        Y0 <= Y[0];\n        z <= (y == 3'b011) | (y == 3'b100);\n    end\nendmodule"}
{"task_id": "m2014_q4e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 2-input NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    \n    assign out = ~(in1 | in2); // NOR operation\n\nendmodule"}
{"task_id": "wire4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    output w,\n    output x,\n    output y,\n    output z\n);\n    assign w = a;\n    assign x = b;\n    assign y = b;\n    assign z = c;\nendmodule"}
{"task_id": "m2014_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input ar,\n    output logic q\n);\n    always @(posedge clk or posedge ar) begin\n        if (ar)\n            q <= 1'b0; // Asynchronous reset\n        else\n            q <= d; // D flip-flop behavior\n    end\nendmodule"}
{"task_id": "always_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "module top_module (\n    input [2:0] sel,\n    input [3:0] data0,\n    input [3:0] data1,\n    input [3:0] data2,\n    input [3:0] data3,\n    input [3:0] data4,\n    input [3:0] data5,\n    output reg [3:0] out\n);\nalways @(*) begin\n    case(sel)\n        3'b000: out = data0;\n        3'b001: out = data1;\n        3'b010: out = data2;\n        3'b011: out = data3;\n        3'b100: out = data4;\n        3'b101: out = data5;\n        default: out = 4'b0000;\n    endcase\nend\nendmodule"}
{"task_id": "timer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "module top_module(\n    input clk, \n    input load, \n    input [9:0] data, \n    output reg tc\n);\n    reg [9:0] counter;\n\n    always @(posedge clk) begin\n        if (load) begin\n            counter <= data;\n            tc <= 1'b0; // Reset terminal count signal when loading\n        end else if (counter != 0) begin\n            counter <= counter - 1;\n        end\n    end\n\n    assign tc = (counter == 10'd0); // Terminal count when counter reaches 0\n\nendmodule"}
{"task_id": "review2015_fsmseq", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg start_shifting);\n\n    enum logic [3:0] {IDLE, S1, S2, S3, S4} state, next_state;\n\n    always @(posedge clk) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            IDLE: next_state = data ? S1 : IDLE;\n            S1: next_state = data ? S2 : IDLE;\n            S2: next_state = data ? S3 : IDLE;\n            S3: next_state = data ? S4 : IDLE;\n            S4: next_state = data ? S1 : IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    always @(posedge clk) begin\n        if (reset)\n            start_shifting <= 1'b0;\n        else if (state == S4)\n            start_shifting <= 1'b1;\n    end\n\nendmodule"}
{"task_id": "dff8r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 8'b0;  // Set all outputs to zero on reset\n        else\n            q <= d;    // Otherwise, update outputs with input d\n    end\n\nendmodule"}
{"task_id": "edgedetect2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] anyedge);\n\n    always @(posedge clk) begin\n        anyedge <= (in & ~in[7:0] >> 1);\n    end\n\nendmodule"}
{"task_id": "count1to10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nMake a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'd1; // Reset to 1\n        else begin\n            if (q == 4'd10)\n                q <= 4'd1; // Wrap around to 1 after 10\n            else\n                q <= q + 1'b1; // Increment the counter\n        end\n    end\n\nendmodule"}
{"task_id": "circuit9", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg [2:0] q\n);\n\nalways @(posedge clk) begin\n    if (a == 1'b1)\n        q <= 3'd4;\n    else if (q == 3'd6)\n        q <= 3'd0;\n    else\n        q <= q + 1'b1;\nend\n\nendmodule"}
{"task_id": "lfsr5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [4:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 5'b00001; // Active-high reset to 1\n        else\n            q <= {q[3], q[4] ^ q[3], q[2:0]}; // Galois LFSR with taps at 5 and 3\n    end\n\nendmodule"}
{"task_id": "bugs_addsubz", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "module top_module (\n    input do_sub,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out,\n    output reg result_is_zero\n);\n\n    always @(*) begin\n        case (do_sub)\n          1'b0: out = a + b;\n          1'b1: out = a - b;\n        endcase\n\n        result_is_zero = (out == 8'b0);\n    end\n\nendmodule"}
{"task_id": "m2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n\n    assign f = (x[4] & x[3] & x[2]) | (x[4] & ~x[3] & x[2]) | (x[4] & x[3] & ~x[2]) | (x[4] & ~x[3] & ~x[2]) | (~x[4] & x[3] & ~x[2]);\n\nendmodule"}
{"task_id": "bugs_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "module top_module (\n    input [7:0] code,\n    output reg [3:0] out,\n    output reg valid\n);\nalways @* begin\n    valid = 1'b0;\n    out = 4'b0000;\n    case (code)\n        8'h45: begin valid = 1'b1; out = 4'b0000; end\n        8'h16: begin valid = 1'b1; out = 4'b0001; end\n        8'h1e: begin valid = 1'b1; out = 4'b0010; end\n        8'h26: begin valid = 1'b1; out = 4'b0011; end\n        8'h25: begin valid = 1'b1; out = 4'b0100; end\n        8'h2e: begin valid = 1'b1; out = 4'b0101; end\n        8'h36: begin valid = 1'b1; out = 4'b0110; end\n        8'h3d: begin valid = 1'b1; out = 4'b0111; end\n        8'h3e: begin valid = 1'b1; out = 4'b1000; end\n        8'h46: begin valid = 1'b1; out = 4'b1001; end\n        default: begin valid = 1'b0; out = 4'b0000; end\n    endcase\nend\nendmodule"}
{"task_id": "vectorr", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven an 8-bit input vector [7:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [7:0] out\n);\n    assign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\nendmodule"}
{"task_id": "kmap3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n\nalways @(*) begin\n    case({c, b, a})\n        3'b000, 3'b001, 3'b010, 3'b011: out = 0;\n        3'b100, 3'b101, 3'b110: out = 1;\n        3'b111: out = 1;\n        default: out = 1'b1; // Don't care\n    endcase\nend\n\nendmodule"}
{"task_id": "review2015_shiftcount", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input shift_ena,\n    input count_ena,\n    input data,\n    output reg [3:0] q);\n\n    always @(posedge clk) begin\n        if (shift_ena) begin\n            q <= {data, q[3:1]};\n        end\n        else if (count_ena) begin\n            q <= q - 1;\n        end\n    end\n\nendmodule"}
{"task_id": "wire", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with one input and one output that behaves like a wire.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = in;\nendmodule"}
{"task_id": "review2015_fsmshift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output shift_ena);\n\n    reg [1:0] count;\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            count <= 2'b00;\n        else if (count == 2'b11)\n            count <= 2'b00;\n        else\n            count <= count + 1'b1;\n    end\n\n    assign shift_ena = (count < 2'b10);\n\nendmodule"}
{"task_id": "count15", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'b0000; // Reset counter to 0\n        else\n            q <= q + 1; // Increment counter\n    end\nendmodule"}
{"task_id": "always_if", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel_b1,\n    input sel_b2,\n    output out_assign,\n    output reg out_always\n);\n\n    // Using assign statement\n    assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\n    // Using procedural if statement\n    always @(*) begin\n        if (sel_b1 & sel_b2) \n            out_always = b;\n        else \n            out_always = a;\n    end\n\nendmodule"}
{"task_id": "kmap1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    input c,\n    output out\n);\n    assign out = ~a | b;\nendmodule"}
{"task_id": "2013_q2afsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input [3:1] r,\n    output [3:1] g\n);\n    \n    // State encoding\n    localparam A = 3'b000;\n    localparam B = 3'b001;\n    localparam C = 3'b010;\n    localparam D = 3'b100;\n    \n    // State and outputs\n    reg [2:0] present_state, next_state;\n    \n    // State register\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            present_state <= A;\n        else\n            present_state <= next_state;\n    end\n    \n    // State transition logic\n    always @(*) begin\n        case (present_state)\n            A: if (r[1]) next_state = B;\n                else if (r[2]) next_state = C;\n                else if (r[3]) next_state = D;\n                else next_state = A;\n            B: if (r[1]) next_state = B;\n                else next_state = A;\n            C: if (r[2]) next_state = C;\n                else next_state = A;\n            D: next_state = A;\n            default: next_state = A;\n        endcase\n    end\n    \n    // Output logic\n    assign g[1] = (present_state == B);\n    assign g[2] = (present_state == C);\n    assign g[3] = (present_state == D);\n    \nendmodule"}
{"task_id": "count10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q\n);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'b0000;  // Reset to 0\n        else\n            q <= q + 1;   // Increment q\n    end\n\nendmodule"}
{"task_id": "fsm_ps2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output reg done\n);\n\nreg [1:0] state, next_state;\nreg [7:0] byte_count;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        begin\n        state <= 2'b00;\n        byte_count <= 8'b0;\n        done <= 1'b0;\n        end\n    else\n        begin\n        state <= next_state;\n        case (state)\n            2'b00: begin\n                if (in[3]) begin\n                    next_state <= 2'b01;\n                    byte_count <= 8'b0;\n                end\n                else begin\n                    next_state <= 2'b00;\n                end\n            end\n            2'b01: begin\n                byte_count <= in;\n                if (byte_count[3]) begin\n                    next_state <= 2'b10;\n                end\n                else begin\n                    next_state <= 2'b00;\n                end\n            end\n            2'b10: begin\n                byte_count <= in;\n                if (byte_count[3]) begin\n                    next_state <= 2'b00;\n                    done <= 1'b1;\n                end\n                else begin\n                    next_state <= 2'b00;\n                    done <= 1'b0;\n                end\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "mux2to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel,\n    output out\n);\nassign out = sel ? b : a;\nendmodule"}
{"task_id": "gates4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    \n    assign out_and = &in;  // 4-input AND gate\n    assign out_or = |in;   // 4-input OR gate\n    assign out_xor = ^in;  // 4-input XOR gate\n\nendmodule"}
{"task_id": "2014_q3bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input x,\n    output reg z\n);\n    \n    reg [2:0] state, next_state;\n\n    // State transition logic\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= 3'b000; // Reset state to 000\n        else\n            state <= next_state;\n    end\n\n    // Next state and output logic\n    always @(*) begin\n        case (state)\n            3'b000: begin\n                next_state = (x == 1'b0) ? 3'b000 : 3'b001;\n                z = 1'b0;\n            end\n            3'b001: begin\n                next_state = (x == 1'b0) ? 3'b001 : 3'b100;\n                z = 1'b0;\n            end\n            3'b010: begin\n                next_state = (x == 1'b0) ? 3'b010 : 3'b001;\n                z = 1'b0;\n            end\n            3'b011: begin\n                next_state = (x == 1'b0) ? 3'b001 : 3'b010;\n                z = 1'b1;\n            end\n            3'b100: begin\n                next_state = (x == 1'b0) ? 3'b011 : 3'b100;\n                z = 1'b1;\n            end\n            default: begin\n                next_state = 3'b000;\n                z = 1'b0;\n            end\n        endcase\n    end\nendmodule"}
{"task_id": "2013_q2bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input x,\n    input y,\n    output f,\n    output g\n);\n    // State encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11\n    reg [1:0] state, next_state;\n    reg f_reg;\n    wire x1, x2, y1, y2;\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            state <= 2'b00;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            2'b00: next_state = 2'b01; // State A to B\n            2'b01: next_state = (x1 & ~x2 & x) ? 2'b10 : 2'b01; // State B to C\n            2'b10: next_state = (y1 | y2) ? 2'b11 : 2'b00; // State C to D or back to A\n            2'b11: next_state = 2'b11; // State D to D\n            default: next_state = 2'b00; // Default to A\n        endcase\n    end\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            f_reg <= 1'b0;\n        else if (next_state == 2'b01)\n            f_reg <= 1'b1;\n        else\n            f_reg <= 1'b0;\n    end\n\n    assign x1 = x;\n    assign x2 = x1;\n    assign y1 = y;\n    assign y2 = y1;\n\n    assign f = f_reg;\n    assign g = (state == 2'b11);\n\nendmodule"}
{"task_id": "dff8p", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n    \n    always @(negedge clk or posedge reset) begin\n        if (reset)\n            q <= 8'h34; // Reset to 0x34\n        else\n            q <= d; // Update with input d\n    end\nendmodule"}
{"task_id": "reduction", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nParity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output parity\n);\n    assign parity = ^in;\nendmodule"}
{"task_id": "fsm3comb", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [1:0] state,\n    output reg [1:0] next_state,\n    output out\n);\n    always @(*) begin\n        case(state)\n            2'b00: begin\n                next_state = in ? 2'b01 : 2'b00;\n                out = 1'b0;\n            end\n            2'b01: begin\n                next_state = in ? 2'b01 : 2'b10;\n                out = 1'b0;\n            end\n            2'b10: begin\n                next_state = in ? 2'b11 : 2'b00;\n                out = 1'b0;\n            end\n            2'b11: begin\n                next_state = in ? 2'b10 : 2'b01;\n                out = 1'b1;\n            end\n            default: begin\n                next_state = 2'b00;\n                out = 1'b0;\n            end\n        endcase\n    end\nendmodule"}
{"task_id": "mt2015_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z\n);\n\nreg z_reg;\n\nalways @(*) begin\n    if (x && y)\n        z_reg = 1'b1;\n    else if (x)\n        z_reg = 1'b0;\n    else if (y)\n        z_reg = 1'b0;\n    else\n        z_reg = 1'b1;\nend\n\nassign z = z_reg;\n\nendmodule"}
{"task_id": "2012_q2fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n\n    parameter [2:0] A = 3'd0, B = 3'd1, C = 3'd2, D = 3'd3, E = 3'd4, F = 3'd5;\n    reg [2:0] state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            A: next_state = w ? B : A;\n            B: next_state = w ? C : D;\n            C: next_state = w ? E : D;\n            D: next_state = w ? F : A;\n            E: next_state = w ? E : D;\n            F: next_state = w ? C : D;\n            default: next_state = A;\n        endcase\n    end\n\n    assign z = (state == E || state == F);\n\nendmodule"}
{"task_id": "dff16e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input resetn,\n    input [1:0] byteena,\n    input [15:0] d,\n    output reg [15:0] q);\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            q <= 16'b0;\n        else begin\n            if (byteena[1])\n                q[15:8] <= d[15:8];\n            if (byteena[0])\n                q[7:0] <= d[7:0];\n        end\n    end\n\nendmodule"}
{"task_id": "edgedetect", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] pedge);\n\n    always @(posedge clk) begin\n        // Detect positive edge for each bit\n        for (int i = 0; i < 8; i = i + 1) begin\n            if (in[i] == 1'b1 && in[i] !== pedge[i]) pedge[i] <= 1'b1;\n            else pedge[i] <= 1'b0;\n        end\n    end\n\nendmodule"}
{"task_id": "circuit8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "module top_module (\n    input clock,\n    input a, \n    output reg p,\n    output reg q\n);\n\n    always @(posedge clock) begin\n        p <= a;\n        q <= a & q;\n    end\n\nendmodule"}
{"task_id": "rule90", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else\n            q <= {q[510:0], ~q[0] ^ ~q[511]};\n    end\n\nendmodule"}
{"task_id": "mt2015_eq2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "module top_module(\n    input [1:0] A,\n    input [1:0] B,\n    output z);\n    \n    assign z = (A == B);\n\nendmodule"}
{"task_id": "gatesv100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output [98:0] out_both,\n    output [99:1] out_any,\n    output [99:0] out_different\n);\n\n    genvar i;\n    generate\n        for (i = 0; i < 99; i = i + 1) begin : gen_both\n            assign out_both[i] = in[i] & in[i+1];\n        end\n    endgenerate\n\n    generate\n        for (i = 1; i < 100; i = i + 1) begin : gen_any\n            assign out_any[i] = in[i] | in[i-1];\n        end\n    endgenerate\n\n    generate\n        for (i = 0; i < 100; i = i + 1) begin : gen_diff\n            assign out_different[i] = in[i] != in[(i+99) % 100];\n        end\n    endgenerate\n\nendmodule"}
{"task_id": "m2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D latch using an always block.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input d,\n    input ena,\n    output logic q\n);\n    always @(posedge ena) begin\n        q <= d;\n    end\nendmodule"}
{"task_id": "mux256to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "module top_module (\n    input [1023:0] in,\n    input [7:0] sel,\n    output [3:0] out\n);\n    wire [3:0] selected_bits;\n\n    assign selected_bits = in[(sel+1)*4*8-1 : sel*4*8];\n    assign out = selected_bits;\n\nendmodule"}
{"task_id": "mux9to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "module top_module (\n    input [15:0] a,\n    input [15:0] b,\n    input [15:0] c,\n    input [15:0] d,\n    input [15:0] e,\n    input [15:0] f,\n    input [15:0] g,\n    input [15:0] h,\n    input [15:0] i,\n    input [3:0] sel,\n    output logic [15:0] out\n);\n    always_comb begin\n        case (sel)\n            4'd0: out = a;\n            4'd1: out = b;\n            4'd2: out = c;\n            4'd3: out = d;\n            4'd4: out = e;\n            4'd5: out = f;\n            4'd6: out = g;\n            4'd7: out = h;\n            4'd8: out = i;\n            default: out = 16'b1;\n        endcase\n    end\nendmodule"}
{"task_id": "vectorgates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "module top_module(\n    input [2:0] a, \n    input [2:0] b, \n    output [2:0] out_or_bitwise,\n    output out_or_logical,\n    output [5:0] out_not\n);\n    assign out_or_bitwise = a | b; // Bitwise OR\n    assign out_or_logical = a || b; // Logical OR\n    assign out_not = {~b, ~a}; // Inverse of b in upper half, inverse of a in lower half\nendmodule"}
{"task_id": "fsm3onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [3:0] state,\n    output reg [3:0] next_state,\n    output out\n);\n\n    always @(*) begin\n        // State transition logic\n        case(state)\n            4'b0001: next_state = in ? 4'b0010 : 4'b0001; // State A\n            4'b0010: next_state = in ? 4'b0010 : 4'b0100; // State B\n            4'b0100: next_state = in ? 4'b1000 : 4'b0001; // State C\n            4'b1000: next_state = in ? 4'b0100 : 4'b0010; // State D\n            default: next_state = 4'b0001; // Default to A\n        endcase\n\n        // Output logic\n        out = (state == 4'b1000); // Output 1 only in state D\n    end\n\nendmodule"}
{"task_id": "conditional", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [7:0] b,\n    input [7:0] c,\n    input [7:0] d,\n    output reg [7:0] min\n);\n    always @(*) begin\n        min = (a < b) ? a : b;\n        min = (min < c) ? min : c;\n        min = (min < d) ? min : d;\n    end\nendmodule"}
{"task_id": "gates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output out_and,\n    output out_or,\n    output out_xor,\n    output out_nand,\n    output out_nor,\n    output out_xnor,\n    output out_anotb\n);\n\n    assign out_and = a & b;\n    assign out_or = a | b;\n    assign out_xor = a ^ b;\n    assign out_nand = ~(a & b);\n    assign out_nor = ~(a | b);\n    assign out_xnor = ~(a ^ b);\n    assign out_anotb = a & ~b;\n\nendmodule"}
{"task_id": "kmap2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output out\n);\n    \n    wire tmp1, tmp2;\n    \n    assign tmp1 = ~(c & d);\n    assign tmp2 = ~(a & ~b);\n    assign out = tmp1 | tmp2;\n\nendmodule"}
{"task_id": "2014_q3fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input s,\n    input w,\n    output reg z\n);\n    localparam A = 3'b000;\n    localparam B = 3'b001;\n    localparam C = 3'b010;\n    localparam D = 3'b011;\n    localparam E = 3'b100;\n    localparam F = 3'b101;\n    localparam G = 3'b110;\n    reg [2:0] state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            A: next_state = (s) ? B : A;\n            B: next_state = C;\n            C: next_state = (w) ? D : E;\n            D: next_state = (w) ? F : G;\n            E: next_state = (w) ? F : G;\n            F: next_state = (w) ? G : C;\n            G: next_state = C;\n            default: next_state = A;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            z <= 1'b0;\n        else begin\n            case (state)\n                A: z <= 1'b0;\n                B: z <= 1'b0;\n                C: z <= 1'b0;\n                D: z <= 1'b0;\n                E: z <= 1'b0;\n                F: z <= 1'b1;\n                G: z <= 1'b0;\n                default: z <= 1'b0;\n            endcase\n        end\n    end\n\nendmodule"}
{"task_id": "vector4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nOne common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [31:0] out\n);\n    assign out = {{24{in[7]}}, in};\nendmodule"}
{"task_id": "m2014_q4k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a shift register with four D flops. Reset is active-low synchronous resettable.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input in,\n    output out\n);\n    \n    reg [3:0] shift_reg;\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn) begin\n            shift_reg <= 4'b0000;\n        end else begin\n            shift_reg <= {in, shift_reg[3:1]};\n        end\n    end\n\n    assign out = shift_reg[3];\n\nendmodule"}
{"task_id": "always_case2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output reg [1:0] pos\n);\nalways @(*) begin\n    casez (in)\n        4'b0001: pos = 2'd0;\n        4'b0010: pos = 2'd1;\n        4'b0100: pos = 2'd2;\n        4'b1000: pos = 2'd3;\n        default: pos = 2'd0;\n    endcase\nend\nendmodule"}
{"task_id": "fsm2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input areset,\n    output out\n);\n    \n    reg state, next_state;\n\n    // State encoding: OFF=0, ON=1\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 1'b0; // Reset to OFF\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            1'b0: next_state = j ? 1'b1 : 1'b0; // OFF -> ON if j=1, else OFF\n            1'b1: next_state = k ? 1'b0 : 1'b1; // ON -> OFF if k=1, else ON\n            default: next_state = 1'b0;\n        endcase\n    end\n\n    assign out = state; // Output is current state\n\nendmodule"}
{"task_id": "m2014_q4i", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 0 (or logic low).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput out);\n", "completion": "module top_module(\n    output out);\n    \n    assign out = 1'b0;\n\nendmodule"}
{"task_id": "step_one", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 1 (or logic high).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput one);\n", "completion": "module top_module(\n    output one);\n    assign one = 1'b1;\nendmodule"}
{"task_id": "vector100r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven a 100-bit input vector [99:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output reg [99:0] out\n);\n    always @(*) begin\n        out = {in[99], in[98], in[97], in[96], in[95], in[94], in[93], in[92], in[91], in[90],\n                in[89], in[88], in[87], in[86], in[85], in[84], in[83], in[82], in[81], in[80],\n                in[79], in[78], in[77], in[76], in[75], in[74], in[73], in[72], in[71], in[70],\n                in[69], in[68], in[67], in[66], in[65], in[64], in[63], in[62], in[61], in[60],\n                in[59], in[58], in[57], in[56], in[55], in[54], in[53], in[52], in[51], in[50],\n                in[49], in[48], in[47], in[46], in[45], in[44], in[43], in[42], in[41], in[40],\n                in[39], in[38], in[37], in[36], in[35], in[34], in[33], in[32], in[31], in[30],\n                in[29], in[28], in[27], in[26], in[25], in[24], in[23], in[22], in[21], in[20],\n                in[19], in[18], in[17], in[16], in[15], in[14], in[13], in[12], in[11], in[10],\n                in[9], in[8], in[7], in[6], in[5], in[4], in[3], in[2], in[1], in[0]};\n    end\nendmodule"}
{"task_id": "m2014_q4d", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    output logic out\n);\n    logic xor_output;\n\n    // XOR gate\n    assign xor_output = in ^ out;\n\n    // D flip-flop\n    always_ff @(posedge clk) begin\n        out <= xor_output;\n    end\nendmodule"}
{"task_id": "shift4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input load,\n    input ena,\n    input [3:0] data,\n    output reg [3:0] q);\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            q <= 4'b0000;\n        else if (load)\n            q <= data;\n        else if (ena)\n            q <= {1'b0, q[3:1]};\n    end\n\nendmodule"}
{"task_id": "truthtable1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "module top_module (\n    input x3,\n    input x2,\n    input x1,\n    output f\n);\n    // Implement the logic based on the truth table\n    assign f = x3 & (x2 ^ x1);\nendmodule"}
{"task_id": "dff8ar", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input areset,\n    output reg [7:0] q);\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            q <= 8'b0;  // Reset output to 0\n        else\n            q <= d;  // Update output on clock edge\n    end\n\nendmodule"}
{"task_id": "gates100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and = &in;  // 100-input AND gate\n    assign out_or = |in;   // 100-input OR gate\n    assign out_xor = ^in;  // 100-input XOR gate\nendmodule"}
{"task_id": "hadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output sum,\n    output cout\n);\n    assign sum = a ^ b;    // Sum is the XOR of a and b\n    assign cout = a & b;    // Carry-out is the AND of a and b\nendmodule"}
{"task_id": "always_if2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "module top_module (\n    input cpu_overheated,\n    output reg shut_off_computer,\n    input arrived,\n    input gas_tank_empty,\n    output reg keep_driving\n);\n    always @(*) begin\n        if (cpu_overheated)\n            shut_off_computer = 1;\n        else\n            shut_off_computer = 0;\n    end\n\n    always @(*) begin\n        if (~arrived)\n            keep_driving = ~gas_tank_empty;\n        else\n            keep_driving = 0;\n    end\n\nendmodule"}
{"task_id": "fsm2s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input reset,\n    output out\n);\n\nreg [1:0] state, next_state;\n\n// State encoding: OFF = 2'b00, ON = 2'b01\nlocalparam OFF = 2'b00;\nlocalparam ON = 2'b01;\n\n// State register\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= OFF;\n    else\n        state <= next_state;\nend\n\n// Next state logic\nalways @(*) begin\n    case (state)\n        OFF: next_state = j ? ON : OFF;\n        ON: next_state = k ? OFF : ON;\n        default: next_state = OFF;\n    endcase\nend\n\n// Output logic\nassign out = (state == ON);\n\nendmodule"}
{"task_id": "vector3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "module top_module (\n    input [4:0] a,\n    input [4:0] b,\n    input [4:0] c,\n    input [4:0] d,\n    input [4:0] e,\n    input [4:0] f,\n    output [7:0] w,\n    output [7:0] x,\n    output [7:0] y,\n    output [7:0] z\n);\n    wire [31:0] concat_input;\n\n    // Concatenate inputs and add 2 LSB 1 bits\n    assign concat_input = {a, b, c, d, e, f, 2'b11};\n\n    // Split concatenated input into outputs\n    assign w = concat_input[31:24];\n    assign x = concat_input[23:16];\n    assign y = concat_input[15:8];\n    assign z = concat_input[7:0];\n\nendmodule"}
{"task_id": "circuit2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n\nassign q = ~(a & d) | (b & c & d);\n\nendmodule"}
{"task_id": "andgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an AND gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = a & b;\nendmodule"}
{"task_id": "fsm1s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n    reg [1:0] state, next_state;\n    wire out;\n\n    // State encoding: B=00, A=01\n    always @(posedge clk) begin\n        if (reset)\n            state <= 2'b00; // Reset state to B\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            2'b00: next_state = in ? 2'b00 : 2'b01; // B -> B or A\n            2'b01: next_state = in ? 2'b01 : 2'b00; // A -> A or B\n            default: next_state = 2'b00; // Default to B\n        endcase\n    end\n\n    // Output logic\n    assign out = (state == 2'b00); // Output 1 when in state B\n\nendmodule"}
{"task_id": "fadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input cin,\n    output cout,\n    output sum\n);\n    // Full adder logic\n    assign sum = a ^ b ^ cin;  // Sum is XOR of all three inputs\n    assign cout = (a & b) | (cin & (a ^ b));  // Carry-out is true if two or more inputs are 1\nendmodule"}
{"task_id": "m2014_q4g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    input in3,\n    output logic out\n);\n    logic xnor_out;\n    \n    // XNOR operation\n    xnor xnor_gate (.a(in1), .b(in2), .y(xnor_out));\n    \n    // XOR operation\n    xor xor_gate (.a(xnor_out), .b(in3), .y(out));\nendmodule"}
{"task_id": "ece241_2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "module top_module (\n    input c,\n    input d,\n    output [3:0] mux_in\n);\n    wire mux_out_1, mux_out_2;\n\n    // First level of 2-to-1 multiplexers\n    mux2to1 mux1 (.a(c), .b(d), .s(1'b0), .out(mux_out_1));\n    mux2to1 mux2 (.a(c), .b(d), .s(1'b1), .out(mux_out_2));\n\n    // Second level to form mux_in[3:0]\n    assign mux_in[0] = 1'b0;  // cd=00\n    assign mux_in[1] = 1'b1;  // cd=01\n    assign mux_in[2] = mux_out_2; // cd=11\n    assign mux_in[3] = mux_out_1; // cd=10\n\n    // 2-to-1 multiplexer module\n    module mux2to1 (a, b, s, out);\n        input a, b, s;\n        output out;\n        assign out = (s) ? b : a;\n    endmodule\n\nendmodule"}
{"task_id": "ece241_2014_q5b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n\n    // State encoding\n    localparam [1:0] A = 2'b00, B = 2'b01;\n\n    reg [1:0] state, next_state;\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = x ? B : A;\n            B: next_state = B;\n            default: next_state = A; // Default to A\n        endcase\n    end\n\n    // Output logic\n    assign z = (state == A) ? x : ~x;\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\nendmodule"}
{"task_id": "circuit10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "module top_module (\n    input clk,\n    input a,\n    input b,\n    output q,\n    output state\n);\n\nreg q_reg, state_reg;\n\nalways @(posedge clk) begin\n    if (a)\n        state_reg <= b;\n    else\n        state_reg <= state_reg;\n    \n    if (a & b)\n        q_reg <= 0;\n    else\n        q_reg <= q_reg ^ b;\nend\n\nassign state = state_reg;\nassign q = q_reg;\n\nendmodule"}
{"task_id": "2012_q1g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n    \n    // Karnaugh map minimized function\n    assign f = ~(x[3] ^ x[2] ^ x[1]) | (x[4] & x[3] & x[2] & ~x[1]);\n    \nendmodule"}
{"task_id": "fsm_hdlc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSynchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input in,\n    output reg disc,\n    output reg flag,\n    output reg err\n);\n    localparam [3:0] S0 = 4'b0000, S1 = 4'b0001, S2 = 4'b0010, S3 = 4'b0011,\n                     S4 = 4'b0100, S5 = 4'b0101, S6 = 4'b0110, S7 = 4'b0111,\n                     S8 = 4'b1000, S9 = 4'b1001, S10 = 4'b1010;\n\n    reg [3:0] state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= S0;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            S0: next_state = in ? S1 : S0;\n            S1: next_state = in ? S2 : S0;\n            S2: next_state = in ? S3 : S0;\n            S3: next_state = in ? S4 : S0;\n            S4: next_state = in ? S5 : S0;\n            S5: next_state = in ? S8 : S0;\n            S6: next_state = in ? S8 : S0;\n            S7: next_state = in ? S10 : S0;\n            S8: next_state = in ? S7 : S0;\n            S9: next_state = in ? S7 : S0;\n            S10: next_state = in ? S10 : S0;\n            default: next_state = S0;\n        endcase\n    end\n\n    always @(posedge clk) begin\n        disc <= (state == S5);\n        flag <= (state == S8);\n        err <= (state == S10);\n    end\n\nendmodule"}
{"task_id": "review2015_fancytimer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "module top_module(\n    input wire clk,\n    input wire reset,\n    input wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack\n);\n\n    reg [3:0] delay;\n    reg [11:0] counter;\n    reg [3:0] seq;\n    reg [3:0] state;\n    reg [3:0] count_reg;\n\n    localparam [3:0] SEARCH = 4'd0, READ_DELAY = 4'd1, COUNTING = 4'd2, DONE = 4'd3;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            seq <= 4'd0;\n            state <= SEARCH;\n            counting <= 1'b0;\n            done <= 1'b0;\n            counter <= 12'd0;\n        end else begin\n            case (state)\n                SEARCH: begin\n                    if (seq == 4'd13) begin\n                        seq <= 4'd0;\n                        state <= READ_DELAY;\n                    end else if (seq == 4'd11) begin\n                        seq <= seq + 1'b1;\n                    end else begin\n                        seq <= seq << 1;\n                        seq[0] <= data;\n                    end\n                end\n                READ_DELAY: begin\n                    delay <= {delay[2:0], data};\n                    if (counter == 4'd0) begin\n                        state <= COUNTING;\n                        count_reg <= delay;\n                        counter <= (delay + 1) * 10'd1000 - 1;\n                        counting <= 1'b1;\n                    end\n                end\n                COUNTING: begin\n                    if (counter > 0) begin\n                        counter <= counter - 1'b1;\n                        count_reg <= count_reg - 1'b1;\n                    end else begin\n                        counting <= 1'b0;\n                        state <= DONE;\n                    end\n                end\n                DONE: begin\n                    done <= 1'b1;\n                    if (ack) begin\n                        state <= SEARCH;\n                        done <= 1'b0;\n                    end\n                end\n            endcase\n        end\n    end\n\n    assign count = counting ? count_reg : 4'd0;\n\nendmodule"}
{"task_id": "ece241_2013_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input [3:1] s,\n    output reg fr3,\n    output reg fr2,\n    output reg fr1,\n    output reg dfr\n);\nreg [2:0] state, next_state;\nreg prev_state;\n\n// State encoding: 000 - Above s[3], 001 - Between s[3] and s[2], 010 - Between s[2] and s[1], 011 - Below s[1]\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= 3'b111; // Below s[1] (active reset state)\n        prev_state <= 3'b000; // Above s[3]\n    end else begin\n        state <= next_state;\n        prev_state <= state;\n    end\nend\n\nalways @(*) begin\n    case (state)\n        3'b000: begin // Above s[3]\n            fr3 = 1'b0;\n            fr2 = 1'b0;\n            fr1 = 1'b0;\n            dfr = 1'b0;\n        end\n        3'b001: begin // Between s[3] and s[2]\n            fr3 = 1'b0;\n            fr2 = 1'b0;\n            fr1 = 1'b1;\n            dfr = 1'b0;\n        end\n        3'b010: begin // Between s[2] and s[1]\n            fr3 = 1'b0;\n            fr2 = 1'b1;\n            fr1 = 1'b1;\n            dfr = 1'b0;\n        end\n        3'b011: begin // Below s[1]\n            fr3 = 1'b1;\n            fr2 = 1'b1;\n            fr1 = 1'b1;\n            dfr = (state == 3'b011) ? 1'b1 : 1'b0;\n        end\n        default: begin\n            fr3 = 1'b0;\n            fr2 = 1'b0;\n            fr1 = 1'b0;\n            dfr = 1'b0;\n        end\n    endcase\nend\n\nalways @(*) begin\n    case (s)\n        3'b111: next_state = 3'b000;\n        3'b110: next_state = 3'b001;\n        3'b101: next_state = 3'b010;\n        3'b001: next_state = 3'b011;\n        default: next_state = state;\n    endcase\nend\n\nendmodule"}
{"task_id": "fsm_serial", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output done\n);\n    \n    parameter IDLE = 2'b00, START = 2'b01, DATA = 2'b10, STOP = 2'b11;\n    reg [1:0] state, next_state;\n    reg [3:0] bit_count;\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n    \n    always @(*) begin\n        case (state)\n            IDLE: next_state = (in == 1'b0) ? START : IDLE;\n            START: next_state = DATA;\n            DATA: next_state = (bit_count == 4'd8) ? STOP : DATA;\n            STOP: next_state = (in == 1'b1) ? IDLE : STOP;\n            default: next_state = IDLE;\n        endcase\n    end\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            bit_count <= 4'd0;\n        else begin\n            case (state)\n                IDLE: bit_count <= 4'd0;\n                DATA: bit_count <= bit_count + 1'b1;\n                default: bit_count <= bit_count;\n            endcase\n        end\n    end\n    \n    assign done = (state == IDLE);\n    \nendmodule"}
{"task_id": "fsm_serialdata", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output reg [7:0] out_byte,\n    output reg done\n);\n    // State encoding\n    localparam IDLE = 3'b000, START = 3'b001, DATA = 3'b010, STOP = 3'b100;\n\n    reg [2:0] state, next_state;\n    reg [2:0] bit_count;\n\n    // State transition logic\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    // Output logic\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            done <= 1'b0;\n            out_byte <= 8'b0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    done <= 1'b0;\n                    bit_count <= 3'b000;\n                end\n                START: begin\n                    done <= 1'b0;\n                    if (in == 1'b0) bit_count <= 3'b001;\n                    else bit_count <= 3'b000;\n                end\n                DATA: begin\n                    done <= 1'b0;\n                    if (bit_count == 3'b111) begin\n                        out_byte <= {out_byte[6:0], in};\n                        bit_count <= 3'b000;\n                    end else begin\n                        out_byte <= {out_byte[6:0], in};\n                        bit_count <= bit_count + 1'b1;\n                    end\n                end\n                STOP: begin\n                    done <= in;\n                    bit_count <= 3'b000;\n                end\n                default: begin\n                    done <= 1'b0;\n                    bit_count <= 3'b000;\n                end\n            endcase\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            IDLE: next_state = in ? IDLE : START;\n            START: next_state = in ? STOP : DATA;\n            DATA: next_state = (bit_count == 3'b111) ? STOP : DATA;\n            STOP: next_state = in ? IDLE : STOP;\n            default: next_state = IDLE;\n        endcase\n    end\n\nendmodule"}
{"task_id": "gshare", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "module top_module(\n    input clk,\n    input areset, \n\n    input predict_valid,\n    input [6:0] predict_pc,\n    output predict_taken, \n    output [6:0] predict_history,\n\n    input train_valid,\n    input train_taken,\n    input train_mispredicted,\n    input [6:0] train_history, \n    input [6:0] train_pc\n);\n    // Global branch history register\n    reg [6:0] global_history;\n    // 128-entry table of two-bit saturating counters\n    reg [1:0] pht [127:0];\n    // Default initial values\n    initial begin\n        global_history = 7'b0;\n        for (int i = 0; i < 128; i++) begin\n            pht[i] = 2'b00;\n        end\n    end\n\n    // Update global history and PHT\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            global_history <= 7'b0;\n        end else if (train_valid) begin\n            global_history <= train_history;\n            if (train_mispredicted) begin\n                // Recover branch history\n            end else begin\n                // Update PHT\n            end\n        end else if (predict_valid) begin\n            global_history <= {global_history[6:1], predict_taken};\n        end\n    end\n\n    // Predict branch direction\n    always @(*) begin\n        if (predict_valid) begin\n            integer index;\n            index = predict_pc ^ global_history;\n            predict_taken = pht[index][1];\n            predict_history = global_history;\n        end else begin\n            predict_taken = 1'b0;\n            predict_history = 7'b0;\n        end\n    end\n\n    // Update PHT based on actual branch outcome\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            // Reset PHT\n        end else if (train_valid) begin\n            integer index;\n            index = train_pc ^ train_history;\n            if (train_taken) begin\n                if (pht[index] == 2'b11) begin\n                    pht[index] <= 2'b11;\n                end else begin\n                    pht[index] <= pht[index] + 1'b1;\n                end\n            end else begin\n                if (pht[index] == 2'b00) begin\n                    pht[index] <= 2'b00;\n                end else begin\n                    pht[index] <= pht[index] - 1'b1;\n                end\n            end\n        end\n    end\n\nendmodule"}
{"task_id": "lemmings4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n    localparam [2:0] WALK_LEFT = 3'd0, WALK_RIGHT = 3'd1, FALLING = 3'd2, DIGGING = 3'd3, SPLATTERED = 3'd4;\n    reg [2:0] state, next_state;\n    reg [4:0] fall_counter;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        next_state = state;\n        case (state)\n            WALK_LEFT: begin\n                if (bump_left)\n                    next_state = WALK_RIGHT;\n                else if (bump_right)\n                    next_state = WALK_LEFT;\n                else if (dig && ground)\n                    next_state = DIGGING;\n                else if (!ground)\n                    next_state = FALLING;\n            end\n            WALK_RIGHT: begin\n                if (bump_right)\n                    next_state = WALK_LEFT;\n                else if (bump_left)\n                    next_state = WALK_RIGHT;\n                else if (dig && ground)\n                    next_state = DIGGING;\n                else if (!ground)\n                    next_state = FALLING;\n            end\n            FALLING: begin\n                if (ground)\n                    next_state = state;\n                else if (fall_counter == 5'd20 && ground)\n                    next_state = SPLATTERED;\n            end\n            DIGGING: begin\n                if (!ground)\n                    next_state = FALLING;\n                else if (ground && fall_counter == 5'd1)\n                    next_state = state;\n            end\n            SPLATTERED: begin\n                next_state = SPLATTERED;\n            end\n        endcase\n    end\n\n    always @(posedge clk) begin\n        if (!ground)\n            fall_counter <= fall_counter + 1;\n        else\n            fall_counter <= 5'd0;\n    end\n\n    always @(*) begin\n        walk_left = (state == WALK_LEFT);\n        walk_right = (state == WALK_RIGHT);\n        aaah = (state == FALLING);\n        digging = (state == DIGGING);\n    end\n\nendmodule"}
{"task_id": "review2015_fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack\n);\n    // State encoding\n    localparam IDLE = 3'b000,\n               START = 3'b001,\n               COUNTING = 3'b010,\n               DONE = 3'b011,\n               ACK = 3'b100;\n\n    reg [2:0] state, next_state;\n\n    // State transition logic\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            IDLE:   next_state = (data == 1) ? START : IDLE;\n            START:  next_state = (data == 1) ? START : COUNTING;\n            COUNTING: next_state = (done_counting) ? DONE : COUNTING;\n            DONE:   next_state = (ack) ? IDLE : DONE;\n            ACK:    next_state = IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        shift_ena = (state == START) && (data == 1);\n        counting = (state == COUNTING);\n        done = (state == DONE);\n    end\n\nendmodule"}
{"task_id": "conwaylife", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [255:0] data,\n    output reg [255:0] q);\n    \n    parameter [2:0] NUM_NEIGH = 3'b000; // 0-1, 2, 3, 4+ neighbours\n    parameter [4:0] OFFSETS [8] = {5'd-1, 5'd1, 5'd-16, 5'd16, 5'd-17, 5'd-15, 5'd17, 5'd15}; // 8 neighbours offsets\n    parameter [4:0] TOROID_MASK = 5'd15; // Mask for toroidal wraparound\n    \n    always @(posedge clk) begin\n        if (load) q <= data; // Load initial data\n        else begin\n            q <= #1 {8{8{1'b0}}}; // Initialize q\n            for (int i = 0; i < 256; i++) begin\n                int count = 0;\n                for (int j = 0; j < 8; j++) begin\n                    int idx = i + OFFSETS[j];\n                    if (idx < 0) idx = -idx; // Handle negative indices\n                    if (idx >= 256) idx = idx - 256; // Handle indices greater than 255\n                    count += q[idx]; // Count number of alive neighbours\n                end\n                case (count)\n                    0, 1: q[i] <= 1'b0; // 0-1 neighbour\n                    2: q[i] <= q[i]; // 2 neighbours\n                    3: q[i] <= 1'b1; // 3 neighbours\n                    default: q[i] <= 1'b0; // 4+ neighbours\n                endcase\n            end\n        end\n    end\nendmodule"}
{"task_id": "lemmings3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n    // State encoding: 0b00: walk_left, 0b01: walk_right, 0b10: falling, 0b11: digging\n    reg [1:0] state, next_state;\n    wire falling;\n    wire start_fall;\n    wire start_dig;\n    wire bump_both_sides;\n\n    assign falling = (state == 2'b10);\n    assign start_fall = ~ground & ~falling;\n    assign start_dig = ground & dig & ~falling;\n    assign bump_both_sides = bump_left & bump_right;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 2'b00; // Initialize to walk left\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        next_state = state;\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n\n        case (state)\n            2'b00: begin\n                walk_left = 1'b1;\n                if (bump_right)\n                    next_state = 2'b01;\n                else if (bump_both_sides)\n                    next_state = 2'b01;\n                else if (start_fall)\n                    next_state = 2'b10;\n                else if (start_dig)\n                    next_state = 2'b11;\n            end\n            2'b01: begin\n                walk_right = 1'b1;\n                if (bump_left)\n                    next_state = 2'b00;\n                else if (bump_both_sides)\n                    next_state = 2'b00;\n                else if (start_fall)\n                    next_state = 2'b10;\n                else if (start_dig)\n                    next_state = 2'b11;\n            end\n            2'b10: begin\n                aaah = 1'b1;\n                if (ground)\n                    next_state = (state == 2'b00) ? 2'b00 : 2'b01;\n            end\n            2'b11: begin\n                digging = 1'b1;\n                if (!ground)\n                    next_state = 2'b10;\n            end\n        endcase\n    end\nendmodule"}
{"task_id": "count_clock", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input ena,\n    output reg pm,\n    output reg [7:0] hh,\n    output reg [7:0] mm,\n    output reg [7:0] ss);\n\nalways @(posedge clk) begin\n    if (reset) begin\n        pm <= 1'b0;\n        hh <= 8'd12; // 12:00 AM\n        mm <= 8'd00;\n        ss <= 8'd00;\n    end\n    else if (ena) begin\n        if (ss == 8'd59) begin\n            ss <= 8'd00;\n            if (mm == 8'd59) begin\n                mm <= 8'd00;\n                if (hh == 8'd12) begin\n                    hh <= 8'd1;\n                    pm <= ~pm;\n                end\n                else begin\n                    hh <= hh + 1;\n                end\n            end\n            else begin\n                mm <= mm + 1;\n            end\n        end\n        else begin\n            ss <= ss + 1;\n        end\n    end\nend\n\nendmodule"}
{"task_id": "lemmings2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    output walk_left,\n    output walk_right,\n    output aaah\n);\n\n    parameter LEFT = 2'b00, RIGHT = 2'b01, FALLING = 2'b10;\n    reg [1:0] current_state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= LEFT;\n        else\n            current_state <= next_state;\n    end\n\n    always @(*) begin\n        case (current_state)\n            LEFT: next_state = (ground == 1'b0) ? FALLING : (bump_right ? RIGHT : LEFT);\n            RIGHT: next_state = (ground == 1'b0) ? FALLING : (bump_left ? LEFT : RIGHT);\n            FALLING: next_state = (ground == 1'b1) ? current_state : FALLING;\n            default: next_state = LEFT;\n        endcase\n    end\n\n    always @(*) begin\n        walk_left = (current_state == LEFT) && (ground == 1'b1);\n        walk_right = (current_state == RIGHT) && (ground == 1'b1);\n        aaah = (current_state == FALLING);\n    end\n\nendmodule"}
{"task_id": "countbcd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output [3:1] ena,\n    output reg [15:0] q);\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        q <= 16'b0;\n    else begin\n        q[3:0] <= q[3:0] + 1'b1;\n        if (q[3:0] == 4'b1001) begin\n            q[3:0] <= 4'b0000;\n            if (q[7:4] == 4'b1001) begin\n                q[7:4] <= 4'b0000;\n                if (q[11:8] == 4'b1001) begin\n                    q[11:8] <= 4'b0000;\n                    if (q[15:12] == 4'b1001) begin\n                        q[15:12] <= 4'b0000;\n                    end else begin\n                        q[15:12] <= q[15:12] + 4'b0001;\n                    end\n                end else begin\n                    q[11:8] <= q[11:8] + 4'b0001;\n                end\n            end else begin\n                q[7:4] <= q[7:4] + 4'b0001;\n            end\n        end\n    end\nend\n\nassign ena[1] = q[11:8] == 4'b1001;\nassign ena[2] = q[7:4] == 4'b1001;\nassign ena[3] = q[3:0] == 4'b1001;\n\nendmodule"}
{"task_id": "mux2to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] a,\n    input [99:0] b,\n    input sel,\n    output [99:0] out\n);\n    assign out = sel ? b : a;\nendmodule"}
{"task_id": "m2014_q6b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "module top_module(\n    input [3:1] y,\n    input w,\n    output reg Y2);\n\nalways @(*) begin\n    case(y)\n        3'b000: Y2 = w;    // State A\n        3'b001: Y2 = 1'b0; // State B\n        3'b010: Y2 = 1'b0; // State C\n        3'b011: Y2 = 1'b1; // State D\n        3'b100: Y2 = 1'b1; // State E\n        3'b101: Y2 = 1'b0; // State F\n        default: Y2 = 1'bx;\n    endcase\nend\n\nendmodule"}
{"task_id": "ringer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "module top_module(\n    input ring, \n    input vibrate_mode,\n    output ringer,\n    output motor\n);\n    // Use a combinational logic block to control outputs based on inputs\n    always @(*) begin\n        if (vibrate_mode) begin\n            ringer = 1'b0;  // Turn off ringer\n            motor = 1'b1;   // Turn on motor\n        end else begin\n            ringer = 1'b1;  // Turn on ringer\n            motor = 1'b0;   // Turn off motor\n        end\n    end\nendmodule"}
{"task_id": "alwaysblock1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an AND gate using both an assign statement and a combinational always block. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out_assign,\n    output reg out_alwaysblock\n);\n    // Using assign statement for out_assign\n    assign out_assign = a & b;\n\n    // Using combinational always block for out_alwaysblock\n    always @(*) begin\n        out_alwaysblock = a & b;\n    end\nendmodule"}
{"task_id": "zero", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that always outputs a LOW.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput zero);\n", "completion": "module top_module(\n    output zero);\n    \n    assign zero = 1'b0; // Always output a LOW signal\n\nendmodule"}
{"task_id": "circuit7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg q\n);\n    \n    always @(posedge clk) begin\n        if (a)\n            q <= ~q;\n        else\n            q <= 1'b1;\n    end\n\nendmodule"}
{"task_id": "ece241_2014_q5a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n    \n    // State encoding\n    localparam S_IDLE = 2'b00;\n    localparam S_COMPLEMENT = 2'b01;\n    \n    reg [1:0] state, next_state;\n    reg carry;\n    \n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= S_IDLE;\n        else\n            state <= next_state;\n    end\n    \n    // Next state logic\n    always @(*) begin\n        case (state)\n            S_IDLE: next_state = x ? S_COMPLEMENT : S_IDLE;\n            S_COMPLEMENT: next_state = S_COMPLEMENT;\n            default: next_state = S_IDLE;\n        endcase\n    end\n    \n    // Output logic and carry propagation\n    always @(*) begin\n        case (state)\n            S_IDLE: z = 1'b0;\n            S_COMPLEMENT: z = carry ^ x;\n        endcase\n    end\n    \n    // Carry logic\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            carry <= 1'b0;\n        else if (state == S_COMPLEMENT)\n            carry <= carry ^ x;\n    end\n    \nendmodule"}
{"task_id": "fsm3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n    \n    localparam [1:0] A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n    reg [1:0] state, next_state;\n    wire out_signal;\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    assign out_signal = (state == D);\n    assign out = out_signal;\n\nendmodule"}
{"task_id": "vector2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that reverses the byte order of a 32-bit vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [31:0] in,\n    output [31:0] out\n);\n    assign out = {in[7:0], in[15:8], in[23:16], in[31:24]};\nendmodule"}
{"task_id": "m2014_q4c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a simple D flip flop with active high synchronous reset (reset output to 0).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input r,\n    output logic q\n);\n    logic q_next;\n    always @(posedge clk) begin\n        if (r)\n            q_next <= 1'b0;\n        else\n            q_next <= d;\n    end\n    always @(*) q = q_next;\nendmodule"}
{"task_id": "mt2015_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the boolean function z = (x^y) & x.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n    \n    assign z = (x ^ y) & x;\n\nendmodule"}
{"task_id": "shift18", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input ena,\n    input [1:0] amount,\n    input [63:0] data,\n    output reg [63:0] q);\n\nalways @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else if (ena) begin\n        case (amount)\n            2'b00: q <= {q[62:0], 1'b0}; // shift left by 1 bit\n            2'b01: q <= {q[55:0], 8'b0}; // shift left by 8 bits\n            2'b10: q <= {{q[63]}, q[62:1]}; // shift right by 1 bit (arithmetic)\n            2'b11: q <= {{q[63:8]}, q[7:0]}; // shift right by 8 bits (arithmetic)\n            default: q <= q; // retain current value\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "ece241_2013_q8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input aresetn,\n    input x,\n    output reg z\n);\n\nreg [1:0] state, next_state;\n\nlocalparam S0 = 2'b00;\nlocalparam S1 = 2'b01;\nlocalparam S2 = 2'b10;\n\nalways @(posedge clk or negedge aresetn) begin\n    if (!aresetn)\n        state <= S0;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case(state)\n        S0: next_state = (x) ? S1 : S0;\n        S1: next_state = (x) ? S2 : S0;\n        S2: next_state = (x) ? S1 : S0;\n        default: next_state = S0;\n    endcase\nend\n\nalways @(*) begin\n    case(state)\n        S2: z = 1'b1;\n        default: z = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n\n    // State encoding\n    localparam [2:0] A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n\n    // State register\n    reg [2:0] state, next_state;\n\n    // Next state logic\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Output logic\n    assign z = (state == E);\n\n    // Next state logic implementation\n    always @(*) begin\n        case (state)\n            A: next_state = w ? A : B;\n            B: next_state = w ? D : C;\n            C: next_state = w ? D : E;\n            D: next_state = w ? A : F;\n            E: next_state = w ? D : E;\n            F: next_state = w ? D : C;\n            default: next_state = A;\n        endcase\n    end\n\nendmodule"}
{"task_id": "fsm_ps2data", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output [23:0] out_bytes,\n    output done\n);\n    reg [7:0] byte1, byte2, byte3;\n    reg [2:0] state;\n    reg [23:0] message;\n    reg done_int;\n\n    // FSM states\n    localparam IDLE = 3'd0;\n    localparam BYTE1 = 3'd1;\n    localparam BYTE2 = 3'd2;\n    localparam BYTE3 = 3'd3;\n    localparam DONE = 3'd4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= IDLE;\n            done_int <= 1'b0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    if (in[3]) begin\n                        state <= BYTE1;\n                        byte1 <= in;\n                    end\n                end\n                BYTE1: begin\n                    byte1 <= in;\n                    state <= BYTE2;\n                end\n                BYTE2: begin\n                    byte2 <= in;\n                    state <= BYTE3;\n                end\n                BYTE3: begin\n                    byte3 <= in;\n                    state <= DONE;\n                end\n                DONE: begin\n                    state <= IDLE;\n                    done_int <= 1'b1;\n                    message <= {byte3, byte2, byte1};\n                end\n                default: state <= IDLE;\n            endcase\n        end\n    end\n\n    always @(posedge clk) begin\n        if (reset) begin\n            done <= 1'b0;\n        end else begin\n            done <= done_int;\n        end\n    end\n\n    assign out_bytes = message;\n\nendmodule"}
{"task_id": "2012_q2b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\n\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "module top_module (\n    input [5:0] y,\n    input w,\n    output Y1,\n    output Y3\n);\n    assign Y1 = y[2]; // State C (000100) sets Y1\n    assign Y3 = w & y[4] | ~w & y[1]; // E (010000) sets Y3 when w=1, D (001000) sets Y3 when w=0\nendmodule"}
{"task_id": "vector0", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "module top_module(\n    input [2:0] vec, \n    output [2:0] outv,\n    output o2,\n    output o1,\n    output o0\n);\n    // Pass the input vector to the output vector\n    assign outv = vec;\n    // Split the vector into individual bits\n    assign o0 = vec[0];\n    assign o1 = vec[1];\n    assign o2 = vec[2];\nendmodule"}
{"task_id": "kmap4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n\nalways @(*) begin\n    case({c,d,a,b})\n        4'b0000, 4'b0010, 4'b0101, 4'b0111, 4'b1000, 4'b1010, 4'b1101, 4'b1111: out = 1'b1;\n        default: out = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "vector1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "module top_module (\n    input [15:0] in,\n    output [7:0] out_hi,\n    output [7:0] out_lo\n);\n    assign out_hi = in[15:8];\n    assign out_lo = in[7:0];\nendmodule"}
{"task_id": "norgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = ~(a | b);\nendmodule"}
{"task_id": "alwaysblock2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "module top_module(\n    input clk,\n    input a, \n    input b,\n    output out_assign,\n    output reg out_always_comb,\n    output reg out_always_ff\n);\n    \n    // Using assign statement\n    assign out_assign = a ^ b;\n    \n    // Combinational always block\n    always @(*) begin\n        out_always_comb = a ^ b;\n    end\n    \n    // Clocked always block\n    always @(posedge clk) begin\n        out_always_ff <= a ^ b;\n    end\n\nendmodule"}
{"task_id": "m2014_q6c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "module top_module (\n    input [6:1] y,\n    input w,\n    output Y2,\n    output Y4\n);\n\nwire B, C, E, F;\n\nassign B = y[2];\nassign C = y[3];\nassign E = y[5];\nassign F = y[6];\n\n// Logic equations derived from the state transition diagram\nassign Y2 = (y[1] & w) | (B & ~w) | (C & ~w) | (F & ~w);\nassign Y4 = (C & w) | (E & w) | (F & ~w);\n\nendmodule"}
{"task_id": "mux256to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "module top_module (\n    input [255:0] in,\n    input [7:0] sel,\n    output  out\n);\n    assign out = in[sel];\nendmodule"}
{"task_id": "2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input w,\n    input R,\n    input E,\n    input L,\n    output reg Q\n);\n    \n    always @(posedge clk) begin\n        if (L)\n            Q <= R;\n        else if (E)\n            Q <= w;\n        else\n            Q <= Q;\n    end\n\nendmodule"}
{"task_id": "ece241_2014_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    output z\n);\n    \n    wire d1, d2, d3;\n    wire q1, q2, q3;\n    \n    // D flip-flops\n    always @(posedge clk) begin\n        q1 <= d1;\n        q2 <= d2;\n        q3 <= d3;\n    end\n    \n    // XOR gate\n    assign d1 = x ^ q1;\n    // AND gate\n    assign d2 = x & ~q2;\n    // OR gate\n    assign d3 = x | ~q3;\n    \n    // XNOR gate\n    assign z = ~(q1 ^ q2 ^ q3);\n    \nendmodule"}
{"task_id": "circuit4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n    \n    // q is the logical OR of c and d\n    assign q = c | d;\n\nendmodule"}
{"task_id": "rule110", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else begin\n            for (int i = 0; i < 512; i++) begin\n                case ({q[i-1], q[i], q[(i+1)%512]})\n                    3'b111: q[i] <= 1'b0;\n                    3'b110: q[i] <= 1'b1;\n                    3'b101: q[i] <= 1'b1;\n                    3'b100: q[i] <= 1'b0;\n                    3'b011: q[i] <= 1'b1;\n                    3'b010: q[i] <= 1'b1;\n                    3'b001: q[i] <= 1'b1;\n                    3'b000: q[i] <= 1'b0;\n                    default: q[i] <= 1'bx;\n                endcase\n            end\n        end\n    end\n\nendmodule"}
{"task_id": "fsm3s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n\n    // State encoding: A=0, B=1, C=2, D=3\n    localparam [1:0] A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n    reg [1:0] current_state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            current_state <= A;\n        else\n            current_state <= next_state;\n    end\n\n    always @(*) begin\n        case (current_state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A;\n        endcase\n    end\n\n    assign out = (current_state == D);\n\nendmodule"}
{"task_id": "circuit5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "module top_module (\n    input [3:0] a, \n    input [3:0] b, \n    input [3:0] c, \n    input [3:0] d,\n    input [3:0] e,\n    output reg [3:0] q\n);\n    always @(*) begin\n        case(c)\n            0: q = b;\n            1: q = e;\n            2: q = a;\n            3: q = d;\n            4: q = 4'hf;\n            default: q = 4'hf;\n        endcase\n    end\nendmodule"}
{"task_id": "bugs_mux2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFind the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input sel,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out\n);\n\n    always @(*) begin\n        out = (~sel & a) | (sel & b);\n    end\n\nendmodule"}
{"task_id": "mt2015_muxdff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "module top_module(\n    input clk,\n    input L,\n    input q_in,\n    input r_in,\n    output reg Q);\n\nalways @(posedge clk) begin\n    if (L)\n        Q <= r_in;\n    else\n        Q <= q_in ^ Q;\nend\n\nendmodule\n\nmodule full_module (\n    input [2:0] r,\n    input L,\n    input clk,\n    output reg [2:0] q\n);\n\n    top_module u0 (clk, L, 1'b0, r[0], q[0]);\n    top_module u1 (clk, L, q[0], r[1], q[1]);\n    top_module u2 (clk, L, q[1], r[2], q[2]);\n\nendmodule"}
{"task_id": "edgecapture", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input [31:0] in,\n    output reg [31:0] out);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            out <= 32'b0;\n        else\n            out <= (in & ~in[31:0] >> 1) | out;\n    end\nendmodule"}
{"task_id": "dff8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    output reg [7:0] q);\n\n    always @(posedge clk) begin\n        q <= d;\n    end\n\nendmodule"}
{"task_id": "ece241_2014_q1c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nAssume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [8:0] b, // Extend b to 9 bits to detect overflow\n    output [7:0] s,\n    output overflow\n);\n    wire [8:0] sum;\n    assign sum = {a[7], a} + {b[7], b}; // Add 9-bit extended values\n    assign s = sum[7:0]; // Output 8-bit result\n    assign overflow = sum[8] ^ sum[7]; // Detect overflow\nendmodule"}
{"task_id": "review2015_fsmonehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n);\n    // State transition logic\n    assign B3_next = &state[9:0]; // Always next is Count\n    assign S_next = (state == 10'b0000000001) & (d == 1'b0);\n    assign S1_next = (state == 10'b0000000010) & (d == 1'b0);\n    assign Count_next = (state == 10'b0000001000) | (state == 10'b0000000100 & done_counting);\n    assign Wait_next = (state == 10'b0000010000) & (ack == 1'b0);\n    \n    // Output logic\n    assign done = (state == 10'b0000010000);\n    assign counting = (state == 10'b0000010000);\n    assign shift_ena = (state[9:7] == 3'b100); // B0, B1, B2, B3\n    \n    // State transition for S11, S110, Count, Wait, Wait\n    assign state[9] = (state == 10'b0000000100 & d == 1'b0);\n    assign state[8] = (state == 10'b0000000100 & d == 1'b1);\n    assign state[7] = (state == 10'b0000001000 & !done_counting);\n    assign state[6] = (state == 10'b0000001000 & done_counting);\n    assign state[5] = (state == 10'b0000010000 & ack);\n    assign state[4] = (state == 10'b0000010000 & !ack);\nendmodule"}
{"task_id": "counter_2bc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 2'b01;\n        else if (train_valid) begin\n            if (train_taken)\n                state <= (state == 2'b11) ? 2'b11 : state + 1'b1;\n            else\n                state <= (state == 2'b00) ? 2'b00 : state - 1'b1;\n        end\n    end\nendmodule"}
{"task_id": "always_casez", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output reg [2:0] pos\n);\n    always @* begin\n        pos = 3'd0;\n        for (int i = 0; i < 8; i++) begin\n            if (in[i]) begin\n                pos = i;\n                break;\n            end\n        end\n    end\nendmodule"}
{"task_id": "always_nolatches", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "module top_module (\n    input [15:0] scancode,\n    output reg left,\n    output reg down,\n    output reg right,\n    output reg up\n);\n    always @(*) begin\n        left = (scancode == 16'hE06B);\n        down = (scancode == 16'hE072);\n        right = (scancode == 16'hE074);\n        up = (scancode == 16'hE075);\n    end\nendmodule"}
{"task_id": "m2014_q4j", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 4-bit adder with full adders. The output sum should include the overflow bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "module top_module (\n    input [3:0] x,\n    input [3:0] y,\n    output [4:0] sum\n);\nwire carry;\nassign {sum[4], sum[3:0]} = x + y;\n\nendmodule"}
{"task_id": "history_shift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            predict_history <= 32'b0;\n        end else if (train_mispredicted) begin\n            predict_history <= {train_history, train_taken};\n        end else if (predict_valid) begin\n            predict_history <= {predict_history[30:0], predict_taken};\n        end\n    end\nendmodule"}
{"task_id": "wire_decl", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out,\n    output out_n\n);\n\nwire and_out1, and_out2;\n\nand (and_out1, a, b);\nand (and_out2, c, d);\nor (out, and_out1, and_out2);\nnot (out_n, out);\n\nendmodule"}
{"task_id": "dff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a single D flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q\n);\n    always @(posedge clk) begin\n        q <= d;\n    end\nendmodule"}
{"task_id": "ece241_2013_q12", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "module top_module (\n    input clk,\n    input enable,\n    input S,\n    input A,\n    input B,\n    input C,\n    output reg Z\n);\n\n    reg [7:0] shift_reg;\n    \n    always @(posedge clk) begin\n        if (enable)\n            shift_reg <= {shift_reg[6:0], S};\n    end\n    \n    always @(*) begin\n        case ({A,B,C})\n            3'b000: Z = shift_reg[0];\n            3'b001: Z = shift_reg[1];\n            3'b010: Z = shift_reg[2];\n            3'b011: Z = shift_reg[3];\n            3'b100: Z = shift_reg[4];\n            3'b101: Z = shift_reg[5];\n            3'b110: Z = shift_reg[6];\n            3'b111: Z = shift_reg[7];\n            default: Z = 1'b0;\n        endcase\n    end\n\nendmodule"}
{"task_id": "thermostat", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "module top_module(\n    input mode,\n    input too_cold, \n    input too_hot,\n    input fan_on,\n    output heater,\n    output aircon,\n    output fan\n);\n\n    // Assign heater and aircon based on mode and temperature conditions\n    assign heater = mode & too_cold;\n    assign aircon = ~mode & too_hot;\n\n    // Fan control logic\n    assign fan = heater | aircon | fan_on;\n\nendmodule"}
{"task_id": "ece241_2013_q2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out_sop,\n    output out_pos\n);\n\n    assign out_sop = (a & ~b & ~c & ~d) | (~a & b & ~c & ~d) | (~a & ~b & c & ~d) | (~a & ~b & ~c & d);\n    assign out_pos = ~(a | c) & ~(a | d) & ~(b | d) & ~(b | c);\n\nendmodule"}
{"task_id": "lfsr32", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [31:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 32'h1;\n        else\n            q <= {q[30:0], q[31] ^ q[21] ^ q[1] ^ q[0]};\n    end\n\nendmodule"}
{"task_id": "circuit3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n    wire [1:0] temp;\n\n    // Priority encoder to generate temp based on inputs b, c, and d\n    assign {temp[1], temp[0]} = {b, c, d} ? 3'b11 : 3'b00;\n    // Output q is determined by a and temp\n    assign q = a ? ~temp[1] : temp[0];\nendmodule"}
{"task_id": "7420", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d, \n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n    // 4-input NAND gate for p1y\n    assign p1y = ~(p1a & p1b & p1c & p1d);\n    // 4-input NAND gate for p2y\n    assign p2y = ~(p2a & p2b & p2c & p2d);\nendmodule"}
{"task_id": "popcount255", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input [254:0] in,\n    output reg [7:0] out\n);\n    // Sliding window population count\n    genvar i;\n    generate\n        for (i = 0; i < 16; i = i + 1) begin : popcount\n            reg [7:0] pop;\n            always @* begin\n                pop = 0;\n                if (in[i*16 +: 16] != 16'b0) pop = 1;\n            end\n            assign out[i] = pop;\n        end\n    endgenerate\n    // Sum up individual counts\n    assign out = out[7] + out[6] + out[5] + out[4] + out[3] + out[2] + out[1] + out[0];\nendmodule"}
{"task_id": "gatesv", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output [2:0] out_both,\n    output [3:1] out_any,\n    output [3:0] out_different\n);\n    assign out_both = {in[3] & in[3], in[2] & in[3], in[1] & in[2]};\n    assign out_any = {in[3] | in[0], in[2] | in[1], in[1] | in[0], in[0] | in[3]};\n    assign out_different = {in[3] ^ in[0], in[2] ^ in[3], in[1] ^ in[2], in[0] ^ in[1]};\nendmodule"}
{"task_id": "circuit6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "module top_module (\n    input [2:0] a, \n    output reg [15:0] q\n);\nalways @(*) begin\n    case(a)\n        3'b000: q = 16'h1232;\n        3'b001: q = 16'hAEE0;\n        3'b010: q = 16'h27D4;\n        3'b011: q = 16'h5A0E;\n        3'b100: q = 16'h2066;\n        3'b101: q = 16'h64CE;\n        3'b110: q = 16'hC526;\n        3'b111: q = 16'h2F19;\n        default: q = 16'h0000;\n    endcase\nend\nendmodule"}
{"task_id": "countslow", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input slowena,\n    input reset,\n    output reg [3:0] q\n);\n    always @(posedge clk) begin\n        if (reset)\n            q <= 4'd0;\n        else if (slowena)\n            q <= (q == 4'd9) ? 4'd0 : q + 1'b1;\n    end\nendmodule"}
{"task_id": "m2014_q4f", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    logic not_in2;\n    \n    // Invert the in2 signal due to the bubble\n    assign not_in2 = ~in2;\n    \n    // AND gate with in1 and the inverted in2 signal\n    assign out = in1 & not_in2;\nendmodule"}
{"task_id": "m2014_q4h", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module assigns the output port to the same value as the input port combinationally.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out);\n    \n    assign out = in;\n\nendmodule"}
{"task_id": "fsm1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n    localparam [1:0] B = 2'b10, A = 2'b01;\n    reg [1:0] state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= B;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case(state)\n            B: next_state = in ? B : A;\n            A: next_state = in ? A : B;\n            default: next_state = B;\n        endcase\n    end\n\n    always @(*) begin\n        case(state)\n            B: out = 1'b1;\n            A: out = 1'b0;\n            default: out = 1'b1;\n        endcase\n    end\nendmodule"}
{"task_id": "dualedge", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q);\n\n    // Use a reg to store the previous clock state\n    reg prev_clk;\n    always @(posedge clk) prev_clk <= clk;\n\n    // Toggle the output on each rising edge of clk\n    always @(posedge clk) begin\n        if (prev_clk == 0)\n            q <= d;\n    end\n\nendmodule"}
{"task_id": "xnorgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an XNOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = ~(a ^ b); // XNOR operation\nendmodule"}
{"task_id": "mt2015_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nModule A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n\n    wire a1_out, a2_out, b1_out, b2_out, or_out, and_out;\n\n    // Instantiate submodules\n    A a1(.x(x), .y(y), .z(a1_out));\n    A a2(.x(x), .y(y), .z(a2_out));\n    B b1(.x(x), .y(y), .z(b1_out));\n    B b2(.x(x), .y(y), .z(b2_out));\n\n    // Connect submodules to OR and AND gates\n    or gate1(a1_out, b1_out, or_out);\n    and gate2(a2_out, b2_out, and_out);\n\n    // Connect OR and AND to XOR\n    xor gate3(or_out, and_out, z);\n\nendmodule\n\nmodule A(\n    input x,\n    input y,\n    output z);\n    assign z = (x ^ y) & x;\nendmodule\n\nmodule B(\n    input x,\n    input y,\n    output z);\n    // Implement B module according to the given waveform\n    // The output z follows the pattern where it is 1 for the first 5 time units and then follows a specific pattern\n    // This implementation assumes a clock of 5ns and uses a counter to determine the output\n    reg [3:0] counter;\n    always @(posedge x or posedge y) begin\n        if (counter == 4'd9)\n            counter <= 4'd0;\n        else\n            counter <= counter + 1'b1;\n    end\n    assign z = (counter < 4'd1) ? 1'b1 : (counter > 4'd4 && counter < 4'd8) ? 1'b1 : 1'b0;\nendmodule"}
{"task_id": "rotate100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [1:0] ena,\n    input [99:0] data,\n    output reg [99:0] q);\n\nalways @(posedge clk) begin\n    if (load)\n        q <= data; // Load data\n    else if (ena == 2'b01)\n        q <= {q[0], q[99:1]}; // Rotate right\n    else if (ena == 2'b10)\n        q <= {q[98:0], q[99]}; // Rotate left\n    end\n\nendmodule"}
{"task_id": "review2015_count1k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [9:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 10'd0;\n        else if (q == 10'd999)\n            q <= 10'd0;\n        else\n            q <= q + 1'b1;\n    end\n\nendmodule"}
{"task_id": "notgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOT gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = ~in;\nendmodule"}
{"task_id": "fsm_onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "module top_module (\n    input in,\n    input [9:0] state,\n    output [9:0] next_state,\n    output out1,\n    output out2);\n\n    // State transition logic\n    assign next_state = state[0] ? {9'b0, in} : // S0\n                        state[1] ? {9'b0, ~in, 1'b0} : // S1\n                        state[2] ? {9'b0, ~in, 2'b0} : // S2\n                        state[3] ? {9'b0, ~in, 3'b0} : // S3\n                        state[4] ? {9'b0, ~in, 4'b0} : // S4\n                        state[5] ? {~in, 5'b0, in} : // S5\n                        state[6] ? {~in, 6'b0, ~in, 1'b0} : // S6\n                        state[7] ? {7'b0, 1'b0} : // S7\n                        state[8] ? {9'b0, in} : // S8\n                        state[9] ? {9'b0, in} : // S9\n                        10'b0; // Default state\n\n    // Output logic\n    assign {out2, out1} = state[7] ? 2'b01 : 2'b00; // S7 sets out1 to 1\n\nendmodule"}
{"task_id": "ece241_2013_q7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    output reg Q\n);\n\nalways @(posedge clk) begin\n    case ({j, k})\n        2'b00: Q <= Q; // Hold state\n        2'b01: Q <= 1'b0; // Reset\n        2'b10: Q <= 1'b1; // Set\n        2'b11: Q <= ~Q; // Toggle\n    endcase\nend\n\nendmodule"}
{"task_id": "popcount3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "module top_module (\n    input [2:0] in,\n    output [1:0] out\n);\n    assign out = in[0] + in[1] + in[2]; // Sum the bits to get the count\nendmodule"}
{"task_id": "vector5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    input e,\n    output [24:0] out\n);\n    \n    assign out[24] = ~a ^ a;\n    assign out[23] = ~a ^ b;\n    assign out[22] = ~a ^ c;\n    assign out[21] = ~a ^ d;\n    assign out[20] = ~a ^ e;\n    assign out[19] = ~b ^ a;\n    assign out[18] = ~b ^ b;\n    assign out[17] = ~b ^ c;\n    assign out[16] = ~b ^ d;\n    assign out[15] = ~b ^ e;\n    assign out[14] = ~c ^ a;\n    assign out[13] = ~c ^ b;\n    assign out[12] = ~c ^ c;\n    assign out[11] = ~c ^ d;\n    assign out[10] = ~c ^ e;\n    assign out[9] = ~d ^ a;\n    assign out[8] = ~d ^ b;\n    assign out[7] = ~d ^ c;\n    assign out[6] = ~d ^ d;\n    assign out[5] = ~d ^ e;\n    assign out[4] = ~e ^ a;\n    assign out[3] = ~e ^ b;\n    assign out[2] = ~e ^ c;\n    assign out[1] = ~e ^ d;\n    assign out[0] = ~e ^ e;\n    \nendmodule"}
{"task_id": "lemmings1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    output walk_left,\n    output walk_right\n);\n\nreg state, next_state;\n\n// State encoding: 0 - walk_left, 1 - walk_right\nalways @(posedge clk or posedge areset) begin\n    if (areset)\n        state <= 1'b0; // Reset to walk_left\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        1'b0: next_state = bump_left ? 1'b1 : 1'b0; // walk_left -> walk_right if bumped left\n        1'b1: next_state = bump_right ? 1'b0 : 1'b1; // walk_right -> walk_left if bumped right\n        default: next_state = 1'b0; // Default to walk_left\n    endcase\nend\n\nassign walk_left = ~state;\nassign walk_right = state;\n\nendmodule"}
{"task_id": "circuit1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    output q\n);\n    assign q = a & b;\nendmodule"}
{"task_id": "7458", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d,\n    input p1e,\n    input p1f,\n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n    \n    // Intermediate signals for AND gates\n    wire and1, and2, and3, and4;\n\n    // AND gate outputs\n    assign and1 = p1a & p1b & p1c;\n    assign and2 = p1d & p1e & p1f;\n    assign and3 = p2a & p2b;\n    assign and4 = p2c & p2d;\n\n    // OR gate outputs\n    assign p1y = and1 | and2;\n    assign p2y = and3 | and4;\n\nendmodule"}
{"task_id": "2014_q3c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    input [2:0] y,\n    output reg Y0,\n    output reg z\n);\n\nreg [2:0] next_state;\n\nalways @(posedge clk) begin\n    case(y)\n        3'b000: next_state <= x ? 3'b001 : 3'b000;\n        3'b001: next_state <= x ? 3'b100 : 3'b001;\n        3'b010: next_state <= x ? 3'b001 : 3'b010;\n        3'b011: next_state <= x ? 3'b010 : 3'b001;\n        3'b100: next_state <= x ? 3'b100 : 3'b011;\n        default: next_state <= 3'b000;\n    endcase\nend\n\nalways @(posedge clk) begin\n    {Y0, z} <= {next_state[0], (y == 3'b011 || y == 3'b100)};\nend\n\nendmodule"}
{"task_id": "m2014_q4e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 2-input NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    assign out = ~(in1 | in2);\nendmodule"}
{"task_id": "wire4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    output w,\n    output x,\n    output y,\n    output z\n);\n    assign w = a;\n    assign x = b;\n    assign y = b;\n    assign z = c;\nendmodule"}
{"task_id": "m2014_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input ar,\n    output logic q\n);\n    always @(posedge clk or posedge ar) begin\n        if (ar)\n            q <= 1'b0; // Asynchronous reset\n        else\n            q <= d; // D flip flop behavior\n    end\nendmodule"}
{"task_id": "always_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "module top_module (\n    input [2:0] sel,\n    input [3:0] data0,\n    input [3:0] data1,\n    input [3:0] data2,\n    input [3:0] data3,\n    input [3:0] data4,\n    input [3:0] data5,\n    output reg [3:0] out\n);\n    always @(*) begin\n        case (sel)\n            3'b000: out = data0;\n            3'b001: out = data1;\n            3'b010: out = data2;\n            3'b011: out = data3;\n            3'b100: out = data4;\n            3'b101: out = data5;\n            default: out = 4'b0000;\n        endcase\n    end\nendmodule"}
{"task_id": "timer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "module top_module(\n    input clk, \n    input load, \n    input [9:0] data, \n    output tc\n);\nreg [9:0] counter;\n\nalways @(posedge clk) begin\n    if (load) begin\n        counter <= data;  // Load the counter with the provided data\n    end\n    else if (counter > 0) begin\n        counter <= counter - 1'b1; // Decrement counter\n    end\nend\n\nassign tc = (counter == 10'd0); // Terminal count signal\n\nendmodule"}
{"task_id": "review2015_fsmseq", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg start_shifting\n);\n\n// State encoding: 0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111\nlocalparam IDLE = 4'b0000;\nlocalparam S1 = 4'b0001;\nlocalparam S2 = 4'b0010;\nlocalparam S3 = 4'b0011;\nlocalparam FOUND = 4'b0100;\n\nreg [3:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= IDLE;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        IDLE: next_state = (data == 1'b1) ? S1 : IDLE;\n        S1: next_state = (data == 1'b1) ? S2 : IDLE;\n        S2: next_state = (data == 1'b0) ? S3 : IDLE;\n        S3: next_state = (data == 1'b1) ? FOUND : IDLE;\n        FOUND: next_state = FOUND;\n        default: next_state = IDLE;\n    endcase\nend\n\nalways @(*) begin\n    start_shifting = (state == FOUND);\nend\n\nendmodule"}
{"task_id": "dff8r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 8'b0;\n        else\n            q <= d;\n    end\n\nendmodule"}
{"task_id": "edgedetect2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] anyedge);\n\n    always @(posedge clk) begin\n        anyedge <= (in & ~in[7:0] >>> 1) & ~anyedge;\n    end\n\nendmodule"}
{"task_id": "count1to10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nMake a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q\n);\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'd1; // Reset counter to 1\n        else\n            q <= (q == 4'd10) ? 4'd1 : q + 1'b1; // Increment counter or wrap to 1\n    end\nendmodule"}
{"task_id": "circuit9", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg [2:0] q\n);\n\nalways @(posedge clk) begin\n    if (a == 1'b0 && q == 3'b100) begin\n        q <= 3'b000;\n    end else if (a == 1'b0) begin\n        q <= q + 1'b1;\n    end else begin\n        q <= 3'b100;\n    end\nend\n\nendmodule"}
{"task_id": "lfsr5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [4:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 5'b00001; // Reset to 1 (5-bit LFSR)\n        else\n            q <= {q[3], q[3] ^ q[4], q[2], q[1], q[0]}; // Galois LFSR update with taps at positions 5 and 3\n    end\n\nendmodule"}
{"task_id": "bugs_addsubz", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "module top_module (\n    input do_sub,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out,\n    output reg result_is_zero\n);\n    \n    always @(*) begin\n        case (do_sub)\n            0: out = a + b;\n            1: out = a - b;\n        endcase\n        result_is_zero = (out == 8'd0);\n    end\nendmodule"}
{"task_id": "m2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n    \n    // Function implementation using a combinational always block\n    always @(*) begin\n        case (x)\n            4'h1, 4'h5, 4'h6, 4'h7, 4'h9, 4'hB, 4'hC, 4'hF: f = 1'b1; // Set f to 1 for these cases\n            4'h2, 4'h4, 4'h8, 4'ha: f = 1'b0; // Set f to 0 for these cases\n            default: f = 1'bx; // Default case for don't-care\n        endcase\n    end\n\nendmodule"}
{"task_id": "bugs_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "module top_module (\n    input [7:0] code,\n    output reg [3:0] out,\n    output reg valid\n);\n    always @(*) begin\n        case(code)\n            8'h45: begin out = 4'd0; valid = 1'b1; end\n            8'h16: begin out = 4'd1; valid = 1'b1; end\n            8'h1e: begin out = 4'd2; valid = 1'b1; end\n            8'h26: begin out = 4'd3; valid = 1'b1; end\n            8'h25: begin out = 4'd4; valid = 1'b1; end\n            8'h2e: begin out = 4'd5; valid = 1'b1; end\n            8'h36: begin out = 4'd6; valid = 1'b1; end\n            8'h3d: begin out = 4'd7; valid = 1'b1; end\n            8'h3e: begin out = 4'd8; valid = 1'b1; end\n            8'h46: begin out = 4'd9; valid = 1'b1; end\n            default: begin out = 4'd0; valid = 1'b0; end\n        endcase\n    end\nendmodule"}
{"task_id": "vectorr", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven an 8-bit input vector [7:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [7:0] out\n);\n    assign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\nendmodule"}
{"task_id": "kmap3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n\n    always @(*) begin\n        case ({c, b, a})\n            3'b000, 3'b001, 3'b010, 3'b011: out = 1'b0;\n            3'b100, 3'b101: out = 1'b1;\n            3'b110, 3'b111: out = 1'b1;\n            default: out = 1'bx; // Don't care case\n        endcase\n    end\n\nendmodule"}
{"task_id": "review2015_shiftcount", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input shift_ena,\n    input count_ena,\n    input data,\n    output reg [3:0] q);\n\n    always @(posedge clk) begin\n        if (shift_ena) begin\n            q <= {data, q[3:1]};\n        end\n        else if (count_ena) begin\n            q <= q - 1'b1;\n        end\n    end\n\nendmodule"}
{"task_id": "wire", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with one input and one output that behaves like a wire.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = in;\nendmodule"}
{"task_id": "review2015_fsmshift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output shift_ena);\n    \n    reg [1:0] count;\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            count <= 2'b00;\n        else if (count == 2'b11)\n            count <= 2'b00;\n        else\n            count <= count + 1'b1;\n    end\n    \n    assign shift_ena = (reset | (count == 2'b00)) & (count < 2'b10);\n    \nendmodule"}
{"task_id": "count15", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q\n);\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'b0000;\n        else\n            q <= q + 1;\n    end\nendmodule"}
{"task_id": "always_if", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel_b1,\n    input sel_b2,\n    output out_assign,\n    output reg out_always\n);\n\n    // Using assign statement for the first mux\n    assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\n    // Using always block for the second mux\n    always @(*) begin\n        if (sel_b1 & sel_b2)\n            out_always = b;\n        else\n            out_always = a;\n    end\n\nendmodule"}
{"task_id": "kmap1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    input c,\n    output out\n);\n    wire tmp;\n\n    // Implementing the Karnaugh map logic\n    assign tmp = b & (~c);\n    assign out = tmp | a;\n\nendmodule"}
{"task_id": "2013_q2afsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input [3:1] r,\n    output [3:1] g\n);\n\n    localparam [2:0] A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011;\n    reg [2:0] state, next_state;\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            A: begin\n                if (r[1])\n                    next_state = B;\n                else if (r[2])\n                    next_state = C;\n                else if (r[3])\n                    next_state = D;\n                else\n                    next_state = A;\n            end\n            B: next_state = r[1] ? B : A;\n            C: next_state = r[2] ? C : A;\n            D: next_state = D; // Device 3 has lowest priority, hence always D\n            default: next_state = A;\n        endcase\n    end\n\n    assign g = {r[1] & (state == B), r[2] & (state == C), r[3] & (state == D)};\n\nendmodule"}
{"task_id": "count10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q\n);\n    always @(posedge clk) begin\n        if (reset)\n            q <= 4'b0000; // Reset to 0\n        else if (q == 4'b1001) // Count up to 9\n            q <= 4'b0000;\n        else\n            q <= q + 1'b1;\n    end\nendmodule"}
{"task_id": "fsm_ps2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output reg done\n);\n    reg [2:0] counter;\n    reg [7:0] buffer [2:0];\n    reg [7:0] current_byte;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            counter <= 3'b000;\n            done <= 1'b0;\n            current_byte <= 8'b0;\n        end else begin\n            if (in[3]) begin\n                if (counter == 3'b100) begin\n                    counter <= 3'b000;\n                    done <= 1'b1;\n                end else begin\n                    buffer[counter] <= in;\n                    counter <= counter + 1'b1;\n                    done <= 1'b0;\n                end\n            end else begin\n                current_byte <= in;\n            end\n        end\n    end\n\nendmodule"}
{"task_id": "mux2to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel,\n    output out\n);\n    assign out = sel ? b : a;\nendmodule"}
{"task_id": "gates4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and = &in;  // 4-input AND gate\n    assign out_or = |in;   // 4-input OR gate\n    assign out_xor = ^in;  // 4-input XOR gate\n\nendmodule"}
{"task_id": "2014_q3bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input x,\n    output reg z\n);\n\nreg [2:0] y;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        y <= 3'b000;\n        z <= 1'b0;\n    end else begin\n        case (y)\n            3'b000: begin\n                if (x) y <= 3'b001;\n                else y <= 3'b000;\n                z <= 1'b0;\n            end\n            3'b001: begin\n                if (x) y <= 3'b100;\n                else y <= 3'b001;\n                z <= 1'b0;\n            end\n            3'b010: begin\n                if (x) y <= 3'b001;\n                else y <= 3'b010;\n                z <= 1'b0;\n            end\n            3'b011: begin\n                if (x) y <= 3'b100;\n                else y <= 3'b010;\n                z <= 1'b1;\n            end\n            3'b100: begin\n                if (x) y <= 3'b100;\n                else y <= 3'b011;\n                z <= 1'b1;\n            end\n            default: begin\n                y <= 3'b000;\n                z <= 1'b0;\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "2013_q2bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input x,\n    input y,\n    output f,\n    output g\n);\n    \n    localparam A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n    reg [1:0] state, next_state;\n    reg f_reg, g_reg;\n    \n    // State register\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn) begin\n            state <= A;\n            f_reg <= 0;\n            g_reg <= 0;\n        end else begin\n            state <= next_state;\n            f_reg <= (state == B);\n            g_reg <= (state == D);\n        end\n    end\n    \n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = resetn ? B : A;\n            B: next_state = A;\n            C: next_state = (x) ? D : C;\n            D: next_state = (y) ? D : (x) ? C : D;\n            default: next_state = A;\n        endcase\n    end\n    \n    // Output logic\n    assign f = f_reg;\n    assign g = g_reg;\n    \nendmodule"}
{"task_id": "dff8p", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n\n    always @(negedge clk or posedge reset) begin\n        if (reset)\n            q <= 8'h34; // Reset all flip-flops to 0x34\n        else\n            q <= d; // Load input data\n    end\n\nendmodule"}
{"task_id": "reduction", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nParity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output parity\n);\n    assign parity = ^in;\nendmodule"}
{"task_id": "fsm3comb", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [1:0] state,\n    output reg [1:0] next_state,\n    output out\n);\nalways @(*) begin\n    case (state)\n        2'b00: begin // State A\n            if (in) next_state = 2'b01;\n            else next_state = 2'b00;\n            out = 1'b0;\n        end\n        2'b01: begin // State B\n            if (in) next_state = 2'b01;\n            else next_state = 2'b10;\n            out = 1'b0;\n        end\n        2'b10: begin // State C\n            if (in) next_state = 2'b11;\n            else next_state = 2'b00;\n            out = 1'b0;\n        end\n        2'b11: begin // State D\n            if (in) next_state = 2'b10;\n            else next_state = 2'b01;\n            out = 1'b1;\n        end\n        default: begin\n            next_state = 2'b00;\n            out = 1'b0;\n        end\n    endcase\nend\nendmodule"}
{"task_id": "mt2015_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n    \n    // z is asserted when both x and y are high, or when x is low and y is high\n    assign z = (x & y) | (~x & y);\n    \nendmodule"}
{"task_id": "2012_q2fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n\n    // State encoding\n    localparam [2:0] A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n\n    reg [2:0] state, next_state;\n\n    // Next state logic\n    always @(*) begin\n        case(state)\n            A: next_state = w ? B : A;\n            B: next_state = w ? C : D;\n            C: next_state = w ? E : D;\n            D: next_state = w ? F : A;\n            E: next_state = w ? E : D;\n            F: next_state = w ? C : D;\n            default: next_state = A;\n        endcase\n    end\n\n    // State register\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Output logic\n    assign z = (state == E);\n\nendmodule"}
{"task_id": "dff16e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input resetn,\n    input [1:0] byteena,\n    input [15:0] d,\n    output reg [15:0] q);\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            q <= 16'b0;\n        else begin\n            if (byteena[1])\n                q[15:8] <= d[15:8];\n            if (byteena[0])\n                q[7:0] <= d[7:0];\n        end\n    end\n\nendmodule"}
{"task_id": "edgedetect", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] pedge);\n\n    always @(posedge clk) begin\n        for (int i = 0; i < 8; i = i + 1) begin\n            pege[i] <= in[i] & ~in[i][1:0]; // Detect 0 to 1 transition\n        end\n    end\n\nendmodule"}
{"task_id": "circuit8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "module top_module (\n    input clock,\n    input a, \n    output reg p,\n    output reg q\n);\n\n    always @(posedge clock) begin\n        if (a)\n            q <= ~q;\n        else\n            p <= ~p;\n    end\n\nendmodule"}
{"task_id": "rule90", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q);\n    \n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else\n            q <= {q[510:0], 1'b0} ^ {1'b0, q[511:1]};\n    end\nendmodule"}
{"task_id": "mt2015_eq2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "module top_module(\n    input [1:0] A,\n    input [1:0] B,\n    output z\n);\n    assign z = (A == B);\nendmodule"}
{"task_id": "gatesv100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output [98:0] out_both,\n    output [99:1] out_any,\n    output [99:0] out_different\n);\n    \n    genvar i;\n    generate\n        for (i = 0; i < 99; i = i + 1) begin : both_gen\n            assign out_both[i] = in[i] & in[i+1];\n        end\n        for (i = 1; i <= 99; i = i + 1) begin : any_gen\n            assign out_any[i] = in[i-1] | in[i];\n        end\n        for (i = 0; i < 100; i = i + 1) begin : diff_gen\n            assign out_different[i] = in[i] != in[(i+1)%100];\n        end\n    endgenerate\n\nendmodule"}
{"task_id": "m2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D latch using an always block.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input d,\n    input ena,\n    output logic q\n);\n    always @(posedge ena) begin\n        q <= d;\n    end\nendmodule"}
{"task_id": "mux256to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "module top_module (\n    input [1023:0] in,\n    input [7:0] sel,\n    output [3:0] out\n);\n    \n    // Calculate the starting bit index for the selected 4-bit segment\n    wire [9:0] start_bit = {sel[7:3], 2'b00};\n    \n    // Connect the selected 4-bit segment to the output\n    assign out = in[start_bit+3:start_bit];\n\nendmodule"}
{"task_id": "mux9to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "module top_module (\n    input [15:0] a,\n    input [15:0] b,\n    input [15:0] c,\n    input [15:0] d,\n    input [15:0] e,\n    input [15:0] f,\n    input [15:0] g,\n    input [15:0] h,\n    input [15:0] i,\n    input [3:0] sel,\n    output logic [15:0] out\n);\nalways_comb begin\n    case(sel)\n        4'd0: out = a;\n        4'd1: out = b;\n        4'd2: out = c;\n        4'd3: out = d;\n        4'd4: out = e;\n        4'd5: out = f;\n        4'd6: out = g;\n        4'd7: out = h;\n        4'd8: out = i;\n        default: out = 16'hFFFF;\n    endcase\nend\nendmodule"}
{"task_id": "vectorgates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "module top_module(\n    input [2:0] a, \n    input [2:0] b, \n    output [2:0] out_or_bitwise,\n    output out_or_logical,\n    output [5:0] out_not\n);\n    // Bitwise OR\n    assign out_or_bitwise = a | b;\n    // Logical OR\n    assign out_or_logical = (a != 3'b0) | (b != 3'b0);\n    // Inverse outputs\n    assign out_not[5:3] = ~b;  // Inverse of b\n    assign out_not[2:0] = ~a;  // Inverse of a\nendmodule"}
{"task_id": "fsm3onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [3:0] state,\n    output reg [3:0] next_state,\n    output out\n);\n\nalways @(*) begin\n    // State transition logic\n    case(state)\n        4'b0001: next_state = in ? 4'b0001 : 4'b0010; // A to A or B\n        4'b0010: next_state = in ? 4'b0010 : 4'b0100; // B to B or C\n        4'b0100: next_state = in ? 4'b1000 : 4'b0001; // C to D or A\n        4'b1000: next_state = in ? 4'b0100 : 4'b0010; // D to C or B\n        default: next_state = 4'b0001; // Default to A\n    endcase\nend\n\nassign out = (state == 4'b1000); // Output logic\n\nendmodule"}
{"task_id": "conditional", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [7:0] b,\n    input [7:0] c,\n    input [7:0] d,\n    output reg [7:0] min\n);\n    always @(*) begin\n        if (a < b) begin\n            min = a < c ? a < d ? a : d : c < d ? c : d;\n        end else begin\n            min = b < c ? b < d ? b : d : c < d ? c : d;\n        end\n    end\nendmodule"}
{"task_id": "gates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output out_and,\n    output out_or,\n    output out_xor,\n    output out_nand,\n    output out_nor,\n    output out_xnor,\n    output out_anotb\n);\n    assign out_and = a & b;  // AND operation\n    assign out_or = a | b;   // OR operation\n    assign out_xor = a ^ b;  // XOR operation\n    assign out_nand = ~(a & b); // NAND operation\n    assign out_nor = ~(a | b);  // NOR operation\n    assign out_xnor = ~(a ^ b); // XNOR operation\n    assign out_anotb = a & ~b;  // AND operation with NOT b\nendmodule"}
{"task_id": "kmap2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output out\n);\n    assign out = (a & ~b & ~c) | (~a & ~b & ~c) | (a & b & ~d) | (a & ~b & d);\nendmodule"}
{"task_id": "2014_q3fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input s,\n    input w,\n    output reg z\n);\n    \n    parameter A = 1'b0, B = 1'b1;\n    reg state, next_state;\n    reg [1:0] w_count;\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n    \n    always @(*) begin\n        if (reset)\n            next_state = A;\n        else if (state == A && s)\n            next_state = B;\n        else\n            next_state = state;\n    end\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            w_count <= 2'b00;\n        else if (state == B)\n            w_count <= {w_count[0], w};\n    end\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            z <= 1'b0;\n        else if (state == B && w_count == 2'b10)\n            z <= 1'b1;\n        else\n            z <= 1'b0;\n    end\nendmodule"}
{"task_id": "vector4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nOne common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [31:0] out\n);\n    assign out = {{24{in[7]}}, in};\nendmodule"}
{"task_id": "m2014_q4k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a shift register with four D flops. Reset is active-low synchronous resettable.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input in,\n    output out\n);\n    \n    reg [3:0] shift_reg;\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn) begin\n            shift_reg <= 4'b0000;\n        end else begin\n            shift_reg <= {shift_reg[2:0], in};\n        end\n    end\n\n    assign out = shift_reg[3];\n\nendmodule"}
{"task_id": "always_case2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output reg [1:0] pos\n);\n    always @(*) begin\n        casez (in)\n            4'b1??? : pos = 2'd0;\n            4'b01?? : pos = 2'd1;\n            4'b001? : pos = 2'd2;\n            4'b0001 : pos = 2'd3;\n            default : pos = 2'd0;\n        endcase\n    end\nendmodule"}
{"task_id": "fsm2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input areset,\n    output out\n);\n\nreg [1:0] state, next_state;\n\n// State encoding: 00 -> OFF, 01 -> ON\nparameter OFF = 2'b00, ON = 2'b01;\n\n// State register\nalways @(posedge clk or posedge areset) begin\n    if (areset) \n        state <= OFF;\n    else \n        state <= next_state;\nend\n\n// Next state logic\nalways @(*) begin\n    case (state)\n        OFF: next_state = j ? ON : OFF;\n        ON: next_state = k ? OFF : ON;\n        default: next_state = OFF; // Default case\n    endcase\nend\n\n// Output logic\nassign out = (state == ON);\n\nendmodule"}
{"task_id": "m2014_q4i", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 0 (or logic low).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput out);\n", "completion": "module top_module(\n    output out);\n    \n    // Always assign output to 0\n    assign out = 1'b0;\n\nendmodule"}
{"task_id": "step_one", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 1 (or logic high).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput one);\n", "completion": "module top_module(\n    output one);\n    assign one = 1'b1;\nendmodule"}
{"task_id": "vector100r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven a 100-bit input vector [99:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output reg [99:0] out\n);\n    always @(*) begin\n        out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7], in[8], in[9],\n                in[10], in[11], in[12], in[13], in[14], in[15], in[16], in[17], in[18], in[19],\n                in[20], in[21], in[22], in[23], in[24], in[25], in[26], in[27], in[28], in[29],\n                in[30], in[31], in[32], in[33], in[34], in[35], in[36], in[37], in[38], in[39],\n                in[40], in[41], in[42], in[43], in[44], in[45], in[46], in[47], in[48], in[49],\n                in[50], in[51], in[52], in[53], in[54], in[55], in[56], in[57], in[58], in[59],\n                in[60], in[61], in[62], in[63], in[64], in[65], in[66], in[67], in[68], in[69],\n                in[70], in[71], in[72], in[73], in[74], in[75], in[76], in[77], in[78], in[79],\n                in[80], in[81], in[82], in[83], in[84], in[85], in[86], in[87], in[88], in[89],\n                in[90], in[91], in[92], in[93], in[94], in[95], in[96], in[97], in[98], in[99]};\n    end\nendmodule"}
{"task_id": "m2014_q4d", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    output logic out\n);\n    logic xor_out;\n    \n    // XOR operation between 'in' and 'out'\n    assign xor_out = in ^ out;\n    \n    // Positive edge triggered D flip-flop\n    always @(posedge clk) begin\n        out <= xor_out;\n    end\nendmodule"}
{"task_id": "shift4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input load,\n    input ena,\n    input [3:0] data,\n    output reg [3:0] q);\n\nalways @(posedge clk or posedge areset) begin\n    if (areset)\n        q <= 4'b0000;\n    else if (load)\n        q <= data;\n    else if (ena)\n        q <= {q[2:0], 1'b0};\nend\n\nendmodule"}
{"task_id": "truthtable1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "module top_module (\n    input x3,\n    input x2,\n    input x1,\n    output f\n);\n    assign f = (x2 & ~x1) | (x3 & x1) | (x3 & x2);\nendmodule"}
{"task_id": "dff8ar", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input areset,\n    output reg [7:0] q);\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            q <= 8'b0;\n        else\n            q <= d;\n    end\n\nendmodule"}
{"task_id": "gates100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and = &in; // 100-input AND\n    assign out_or = |in;  // 100-input OR\n    assign out_xor = ^in; // 100-input XOR\nendmodule"}
{"task_id": "hadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output sum,\n    output cout\n);\n  assign sum = a ^ b;\n  assign cout = a & b;\nendmodule"}
{"task_id": "always_if2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "module top_module (\n    input cpu_overheated,\n    output reg shut_off_computer,\n    input arrived,\n    input gas_tank_empty,\n    output reg keep_driving\n);\n\n    always @(*) begin\n        if (cpu_overheated)\n            shut_off_computer = 1;\n        else\n            shut_off_computer = 0;\n    end\n\n    always @(*) begin\n        if (arrived)\n            keep_driving = 0;\n        else\n            keep_driving = ~gas_tank_empty;\n    end\n\nendmodule"}
{"task_id": "fsm2s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input reset,\n    output out\n);\n\nreg [1:0] state, next_state;\nwire out;\n\n// State encoding: OFF = 2'b00, ON = 2'b01\nparameter OFF = 2'b00, ON = 2'b01;\n\n// State register\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= OFF;\n    else\n        state <= next_state;\nend\n\n// Next state logic\nalways @(*) begin\n    case (state)\n        OFF: next_state = j ? ON : OFF;\n        ON: next_state = k ? OFF : ON;\n        default: next_state = OFF;\n    endcase\nend\n\n// Output logic\nassign out = (state == ON);\n\nendmodule"}
{"task_id": "vector3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "module top_module (\n    input [4:0] a,\n    input [4:0] b,\n    input [4:0] c,\n    input [4:0] d,\n    input [4:0] e,\n    input [4:0] f,\n    output [7:0] w,\n    output [7:0] x,\n    output [7:0] y,\n    output [7:0] z\n);\n    // Concatenate inputs and add two 1 bits at the end\n    wire [31:0] input_concat = {a, b, c, d, e, f, 2'b11};\n\n    // Assign output vectors\n    assign w = input_concat[31:24];\n    assign x = input_concat[23:16];\n    assign y = input_concat[15:8];\n    assign z = input_concat[7:0];\nendmodule"}
{"task_id": "circuit2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n\nassign q = (~a & ~b & ~c & ~d) | (~a & ~b & c & d) | (~a & b & ~c & d) | (a & b & ~c & ~d) | (a & b & c & d);\n\nendmodule"}
{"task_id": "andgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an AND gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = a & b;\nendmodule"}
{"task_id": "fsm1s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n    reg [1:0] state, next_state;\n    \n    // State encoding: 00 = B, 01 = A\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= 2'b00; // Reset state B\n        else\n            state <= next_state;\n    end\n    \n    always @(*) begin\n        case (state)\n            2'b00: next_state = in ? 2'b00 : 2'b01; // B -> B or A\n            2'b01: next_state = in ? 2'b01 : 2'b00; // A -> A or B\n            default: next_state = 2'b00; // Default to state B\n        endcase\n    end\n    \n    assign out = state[1]; // Output is the second bit of the state\nendmodule"}
{"task_id": "fadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input cin,\n    output cout,\n    output sum\n);\n    wire [1:0] carry;\n    assign {carry, sum} = a + b + cin;\n    assign cout = carry[1];\nendmodule"}
{"task_id": "m2014_q4g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    input in3,\n    output logic out\n);\n    logic xnor_out;\n\n    // XNOR gate\n    assign xnor_out = ~(in1 ^ in2);\n\n    // XOR gate\n    assign out = xnor_out ^ in3;\nendmodule"}
{"task_id": "ece241_2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "module top_module (\n    input c,\n    input d,\n    output [3:0] mux_in\n);\n    wire mux1_out, mux2_out;\n\n    // 2-to-1 multiplexer for c=0\n    assign mux2_out = c ? d : ~d;\n    // 2-to-1 multiplexer for c=1\n    assign mux1_out = ~c ? d : ~d;\n\n    // Assigning outputs based on the K-map\n    assign mux_in[0] = 1'b0;        // ab=00\n    assign mux_in[1] = 1'b1;        // ab=01\n    assign mux_in[2] = mux2_out;    // ab=11\n    assign mux_in[3] = mux1_out;    // ab=10\n\nendmodule"}
{"task_id": "ece241_2014_q5b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n    // State encoding\n    localparam [1:0] A = 2'b00, B = 2'b01;\n    reg [1:0] state, next_state;\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = (x) ? B : A;\n            B: next_state = B;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    assign z = (state == B) ? 1'b0 : x;\n\nendmodule"}
{"task_id": "circuit10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "module top_module (\n    input clk,\n    input a,\n    input b,\n    output q,\n    output state\n);\nreg q_reg;\nreg state_reg;\n\nalways @(posedge clk) begin\n    if (a & b) begin\n        q_reg <= 1'b0;\n        state_reg <= 1'b0;\n    end else if (a) begin\n        q_reg <= 1'b1;\n        state_reg <= 1'b1;\n    end else begin\n        q_reg <= q_reg;\n        state_reg <= state_reg;\n    end\nend\n\nassign q = q_reg;\nassign state = state_reg;\n\nendmodule"}
{"task_id": "2012_q1g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n\n    assign f = (x[3] & x[4]) | (x[3] & ~x[4] & x[2]) | (x[3] & ~x[4] & ~x[2] & x[1]);\n\nendmodule"}
{"task_id": "fsm_hdlc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSynchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input in,\n    output disc,\n    output flag,\n    output err\n);\n    \n    // State encoding\n    localparam [2:0] S0 = 3'b000, S1 = 3'b001, S2 = 3'b010, S3 = 3'b011, S4 = 3'b100, S5 = 3'b101, S6 = 3'b110, S7 = 3'b111, S8 = 3'b000;\n    \n    reg [2:0] state, next_state;\n    reg [2:0] prev_state;\n    reg [1:0] temp;\n    \n    // State transition logic\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= S0;\n        else\n            state <= next_state;\n    end\n    \n    always @(*) begin\n        next_state = state;\n        case (state)\n            S0: next_state = in ? S1 : S0;\n            S1: next_state = in ? S2 : S0;\n            S2: next_state = in ? S3 : S0;\n            S3: next_state = in ? S4 : S0;\n            S4: next_state = in ? S5 : S0;\n            S5: next_state = in ? S6 : S0;\n            S6: next_state = in ? S7 : S0;\n            S7: next_state = in ? S8 : S0;\n            default: next_state = S0;\n        endcase\n    end\n    \n    // Output logic\n    always @(posedge clk) begin\n        disc <= (next_state == S5);\n        flag <= (next_state == S8);\n        err <= (next_state == S7);\n    end\n    \nendmodule"}
{"task_id": "review2015_fancytimer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "module top_module(\n    input wire clk,\n    input wire reset,\n    input wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack\n);\n\nreg [3:0] state, next_state;\nreg [3:0] delay, timer;\nreg [3:0] search_pattern, search_shift;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= 4'd0;\n        delay <= 4'd0;\n        timer <= 4'd0;\n        counting <= 1'b0;\n        done <= 1'b0;\n        search_pattern <= 4'd0;\n        search_shift <= 4'd0;\n    end else begin\n        state <= next_state;\n        case (state)\n            4'd0: begin\n                search_pattern <= {search_pattern[2:0], data};\n                if (search_pattern == 4'd13) begin\n                    delay <= {delay[2:0], data};\n                    if (delay == 4'd0) delay <= 4'd1;\n                end\n            end\n            4'd1: begin\n                if (timer == delay) begin\n                    timer <= 4'd0;\n                    counting <= 1'b1;\n                end else begin\n                    timer <= timer + 1'b1;\n                    count <= delay - timer[2:0];\n                end\n                if (timer == delay + 4'd1) begin\n                    counting <= 1'b0;\n                    done <= 1'b1;\n                end\n            end\n            4'd2: begin\n                if (ack) begin\n                    done <= 1'b0;\n                    state <= 4'd0;\n                end\n            end\n            default: state <= 4'd0;\n        endcase\n    end\nend\n\nalways @(*) begin\n    next_state = state;\n    case (state)\n        4'd0: next_state = (search_pattern == 4'd13) ? 4'd1 : 4'd0;\n        4'd1: next_state = (timer == delay + 4'd1) ? 4'd2 : 4'd1;\n        4'd2: next_state = (ack) ? 4'd0 : 4'd2;\n        default: next_state = 4'd0;\n    endcase\nend\n\nendmodule"}
{"task_id": "ece241_2013_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input [3:1] s,\n    output reg fr3,\n    output reg fr2,\n    output reg fr1,\n    output reg dfr\n);\nreg [2:0] level;\nreg prev_level;\n\ninitial begin\n    level = 3'd0;  // Initialize level to 0 (lowest)\n    prev_level = 3'd0;\n    fr3 = 1'b1;\n    fr2 = 1'b1;\n    fr1 = 1'b1;\n    dfr = 1'b0;\nend\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        level <= 3'd0;  // Lowest level\n        prev_level <= 3'd0;\n        fr3 <= 1'b1;\n        fr2 <= 1'b1;\n        fr1 <= 1'b1;\n        dfr <= 1'b0;\n    end else begin\n        prev_level <= level;  // Store previous level\n        case (s)\n            3'b000: begin  // Below s[1]\n                level <= 3'd0;\n                fr3 <= 1'b1;\n                fr2 <= 1'b1;\n                fr1 <= 1'b1;\n                dfr <= 1'b0;\n            end\n            3'b001: begin  // Between s[2] and s[1]\n                level <= 3'd1;\n                fr3 <= 1'b0;\n                fr2 <= 1'b1;\n                fr1 <= 1'b1;\n                dfr <= (prev_level < 3'd1);\n            end\n            3'b011: begin  // Between s[3] and s[2]\n                level <= 3'd2;\n                fr3 <= 1'b0;\n                fr2 <= 1'b0;\n                fr1 <= 1'b1;\n                dfr <= (prev_level < 3'd2);\n            end\n            3'b111: begin  // Above s[3]\n                level <= 3'd3;\n                fr3 <= 1'b0;\n                fr2 <= 1'b0;\n                fr1 <= 1'b0;\n                dfr <= 1'b0;\n            end\n            default: begin  // Invalid\n                level <= 3'd0;\n                fr3 <= 1'b1;\n                fr2 <= 1'b1;\n                fr1 <= 1'b1;\n                dfr <= 1'b0;\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "fsm_serial", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output reg done\n);\n    localparam IDLE = 3'b000, START = 3'b001, DATA = 3'b010, STOP = 3'b011;\n    reg [2:0] state, next_state;\n    reg [7:0] data;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            IDLE: next_state = in ? IDLE : START;\n            START: next_state = in ? DATA : IDLE;\n            DATA: next_state = in ? DATA : STOP;\n            STOP: next_state = in ? DATA : IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            data <= 8'b0;\n            done <= 1'b0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    data <= 8'b0;\n                    done <= 1'b0;\n                end\n                START: begin\n                    data <= {data[6:0], in}; // Shift in the data bits\n                end\n                STOP: begin\n                    if (in)\n                        done <= 1'b1;\n                    else\n                        done <= 1'b0;\n                end\n                default: begin\n                    data <= data;\n                    done <= 1'b0;\n                end\n            endcase\n        end\n    end\nendmodule"}
{"task_id": "fsm_serialdata", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output reg [7:0] out_byte,\n    output reg done\n);\n\nlocalparam IDLE = 3'b000;\nlocalparam START = 3'b001;\nlocalparam DATA = 3'b010;\nlocalparam STOP = 3'b011;\n\nreg [2:0] state, next_state;\nreg [7:0] data_reg;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= IDLE;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    next_state = state;\n    case (state)\n        IDLE: next_state = (in == 0) ? START : IDLE;\n        START: next_state = DATA;\n        DATA: next_state = STOP;\n        STOP: next_state = (in == 1) ? IDLE : STOP;\n    endcase\nend\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        data_reg <= 8'b0;\n    else if (state == DATA)\n        data_reg <= {data_reg[6:0], in};\nend\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        out_byte <= 8'b0;\n        done <= 1'b0;\n    end else if (state == STOP && in == 1) begin\n        out_byte <= data_reg;\n        done <= 1'b1;\n    end else begin\n        done <= 1'b0;\n    end\nend\n\nendmodule"}
{"task_id": "gshare", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "module top_module(\n    input clk,\n    input areset, \n\n    input predict_valid,\n    input [6:0] predict_pc,\n    output predict_taken, \n    output [6:0] predict_history,\n\n    input train_valid,\n    input train_taken,\n    input train_mispredicted,\n    input [6:0] train_history, \n    input [6:0] train_pc\n);\n    localparam [1:0] STALL = 2'b00, TAKEN = 2'b01, NOT_TAKEN = 2'b10;\n    localparam [6:0] PHT_SIZE = 7'b1111111;\n    reg [1:0] pht [0:127];\n    reg [6:0] global_history;\n    reg [6:0] predict_predict_history;\n\n    integer i;\n    wire [6:0] pht_index;\n    wire [1:0] pht_value;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            global_history <= 7'b0;\n            for (i = 0; i < 128; i = i + 1) begin\n                pht[i] <= STALL;\n            end\n        end else begin\n            if (train_valid) begin\n                pht_index = train_pc ^ train_history;\n                if (train_taken) begin\n                    if (pht[pht_index] == TAKEN) begin\n                        pht[pht_index] <= TAKEN;\n                    end else begin\n                        pht[pht_index] <= NOT_TAKEN;\n                    end\n                end else begin\n                    if (pht[pht_index] == NOT_TAKEN) begin\n                        pht[pht_index] <= NOT_TAKEN;\n                    end else begin\n                        pht[pht_index] <= TAKEN;\n                    end\n                end\n            end\n            if (train_valid && train_mispredicted) begin\n                global_history <= train_history;\n            end else if (predict_valid) begin\n                global_history <= global_history + {6'b0, predict_taken};\n            end\n        end\n    end\n\n    assign pht_index = predict_pc ^ global_history;\n    assign pht_value = pht[pht_index];\n    assign predict_taken = (pht_value == TAKEN);\n    assign predict_history = global_history;\n\nendmodule"}
{"task_id": "lemmings4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n    // State encoding\n    localparam [3:0] WALK_LEFT = 4'b0001,\n                     WALK_RIGHT = 4'b0010,\n                     FALL = 4'b0100,\n                     DIG = 4'b1000,\n                     SPLATTER = 4'b1111;\n    reg [3:0] state, next_state;\n    reg fall_timer, splatter;\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        next_state = state;\n        fall_timer = 1'b0;\n        splatter = 1'b0;\n        case (state)\n            WALK_LEFT: begin\n                if (bump_right) next_state = WALK_RIGHT;\n                else if (dig && ground) next_state = DIG;\n                else if (!ground) next_state = FALL;\n            end\n            WALK_RIGHT: begin\n                if (bump_left) next_state = WALK_LEFT;\n                else if (dig && ground) next_state = DIG;\n                else if (!ground) next_state = FALL;\n            end\n            FALL: begin\n                if (ground) begin\n                    if (fall_timer) next_state = WALK_LEFT;\n                    else next_state = WALK_RIGHT;\n                end\n                fall_timer = 1'b1;\n            end\n            DIG: begin\n                if (!ground) next_state = FALL;\n            end\n            default: next_state = SPLATTER;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n        case (state)\n            WALK_LEFT: walk_left = 1'b1;\n            WALK_RIGHT: walk_right = 1'b1;\n            FALL: aaah = 1'b1;\n            DIG: digging = 1'b1;\n            SPLATTER: ; // All outputs are 0\n        endcase\n    end\n\nendmodule"}
{"task_id": "review2015_fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack\n);\n    reg [3:0] state, next_state;\n    localparam IDLE = 4'b0000,\n               LOOKING = 4'b0001,\n               STARTING = 4'b0010,\n               COUNTING = 4'b0011,\n               DONE_WAITING = 4'b0100;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            IDLE: begin\n                if (data == 1'b1)\n                    next_state = LOOKING;\n                else\n                    next_state = IDLE;\n            end\n            LOOKING: begin\n                if (data == 1'b1)\n                    next_state = STARTING;\n                else\n                    next_state = IDLE;\n            end\n            STARTING: begin\n                if (data == 1'b1)\n                    next_state = COUNTING;\n                else\n                    next_state = IDLE;\n            end\n            COUNTING: begin\n                if (done_counting)\n                    next_state = DONE_WAITING;\n                else\n                    next_state = COUNTING;\n            end\n            DONE_WAITING: begin\n                if (ack)\n                    next_state = IDLE;\n                else\n                    next_state = DONE_WAITING;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    always @(*) begin\n        shift_ena = 1'b0;\n        counting = 1'b0;\n        done = 1'b0;\n\n        case (state)\n            STARTING: shift_ena = 1'b1;\n            COUNTING: counting = 1'b1;\n            DONE_WAITING: done = 1'b1;\n        endcase\n    end\n\nendmodule"}
{"task_id": "conwaylife", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [255:0] data,\n    output reg [255:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else\n            q <= next_state(q);\n    end\n\n    function [255:0] next_state;\n        input [255:0] state;\n        reg [255:0] neighbours;\n        reg [7:0] count;\n\n        // Calculate neighbours for each cell\n        always @(*) begin\n            neighbours = 0;\n            for (i = 0; i < 256; i = i + 1) begin\n                count = 0;\n                count = count + (state[((i + 1) % 16) + 16 * ((i / 16) - 1)] == 1'b1);\n                count = count + (state[(i % 16) + 16 * ((i / 16) - 1)] == 1'b1);\n                count = count + (state[((i + 1) % 16) + 16 * ((i / 16) + 1)] == 1'b1);\n                count = count + (state[(i % 16) + 16 * ((i / 16) + 1)] == 1'b1);\n                count = count + (state[(i % 16) + 16 * ((i / 16) - 1)] == 1'b1);\n                count = count + (state[(i % 16) + 16 * ((i / 16) + 1)] == 1'b1);\n                count = count + (state[((i + 15) % 16) + 16 * ((i / 16) - 1)] == 1'b1);\n                count = count + (state[(i % 16) + 16 * ((i / 16) - 1) + 15] == 1'b1);\n                neighbours[i] = (state[i] == 1'b1) ? (count == 2 | count == 3) : (count == 3);\n            end\n        end\n        next_state = neighbours;\n    endfunction\n\nendmodule"}
{"task_id": "lemmings3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n    localparam [3:0] WALK_LEFT = 4'd0, WALK_RIGHT = 4'd1, FALL = 4'd2, DIG = 4'd3;\n    reg [3:0] state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        next_state = state;\n        case (state)\n            WALK_LEFT: begin\n                if (bump_left)\n                    next_state = WALK_RIGHT;\n                else if (bump_right)\n                    next_state = WALK_LEFT;\n                else if (!ground)\n                    next_state = FALL;\n                else if (dig)\n                    next_state = DIG;\n            end\n            WALK_RIGHT: begin\n                if (bump_right)\n                    next_state = WALK_LEFT;\n                else if (bump_left)\n                    next_state = WALK_RIGHT;\n                else if (!ground)\n                    next_state = FALL;\n                else if (dig)\n                    next_state = DIG;\n            end\n            FALL: begin\n                if (ground)\n                    next_state = state;\n            end\n            DIG: begin\n                if (ground)\n                    next_state = state;\n                else\n                    next_state = FALL;\n            end\n        endcase\n    end\n\n    always @(*) begin\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n\n        case (state)\n            WALK_LEFT: walk_left = 1'b1;\n            WALK_RIGHT: walk_right = 1'b1;\n            FALL: aaah = 1'b1;\n            DIG: digging = 1'b1;\n        endcase\n    end\nendmodule"}
{"task_id": "count_clock", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input ena,\n    output reg pm,\n    output reg [7:0] hh,\n    output reg [7:0] mm,\n    output reg [7:0] ss\n);\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            pm <= 1'b0;  // Reset to AM\n            hh <= 8'd12;  // Reset to 12:00\n            mm <= 8'd0;   // Reset to 00 minutes\n            ss <= 8'd0;   // Reset to 00 seconds\n        end else if (ena) begin\n            if (ss == 8'd59) begin\n                ss <= 8'd0;\n                if (mm == 8'd59) begin\n                    mm <= 8'd0;\n                    if (hh == 8'd12) begin\n                        hh <= 8'd1;\n                        pm <= ~pm;  // Toggle PM/AM\n                    end else begin\n                        hh <= hh + 1'b1;\n                    end\n                end else begin\n                    mm <= mm + 1'b1;\n                end\n            end else begin\n                ss <= ss + 1'b1;\n            end\n        end\n    end\nendmodule"}
{"task_id": "lemmings2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    output walk_left,\n    output walk_right,\n    output aaah\n);\n\n    // State encoding\n    localparam [1:0] WALK_LEFT = 2'b00;\n    localparam [1:0] WALK_RIGHT = 2'b01;\n    localparam [1:0] FALLING = 2'b10;\n\n    reg [1:0] state, next_state;\n\n    // State transitions\n    always @(*) begin\n        case (state)\n            WALK_LEFT: begin\n                if (bump_right) next_state = WALK_RIGHT;\n                else if (!ground) next_state = FALLING;\n                else next_state = WALK_LEFT;\n            end\n            WALK_RIGHT: begin\n                if (bump_left) next_state = WALK_LEFT;\n                else if (!ground) next_state = FALLING;\n                else next_state = WALK_RIGHT;\n            end\n            FALLING: begin\n                if (ground) next_state = state; // Stay in FALLING if ground appears\n                else next_state = FALLING;\n            end\n            default: next_state = WALK_LEFT;\n        endcase\n    end\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset) state <= WALK_LEFT;\n        else state <= next_state;\n    end\n\n    // Outputs\n    always @(*) begin\n        walk_left = (state == WALK_LEFT);\n        walk_right = (state == WALK_RIGHT);\n        aaah = (state == FALLING);\n    end\n\nendmodule"}
{"task_id": "countbcd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output [3:1] ena,\n    output reg [15:0] q);\n\nreg [3:0] ones, tens, hundreds, thousands;\nwire [3:0] next_ones, next_tens, next_hundreds, next_thousands;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        ones <= 4'b0000;\n        tens <= 4'b0000;\n        hundreds <= 4'b0000;\n        thousands <= 4'b0000;\n    end else begin\n        ones <= next_ones;\n        tens <= next_tens;\n        hundreds <= next_hundreds;\n        thousands <= next_thousands;\n    end\nend\n\nassign next_ones = (ones == 4'b1001) ? 4'b0000 : ones + 1;\nassign next_tens = (ones == 4'b1001) ? (tens == 4'b1001) ? 4'b0000 : tens + 1 : tens;\nassign next_hundreds = (tens == 4'b1001 && ones == 4'b1001) ? (hundreds == 4'b1001) ? 4'b0000 : hundreds + 1 : hundreds;\nassign next_thousands = (hundreds == 4'b1001 && tens == 4'b1001 && ones == 4'b1001) ? (thousands == 4'b1001) ? 4'b0000 : thousands + 1 : thousands;\n\nassign ena[1] = (ones == 4'b1001);\nassign ena[2] = (tens == 4'b1001 && ones == 4'b1001);\nassign ena[3] = (hundreds == 4'b1001 && tens == 4'b1001 && ones == 4'b1001);\n\nassign q = {thousands, hundreds, tens, ones};\n\nendmodule"}
{"task_id": "mux2to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] a,\n    input [99:0] b,\n    input sel,\n    output [99:0] out\n);\n    always @(*) begin\n        if (sel)\n            out = b;\n        else\n            out = a;\n    end\nendmodule"}
{"task_id": "m2014_q6b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "module top_module(\n    input [3:1] y,\n    input w,\n    output reg Y2);\n    \n    always @(*) begin\n        case(y)\n            3'b000: Y2 = w; // A\n            3'b001: Y2 = w; // B\n            3'b010: Y2 = w; // C\n            3'b011: Y2 = w; // D\n            3'b100: Y2 = 1'b1; // E\n            3'b101: Y2 = 1'b1; // F\n            default: Y2 = 1'bx;\n        endcase\n    end\nendmodule"}
{"task_id": "ringer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "module top_module(\n    input ring, \n    input vibrate_mode,\n    output ringer,\n    output motor\n);\n    assign ringer = ~vibrate_mode & ring;\n    assign motor = vibrate_mode & ring;\nendmodule"}
{"task_id": "alwaysblock1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an AND gate using both an assign statement and a combinational always block. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out_assign,\n    output reg out_alwaysblock\n);\n\n    // Using assign statement for out_assign\n    assign out_assign = a & b;\n\n    // Using always block for out_alwaysblock\n    always @(*) begin\n        out_alwaysblock = a & b;\n    end\n\nendmodule"}
{"task_id": "zero", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that always outputs a LOW.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput zero);\n", "completion": "module top_module(\n    output zero);\n    assign zero = 1'b0;\nendmodule"}
{"task_id": "circuit7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg q\n);\n    \n    always @(posedge clk) begin\n        if (a)\n            q <= ~q;  // Toggle q when a is high\n    end\n\nendmodule"}
{"task_id": "ece241_2014_q5a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n    \n    enum logic [1:0] {IDLE, COMPLEMENTING, DONE} state, next_state;\n    logic complementing_flag;\n    \n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= IDLE;\n            complementing_flag <= 0;\n            z <= 1'b0;\n        end else begin\n            state <= next_state;\n            z <= next_state == COMPLEMENTING ? ~x : 1'b0;\n            complementing_flag <= next_state != IDLE;\n        end\n    end\n    \n    always_comb begin\n        next_state = state;\n        case (state)\n            IDLE: begin\n                next_state = COMPLEMENTING;\n                complementing_flag = 1;\n            end\n            COMPLEMENTING: begin\n                if (x == 1'b1) begin\n                    next_state = DONE;\n                    complementing_flag = 1;\n                end\n            end\n            DONE: next_state = DONE;\n        endcase\n    end\n    \nendmodule"}
{"task_id": "fsm3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n    reg [1:0] state, next_state;\n    wire out_sig;\n\n    // State transition logic\n    always @(*) begin\n        case(state)\n            2'b00: next_state = (in) ? 2'b01 : 2'b00;\n            2'b01: next_state = (in) ? 2'b01 : 2'b10;\n            2'b10: next_state = (in) ? 2'b11 : 2'b00;\n            2'b11: next_state = (in) ? 2'b10 : 2'b01;\n            default: next_state = 2'b00;\n        endcase\n    end\n\n    // Output logic\n    assign out_sig = (state == 2'b11) ? 1'b1 : 1'b0;\n\n    // State register with asynchronous reset\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 2'b00;\n        else\n            state <= next_state;\n    end\n\n    // Output assignment\n    assign out = out_sig;\n\nendmodule"}
{"task_id": "vector2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that reverses the byte order of a 32-bit vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [31:0] in,\n    output [31:0] out\n);\n    assign out = {in[7:0], in[15:8], in[23:16], in[31:24]};\nendmodule"}
{"task_id": "m2014_q4c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a simple D flip flop with active high synchronous reset (reset output to 0).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input r,\n    output logic q\n);\n    always @(posedge clk or posedge r) begin\n        if (r)\n            q <= 1'b0;  // Reset output to 0\n        else\n            q <= d;   // Update output with input d\n    end\nendmodule"}
{"task_id": "mt2015_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the boolean function z = (x^y) & x.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n    \n    assign z = (x ^ y) & x;\n\nendmodule"}
{"task_id": "shift18", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input ena,\n    input [1:0] amount,\n    input [63:0] data,\n    output reg [63:0] q\n);\n    \n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else if (ena) begin\n            case (amount)\n                2'b00: q <= {q[62:0], 1'b0}; // Shift left by 1 bit\n                2'b01: q <= {q[55:0], 8'b0}; // Shift left by 8 bits\n                2'b10: q <= {{1{q[63]}}, q[63:1]}; // Arithmetic shift right by 1 bit\n                2'b11: q <= {{8{q[63]}}, q[63:8]}; // Arithmetic shift right by 8 bits\n                default: q <= q; // No shift\n            endcase\n        end\n    end\n\nendmodule"}
{"task_id": "ece241_2013_q8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input aresetn,\n    input x,\n    output reg z\n);\n    reg [1:0] state, next_state;\n\n    parameter S0 = 2'b00, S1 = 2'b01, S2 = 2'b10, S3 = 2'b11;\n\n    always @(posedge clk or negedge aresetn) begin\n        if (!aresetn)\n            state <= S0;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            S0: next_state = x ? S1 : S0;\n            S1: next_state = x ? S2 : S0;\n            S2: next_state = x ? S3 : S1;\n            S3: next_state = x ? S3 : S1;\n            default: next_state = S0;\n        endcase\n    end\n\n    always @(*) begin\n        z = (state == S3);\n    end\n\nendmodule"}
{"task_id": "m2014_q6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n    localparam [2:0] A = 3'd0, B = 3'd1, C = 3'd2, D = 3'd3, E = 3'd4, F = 3'd5;\n    reg [2:0] state, next_state;\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n    always @(*) begin\n        case (state)\n            A: next_state = w ? A : B;\n            B: next_state = w ? D : C;\n            C: next_state = w ? D : E;\n            D: next_state = w ? A : F;\n            E: next_state = w ? D : E;\n            F: next_state = w ? D : C;\n            default: next_state = A;\n        endcase\n    end\n    always @(*) begin\n        case (state)\n            E: z = 1'b1;\n            F: z = 1'b1;\n            default: z = 1'b0;\n        endcase\n    end\nendmodule"}
{"task_id": "fsm_ps2data", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output [23:0] out_bytes,\n    output done\n);\n\nreg [2:0] state, next_state;\nreg [23:0] msg;\nreg done_int;\n\nlocalparam IDLE = 3'b000;\nlocalparam BYTE1 = 3'b001;\nlocalparam BYTE2 = 3'b010;\nlocalparam BYTE3 = 3'b011;\nlocalparam DONE = 3'b100;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= IDLE;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        IDLE: begin\n            if (in[3])\n                next_state = BYTE1;\n            else\n                next_state = IDLE;\n        end\n        BYTE1: begin\n            next_state = BYTE2;\n            msg[7:0] = in;\n        end\n        BYTE2: begin\n            next_state = BYTE3;\n            msg[15:8] = in;\n        end\n        BYTE3: begin\n            next_state = DONE;\n            msg[23:16] = in;\n        end\n        DONE: begin\n            next_state = IDLE;\n            done_int = 1'b1;\n        end\n        default: next_state = IDLE;\n    endcase\nend\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        done_int <= 1'b0;\n    else if (state == DONE)\n        done_int <= 1'b0;\nend\n\nassign done = done_int;\nassign out_bytes = (state == DONE) ? msg : {24{1'bx}};\n\nendmodule"}
{"task_id": "2012_q2b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\n\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "module top_module (\n    input [5:0] y,\n    input w,\n    output Y1,\n    output Y3\n);\n    assign Y1 = (y[0] & ~w) | (y[3] & w);\n    assign Y3 = (y[1] & ~w) | (y[4] & w);\nendmodule"}
{"task_id": "vector0", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "module top_module(\n    input [2:0] vec, \n    output [2:0] outv,\n    output o2,\n    output o1,\n    output o0\n);\n    assign outv = vec;\n    assign o0 = vec[0];\n    assign o1 = vec[1];\n    assign o2 = vec[2];\nendmodule"}
{"task_id": "kmap4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n\nalways @(*) begin\n    case({c,d,a,b})\n        4'b0000, 4'b0101, 4'b1010, 4'b1111: out = 1'b1;\n        default: out = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "vector1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "module top_module (\n    input [15:0] in,\n    output [7:0] out_hi,\n    output [7:0] out_lo\n);\n    assign out_hi = in[15:8];\n    assign out_lo = in[7:0];\nendmodule"}
{"task_id": "norgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    \n    assign out = ~(a | b); // NOR operation\n\nendmodule"}
{"task_id": "alwaysblock2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "module top_module(\n    input clk,\n    input a, \n    input b,\n    output out_assign,\n    output reg out_always_comb,\n    output reg out_always_ff\n);\n\n    // Using assign statement\n    assign out_assign = a ^ b;\n\n    // Combinational always block\n    always @(*) begin\n        out_always_comb = a ^ b;\n    end\n\n    // Clocked always block\n    always @(posedge clk) begin\n        out_always_ff <= a ^ b;\n    end\n\nendmodule"}
{"task_id": "m2014_q6c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "module top_module (\n    input [6:1] y,\n    input w,\n    output Y2,\n    output Y4\n);\n    // Y2 logic: active when in states B, D, F\n    assign Y2 = y[1] | y[3] | y[5];\n    \n    // Y4 logic: active when in states E, F\n    assign Y4 = y[4] | y[5];\nendmodule"}
{"task_id": "mux256to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "module top_module (\n    input [255:0] in,\n    input [7:0] sel,\n    output  out\n);\nassign out = in[sel];\nendmodule"}
{"task_id": "2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input w,\n    input R,\n    input E,\n    input L,\n    output reg Q\n);\n\nalways @(posedge clk) begin\n    if (L)\n        Q <= R;\n    else if (E)\n        Q <= {Q, w};\n    else\n        Q <= Q;\nend\n\nendmodule"}
{"task_id": "ece241_2014_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    output z\n);\n    reg [2:0] q;\n    wire [2:0] xor_out, and_out, or_out;\n\n    // XOR gate\n    assign xor_out[0] = x ^ q[0];\n    assign xor_out[1] = x ^ q[1];\n    assign xor_out[2] = x ^ q[2];\n\n    // AND gate\n    assign and_out[0] = x & ~q[0];\n    assign and_out[1] = x & ~q[1];\n    assign and_out[2] = x & ~q[2];\n\n    // OR gate\n    assign or_out[0] = x | ~q[0];\n    assign or_out[1] = x | ~q[1];\n    assign or_out[2] = x | ~q[2];\n\n    // D flip-flops\n    always @(posedge clk) begin\n        q[0] <= xor_out[0];\n        q[1] <= and_out[1];\n        q[2] <= or_out[2];\n    end\n\n    // XNOR gate output\n    assign z = ^q;\n\nendmodule"}
{"task_id": "circuit4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n  assign q = (a & b) | (c & d);\nendmodule"}
{"task_id": "rule110", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else\n            q <= {q[510:0], 0} + {{512{q[511]}}, q} + {{512{q[511]}}, q[510:0], 1'b0};\n    end\n\nendmodule"}
{"task_id": "fsm3s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n\n    reg [1:0] state, next_state;\n\n    // State encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11\n    parameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\n    // Next state logic\n    always @(*) begin\n        case(state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A;\n        endcase\n    end\n\n    // State register\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Output logic\n    assign out = (state == D);\n\nendmodule"}
{"task_id": "circuit5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "module top_module (\n    input [3:0] a, \n    input [3:0] b, \n    input [3:0] c, \n    input [3:0] d,\n    input [3:0] e,\n    output reg [3:0] q\n);\n\nalways @(*) begin\n    case (c)\n        4'd0: q = b;\n        4'd1: q = e;\n        4'd2: q = a;\n        4'd3: q = d;\n        default: q = 4'b1111;\n    endcase\nend\n\nendmodule"}
{"task_id": "bugs_mux2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFind the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input sel,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out\n);\n\n    always @(*) begin\n        out = (~sel & a) | (sel & b);\n    end\n\nendmodule"}
{"task_id": "mt2015_muxdff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "module top_module(\n    input clk,\n    input L,\n    input q_in,\n    input r_in,\n    output reg Q\n);\n    always @(posedge clk) begin\n        if (L)\n            Q <= r_in;\n        else\n            Q <= q_in ^ Q;\n    end\nendmodule\n\nmodule full_module (\n    input [2:0] r,\n    input L,\n    input clk,\n    output reg [2:0] q\n);\n    reg [2:0] q_temp;\n\n    top_module u0 (.clk(clk), .L(L), .q_in(1'b0), .r_in(r[0]), .Q(q_temp[0]));\n    top_module u1 (.clk(clk), .L(L), .q_in(q_temp[0]), .r_in(r[1]), .Q(q_temp[1]));\n    top_module u2 (.clk(clk), .L(L), .q_in(q_temp[1]), .r_in(r[2]), .Q(q_temp[2]));\n\n    always @(posedge clk) begin\n        q <= q_temp;\n    end\nendmodule"}
{"task_id": "edgecapture", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input [31:0] in,\n    output reg [31:0] out);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            out <= 32'b0;\n        else begin\n            genvar i;\n            generate\n                for (i = 0; i < 32; i = i + 1) begin : bit_capture\n                    always @(posedge clk) begin\n                        if (in[i] && !in[i+1]) // Capture falling edge\n                            out[i] <= 1'b1;\n                    end\n                end\n            endgenerate\n        end\n    end\n\nendmodule"}
{"task_id": "dff8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    output reg [7:0] q);\n\n    always @(posedge clk) begin\n        q <= d;\n    end\n\nendmodule"}
{"task_id": "ece241_2014_q1c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nAssume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [8:0] b, // Extend b to 9 bits to detect overflow\n    output [7:0] s,\n    output overflow\n);\n    wire [8:0] s_ext;\n    assign s_ext = a + b; // Signed addition\n    assign s = s_ext[7:0]; // Output 8-bit result\n    assign overflow = s_ext[8] ^ s_ext[7]; // Overflow detection\nendmodule"}
{"task_id": "review2015_fsmonehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n);\n    // State registers\n    reg [9:0] next_state;\n\n    // Next state logic\n    assign B3_next = state[8]; // B3 state is encoded as 10'b1000000000\n    assign S_next = state[9];\n    assign S1_next = state[8] & d;\n    assign Count_next = state[1];\n    assign Wait_next = state[0] & done_counting & ~ack;\n\n    // Output logic\n    assign done = state[0] & ack;\n    assign counting = state[1];\n    assign shift_ena = state[0] | state[1] | state[2] | state[3] | state[4] | state[5] | state[6];\n\n    // State transition logic\n    always @(*) begin\n        case(state)\n            10'b1000000000: next_state = 10'b0100000000; // B3 to Count\n            10'b0100000000: next_state = 10'b0010000000; // Count to Wait\n            10'b0010000000: next_state = 10'b0001000000; // Wait to S\n            10'b0001000000: next_state = 10'b0000100000; // S to S1\n            10'b0000100000: next_state = 10'b0000010000; // S1 to S11\n            10'b0000010000: next_state = 10'b0000001000; // S11 to S110\n            10'b0000001000: next_state = 10'b0000000100; // S110 to B0\n            10'b0000000100: next_state = 10'b0000000010; // B0 to B1\n            10'b0000000010: next_state = 10'b0000000001; // B1 to B2\n            10'b0000000001: next_state = 10'b1000000000; // B2 to B3\n            default: next_state = 10'b0000000000; // S\n        endcase\n    end\n\nendmodule"}
{"task_id": "counter_2bc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 2'b01;\n        else if (train_valid) begin\n            if (train_taken)\n                state <= (state == 2'b11) ? state : state + 1;\n            else\n                state <= (state == 2'b00) ? state : state - 1;\n        end\n    end\nendmodule"}
{"task_id": "always_casez", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output reg [2:0] pos\n);\n    always @* begin\n        pos = 3'd0; // Default output\n        for (int i = 0; i < 8; i++) begin\n            if (in[i] == 1'b1) begin\n                pos = 3'di; // Assign position of the first high bit\n                break;\n            end\n        end\n    end\nendmodule"}
{"task_id": "always_nolatches", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "module top_module (\n    input [15:0] scancode,\n    output reg left,\n    output reg down,\n    output reg right,\n    output reg up\n);\n    always @(*) begin\n        left = 1'b0;\n        down = 1'b0;\n        right = 1'b0;\n        up = 1'b0;\n        case(scancode)\n            16'hE06B: left = 1'b1;\n            16'hE072: down = 1'b1;\n            16'hE074: right = 1'b1;\n            16'hE075: up = 1'b1;\n        endcase\n    end\nendmodule"}
{"task_id": "m2014_q4j", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 4-bit adder with full adders. The output sum should include the overflow bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "module top_module (\n    input [3:0] x,\n    input [4:0] y,\n    output [4:0] sum\n);\n    // Define intermediate signals for carry and sum\n    wire [3:0] carry;\n    wire [3:0] intermediate_sum;\n    \n    // Generate full adders for each bit\n    genvar i;\n    generate\n        for (i = 0; i < 4; i = i + 1) begin : adder_gen\n            // Full adder for each bit\n            assign {carry[i], intermediate_sum[i]} = x[i] + y[i] + carry[i];\n        end\n    endgenerate\n    \n    // Output the sum with overflow bit\n    assign sum = {carry[3], intermediate_sum};\nendmodule"}
{"task_id": "history_shift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            predict_history <= 32'b0;\n        end else if (train_mispredicted) begin\n            predict_history <= {train_history, train_taken};\n        end else if (predict_valid) begin\n            predict_history <= {predict_history[30:0], predict_taken};\n        end\n    end\n\nendmodule"}
{"task_id": "wire_decl", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out,\n    output out_n );\n\n    wire and1, and2;\n\n    // First layer: AND gates\n    and1 = a & b;\n    and2 = c & d;\n\n    // Second layer: OR gate\n    out = and1 | and2;\n\n    // Inverted output\n    out_n = ~out;\n\nendmodule"}
{"task_id": "dff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a single D flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q);\n    \n    always @(posedge clk) begin\n        q <= d;\n    end\n\nendmodule"}
{"task_id": "ece241_2013_q12", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "module top_module (\n    input clk,\n    input enable,\n    input S,\n    input A,\n    input B,\n    input C,\n    output reg Z\n);\n    reg [7:0] shift_reg;\n\n    always @(posedge clk) begin\n        if (enable)\n            shift_reg <= {S, shift_reg[7:1]};\n    end\n\n    always @(*) begin\n        case ({A, B, C})\n            3'b000: Z = shift_reg[0];\n            3'b001: Z = shift_reg[1];\n            3'b010: Z = shift_reg[2];\n            3'b011: Z = shift_reg[3];\n            3'b100: Z = shift_reg[4];\n            3'b101: Z = shift_reg[5];\n            3'b110: Z = shift_reg[6];\n            3'b111: Z = shift_reg[7];\n        endcase\n    end\nendmodule"}
{"task_id": "thermostat", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "module top_module(\n    input mode,\n    input too_cold, \n    input too_hot,\n    input fan_on,\n    output heater,\n    output aircon,\n    output fan\n);\n    \n    // Heater control\n    assign heater = mode & too_cold;\n    \n    // Air conditioner control\n    assign aircon = ~mode & too_hot;\n    \n    // Fan control\n    assign fan = heater | aircon | fan_on;\n\nendmodule"}
{"task_id": "ece241_2013_q2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out_sop,\n    output out_pos\n);\n\n    // Sum of Products (SOP) implementation\n    assign out_sop = (a & ~b & ~c & ~d) | (~a & b & ~c & ~d) | (~a & ~b & c & ~d) | (~a & ~b & ~c & d);\n\n    // Product of Sums (POS) implementation\n    assign out_pos = ~(a | ~b | ~c | ~d) & (~a | b | ~c | ~d) & (~a | ~b | c | ~d) & (~a | ~b | ~c | d);\n\nendmodule"}
{"task_id": "lfsr32", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [31:0] q);\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        q <= 32'h1;\n    else begin\n        q[0] <= q[1] ^ q[2] ^ q[22] ^ q[31]; // XOR taps\n        q[31:1] <= q[30:0]; // Shift register\n    end\nend\n\nendmodule"}
{"task_id": "circuit3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n    assign q = (a & b & c & d) | (a & b & ~c & d) | (~a & b & ~c & ~d) | (~a & b & ~c & d);\nendmodule"}
{"task_id": "7420", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d, \n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n    // NAND gate for the first output\n    assign p1y = ~(p1a & p1b & p1c & p1d);\n    // NAND gate for the second output\n    assign p2y = ~(p2a & p2b & p2c & p2d);\nendmodule"}
{"task_id": "popcount255", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input [254:0] in,\n    output reg [7:0] out\n);\n    // Split input into 8-bit chunks\n    reg [7:0] chunks [31:0];\n    genvar i;\n    generate\n        for (i = 0; i < 32; i = i + 1) begin : chunk_gen\n            assign chunks[i] = in[(i+1)*8-1:i*8];\n        end\n    endgenerate\n\n    // Count ones in each 8-bit chunk\n    assign out = sum_ones(chunks[0]) + sum_ones(chunks[1]) + sum_ones(chunks[2]) + sum_ones(chunks[3]) + \n                 sum_ones(chunks[4]) + sum_ones(chunks[5]) + sum_ones(chunks[6]) + sum_ones(chunks[7]) +\n                 sum_ones(chunks[8]) + sum_ones(chunks[9]) + sum_ones(chunks[10]) + sum_ones(chunks[11]) +\n                 sum_ones(chunks[12]) + sum_ones(chunks[13]) + sum_ones(chunks[14]) + sum_ones(chunks[15]) +\n                 sum_ones(chunks[16]) + sum_ones(chunks[17]) + sum_ones(chunks[18]) + sum_ones(chunks[19]) +\n                 sum_ones(chunks[20]) + sum_ones(chunks[21]) + sum_ones(chunks[22]) + sum_ones(chunks[23]) +\n                 sum_ones(chunks[24]) + sum_ones(chunks[25]) + sum_ones(chunks[26]) + sum_ones(chunks[27]) +\n                 sum_ones(chunks[28]) + sum_ones(chunks[29]) + sum_ones(chunks[30]) + sum_ones(chunks[31]);\n\n    function [3:0] sum_ones;\n        input [7:0] in;\n        begin\n            sum_ones = in[7] + in[6] + in[5] + in[4] + in[3] + in[2] + in[1] + in[0];\n        end\n    endfunction\n\nendmodule"}
{"task_id": "gatesv", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output [2:0] out_both,\n    output [3:1] out_any,\n    output [3:0] out_different\n);\n    // out_both: Both bits are 1\n    assign out_both[2] = in[2] & in[3];\n    assign out_both[1] = in[1] & in[2];\n    assign out_both[0] = in[0] & in[1];\n\n    // out_any: At least one bit is 1\n    assign out_any[3] = in[3] | in[2];\n    assign out_any[2] = in[2] | in[1];\n    assign out_any[1] = in[1] | in[0];\n\n    // out_different: Bits are different\n    assign out_different[3] = in[3] ^ in[0];\n    assign out_different[2] = in[2] ^ in[3];\n    assign out_different[1] = in[1] ^ in[2];\n    assign out_different[0] = in[0] ^ in[1];\nendmodule"}
{"task_id": "circuit6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "module top_module (\n    input [2:0] a, \n    output reg [15:0] q\n);\n\nalways @(*) begin\n    case(a)\n        3'b000: q = 16'h1232;\n        3'b001: q = 16'hAEE0;\n        3'b010: q = 16'h27D4;\n        3'b011: q = 16'h5A0E;\n        3'b100: q = 16'h2066;\n        3'b101: q = 16'h64CE;\n        3'b110: q = 16'hC526;\n        3'b111: q = 16'h2F19;\n        default: q = 16'h0000;\n    endcase\nend\n\nendmodule"}
{"task_id": "countslow", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input slowena,\n    input reset,\n    output reg [3:0] q\n);\n    \n    always @(posedge clk) begin\n        if (reset)\n            q <= 4'b0000; // Reset to 0\n        else if (slowena)\n            q <= (q == 4'b1001) ? 4'b0000 : q + 1'b1; // Increment or reset to 0 if at 9\n    end\nendmodule"}
{"task_id": "m2014_q4f", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    // The bubble on in2 represents a NOT operation\n    assign out = in1 & ~in2;\nendmodule"}
{"task_id": "m2014_q4h", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module assigns the output port to the same value as the input port combinationally.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out);\n    assign out = in;\nendmodule"}
{"task_id": "fsm1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n\n    localparam [1:0] B = 2'd0, A = 2'd1;\n    reg [1:0] state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset) \n            state <= B;\n        else \n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            B: next_state = in ? B : A;\n            A: next_state = in ? A : B;\n            default: next_state = B;\n        endcase\n    end\n\n    assign out = state == B ? 1'b0 : 1'b1;\n\nendmodule"}
{"task_id": "dualedge", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q);\n\n    reg q_prev, clk_prev;\n\n    always @(posedge clk or negedge clk) begin\n        clk_prev <= clk;\n    end\n\n    always @(posedge clk or posedge clk_prev) begin\n        q <= d;\n    end\n\nendmodule"}
{"task_id": "xnorgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an XNOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = ~(a ^ b);\nendmodule"}
{"task_id": "mt2015_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nModule A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n\n    wire a1_out, a2_out, b1_out, b2_out, or_out, and_out;\n\n    // Instantiate A modules\n    A a1(.x(x), .y(y), .z(a1_out));\n    A a2(.x(x), .y(y), .z(a2_out));\n\n    // Instantiate B modules\n    B b1(.x(x), .y(y), .z(b1_out));\n    B b2(.x(x), .y(y), .z(b2_out));\n\n    // Connect to OR gate\n    or2 or_gate(a1_out, b1_out, or_out);\n\n    // Connect to AND gate\n    and2 and_gate(a2_out, b2_out, and_out);\n\n    // Final XOR gate\n    xor2 xor_gate(or_out, and_out, z);\n\nendmodule\n\nmodule A(\n    input x,\n    input y,\n    output z);\n    assign z = (x ^ y) & x;\nendmodule\n\nmodule B(\n    input x,\n    input y,\n    output z);\n    // Function implementation based on simulation waveform\n    assign z = ~(x & y) | (x & ~y);\nendmodule"}
{"task_id": "rotate100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [1:0] ena,\n    input [99:0] data,\n    output reg [99:0] q);\n\nalways @(posedge clk) begin\n    if (load)\n        q <= data;\n    else if (ena == 2'b01) // Rotate right\n        q <= {q[98:0], q[99]};\n    else if (ena == 2'b10) // Rotate left\n        q <= {q[1:0], q[99:2]};\n    else\n        q <= q; // No rotation\nend\n\nendmodule"}
{"task_id": "review2015_count1k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [9:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 10'd0;\n        else if (q == 10'd999)\n            q <= 10'd0;\n        else\n            q <= q + 1'b1;\n    end\n\nendmodule"}
{"task_id": "notgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOT gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = ~in;\nendmodule"}
{"task_id": "fsm_onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "module top_module (\n    input in,\n    input [9:0] state,\n    output [9:0] next_state,\n    output out1,\n    output out2);\n\n    // State transition logic\n    always @(*) begin\n        case(state)\n            10'b0000000001: next_state = in ? 10'b0000000010 : 10'b0000000001; // S1\n            10'b0000000100: next_state = in ? 10'b0000000100 : 10'b0000000001; // S2\n            10'b0000001000: next_state = in ? 10'b0000001000 : 10'b0000000001; // S3\n            10'b0000010000: next_state = in ? 10'b0000010000 : 10'b0000000001; // S4\n            10'b0000100000: next_state = in ? 10'b0000100000 : 10'b0000000001; // S5\n            10'b0001000000: next_state = in ? 10'b0001000000 : 10'b0000000100; // S6\n            10'b0010000000: next_state = in ? 10'b0010000000 : 10'b0000000100; // S7\n            10'b0100000000: next_state = in ? 10'b0100000000 : 10'b0000000100; // S8\n            10'b1000000000: next_state = in ? 10'b1000000000 : 10'b0000000100; // S9\n            default: next_state = 10'b0000000001; // S0\n        endcase\n    end\n\n    // Output logic\n    assign out1 = state[9];\n    assign out2 = state[8];\n\nendmodule"}
{"task_id": "ece241_2013_q7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    output reg Q\n);\n\nalways @(posedge clk) begin\n    case ({j, k})\n        2'b00: Q <= Q;  // No change\n        2'b01: Q <= 1'b0;\n        2'b10: Q <= 1'b1;\n        2'b11: Q <= ~Q;  // Toggle\n    endcase\nend\n\nendmodule"}
{"task_id": "popcount3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "module top_module (\n    input [2:0] in,\n    output [1:0] out\n);\n    assign out = in[0] + in[1] + in[2];\nendmodule"}
{"task_id": "vector5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    input e,\n    output [24:0] out\n);\n    assign out[24] = ~a ^ a;\n    assign out[23] = ~a ^ b;\n    assign out[22] = ~a ^ c;\n    assign out[21] = ~a ^ d;\n    assign out[20] = ~a ^ e;\n    assign out[19] = ~b ^ a;\n    assign out[18] = ~b ^ b;\n    assign out[17] = ~b ^ c;\n    assign out[16] = ~b ^ d;\n    assign out[15] = ~b ^ e;\n    assign out[14] = ~c ^ a;\n    assign out[13] = ~c ^ b;\n    assign out[12] = ~c ^ c;\n    assign out[11] = ~c ^ d;\n    assign out[10] = ~c ^ e;\n    assign out[9] = ~d ^ a;\n    assign out[8] = ~d ^ b;\n    assign out[7] = ~d ^ c;\n    assign out[6] = ~d ^ d;\n    assign out[5] = ~d ^ e;\n    assign out[4] = ~e ^ a;\n    assign out[3] = ~e ^ b;\n    assign out[2] = ~e ^ c;\n    assign out[1] = ~e ^ d;\n    assign out[0] = ~e ^ e;\nendmodule"}
{"task_id": "lemmings1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    output walk_left,\n    output walk_right\n);\n  reg state, next_state;\n\n  // State transition logic\n  always @(posedge clk or posedge areset) begin\n    if (areset)\n      state <= 0;  // Walk left\n    else\n      state <= next_state;\n  end\n\n  // Next state logic\n  always @(*) begin\n    case (state)\n      0: next_state = bump_left ? 1 : 0;  // Walk left -> Walk right if bumped left\n      1: next_state = bump_right ? 0 : 1;  // Walk right -> Walk left if bumped right\n      default: next_state = 0;\n    endcase\n  end\n\n  // Output logic\n  assign walk_left = ~state;\n  assign walk_right = state;\n\nendmodule"}
{"task_id": "circuit1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    output q\n);\n\nassign q = a & b;\n\nendmodule"}
{"task_id": "7458", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d,\n    input p1e,\n    input p1f,\n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n    wire and1, and2, and3, and4;\n\n    assign and1 = p1a & p1b & p1c;\n    assign and2 = p1d & p1e & p1f;\n    assign and3 = p2a & p2b;\n    assign and4 = p2c & p2d;\n\n    assign p1y = and1 | and2;\n    assign p2y = and3 | and4;\n\nendmodule"}
{"task_id": "2014_q3c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    input [2:0] y,\n    output reg Y0,\n    output reg z\n);\n    \n    reg [2:0] next_y;\n    \n    always @(posedge clk) begin\n        y <= next_y;\n        Y0 <= y[0];\n    end\n    \n    always @(*) begin\n        case(y)\n            3'b000: next_y = x ? 3'b001 : 3'b000;\n            3'b001: next_y = x ? 3'b100 : 3'b001;\n            3'b010: next_y = x ? 3'b001 : 3'b010;\n            3'b011: next_y = x ? 3'b010 : 3'b001;\n            3'b100: next_y = x ? 3'b100 : 3'b011;\n            default: next_y = 3'b000;\n        endcase\n    end\n    \n    always @(*) begin\n        if (y == 3'b011 || y == 3'b100)\n            z = 1'b1;\n        else\n            z = 1'b0;\n    end\n\nendmodule"}
{"task_id": "m2014_q4e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 2-input NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    \n    assign out = ~(in1 | in2); // NOR gate implementation\n\nendmodule"}
{"task_id": "wire4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    output w,\n    output x,\n    output y,\n    output z\n);\n    // Connecting inputs to outputs\n    assign w = a;\n    assign x = b;\n    assign y = b;\n    assign z = c;\nendmodule"}
{"task_id": "m2014_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input ar,\n    output logic q\n);\n    always @(posedge clk or posedge ar) begin\n        if (ar)\n            q <= 1'b0; // Reset output to 0 when ar is high\n        else\n            q <= d; // Set output to d on clock edge\n    end\nendmodule"}
{"task_id": "always_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "module top_module (\n    input [2:0] sel,\n    input [3:0] data0,\n    input [3:0] data1,\n    input [3:0] data2,\n    input [3:0] data3,\n    input [3:0] data4,\n    input [3:0] data5,\n    output reg [3:0] out\n);\n\nalways @(*) begin\n    case(sel)\n        3'b000: out = data0;\n        3'b001: out = data1;\n        3'b010: out = data2;\n        3'b011: out = data3;\n        3'b100: out = data4;\n        3'b101: out = data5;\n        default: out = 4'b0000;\n    endcase\nend\n\nendmodule"}
{"task_id": "timer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "module top_module(\n    input clk, \n    input load, \n    input [9:0] data, \n    output reg tc\n);\n    reg [9:0] counter;\n\n    always @(posedge clk) begin\n        if (load)\n            counter <= data;\n        else if (!counter)\n            tc <= 1'b1;\n        else begin\n            counter <= counter - 1'b1;\n            tc <= 1'b0;\n        end\n    end\n\nendmodule"}
{"task_id": "review2015_fsmseq", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg start_shifting);\n\n    // State encoding\n    localparam [1:0] S0 = 2'b00, S1 = 2'b01, S2 = 2'b10, S3 = 2'b11;\n\n    // State register\n    reg [1:0] state, next_state;\n\n    // State transition logic\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= S0;\n            start_shifting <= 1'b0;\n        end else begin\n            state <= next_state;\n            if (state == S3) start_shifting <= 1'b1;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            S0: next_state = data ? S1 : S0;\n            S1: next_state = data ? S2 : S0;\n            S2: next_state = data ? S3 : S0;\n            S3: next_state = S3;\n            default: next_state = S0;\n        endcase\n    end\n\nendmodule"}
{"task_id": "dff8r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 8'b0;\n        else\n            q <= d;\n    end\n\nendmodule"}
{"task_id": "edgedetect2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] anyedge\n);\n    \n    reg [7:0] in_prev;\n\n    always @(posedge clk) begin\n        in_prev <= in;\n        anyedge <= (in & ~in_prev); // Detect rising edges\n    end\n\nendmodule"}
{"task_id": "count1to10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nMake a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'd1;\n        else if (q == 4'd10)\n            q <= 4'd1;\n        else\n            q <= q + 1'b1;\n    end\n    \nendmodule"}
{"task_id": "circuit9", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg [2:0] q\n);\n\nalways @(posedge clk) begin\n    if (a)\n        q <= 4'd4;\n    else if (q == 4'd6)\n        q <= 4'd0;\n    else\n        q <= q + 4'd1;\nend\n\nendmodule"}
{"task_id": "lfsr5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [4:0] q);\n\n    always @(posedge clk) begin\n        if (reset)\n            q <= 5'b10000; // Reset to 1\n        else\n            q <= {q[3:0], q[4] ^ q[2]}; // Galois LFSR with taps at 5 and 3\n    end\n\nendmodule"}
{"task_id": "bugs_addsubz", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "module top_module (\n    input do_sub,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out,\n    output reg result_is_zero\n);\n\n    always @(*) begin\n        if (do_sub)\n            out = a - b;\n        else\n            out = a + b;\n\n        result_is_zero = (out == 8'd0);\n    end\n\nendmodule"}
{"task_id": "m2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n\n    // Implementing the Karnaugh map logic\n    assign f = ~(x[4] & x[3]) | (x[3] & x[2]) | (x[3] & ~x[1] & x[4]);\n\nendmodule"}
{"task_id": "bugs_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "module top_module (\n    input [7:0] code,\n    output reg [3:0] out,\n    output reg valid\n);\n    always @(*) begin\n        case(code)\n            8'h45: begin out = 4'd0; valid = 1'b1; end\n            8'h16: begin out = 4'd1; valid = 1'b1; end\n            8'h1e: begin out = 4'd2; valid = 1'b1; end\n            8'h26: begin out = 4'd3; valid = 1'b1; end\n            8'h25: begin out = 4'd4; valid = 1'b1; end\n            8'h2e: begin out = 4'd5; valid = 1'b1; end\n            8'h36: begin out = 4'd6; valid = 1'b1; end\n            8'h3d: begin out = 4'd7; valid = 1'b1; end\n            8'h3e: begin out = 4'd8; valid = 1'b1; end\n            8'h46: begin out = 4'd9; valid = 1'b1; end\n            default: begin out = 4'd0; valid = 1'b0; end\n        endcase\n    end\nendmodule"}
{"task_id": "vectorr", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven an 8-bit input vector [7:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [7:0] out\n);\n    assign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\nendmodule"}
{"task_id": "kmap3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n\n    always @(*) begin\n        case({c, b, a})\n            3'b000: out = 0;\n            3'b001: out = 1;\n            3'b010: out = 0;\n            3'b011: out = 0;\n            3'b100: out = 0;\n            3'b101: out = 1;\n            3'b110: out = 1;\n            3'b111: out = 1;\n        endcase\n    end\n\nendmodule"}
{"task_id": "review2015_shiftcount", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input shift_ena,\n    input count_ena,\n    input data,\n    output reg [3:0] q);\n\n    always @(posedge clk) begin\n        if (shift_ena) begin\n            q[3:0] <= {data, q[3:0][2:0]};\n        end else if (count_ena) begin\n            q <= q - 1'b1;\n        end\n    end\n\nendmodule"}
{"task_id": "wire", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with one input and one output that behaves like a wire.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = in;\nendmodule"}
{"task_id": "review2015_fsmshift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output shift_ena\n);\n\nreg [1:0] state, next_state;\nlocalparam S_IDLE = 2'b00;\nlocalparam S_SHIFT1 = 2'b01;\nlocalparam S_SHIFT2 = 2'b10;\nlocalparam S_SHIFT3 = 2'b11;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= S_IDLE;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        S_IDLE: next_state = reset ? S_IDLE : S_SHIFT1;\n        S_SHIFT1: next_state = S_SHIFT2;\n        S_SHIFT2: next_state = S_SHIFT3;\n        S_SHIFT3: next_state = S_IDLE;\n        default: next_state = S_IDLE;\n    endcase\nend\n\nassign shift_ena = (state == S_SHIFT1) | (state == S_SHIFT2) | (state == S_SHIFT3);\n\nendmodule"}
{"task_id": "count15", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n    \n    always @(posedge clk) begin\n        if (reset)\n            q <= 4'b0000;  // Reset to 0\n        else\n            q <= q + 1;   // Increment counter\n    end\nendmodule"}
{"task_id": "always_if", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel_b1,\n    input sel_b2,\n    output out_assign,\n    output reg out_always\n);\n\n    // Using assign statement\n    assign out_assign = ((sel_b1 & sel_b2) ? b : a);\n    \n    // Using procedural if statement\n    always @(*) begin\n        if (sel_b1 & sel_b2)\n            out_always = b;\n        else\n            out_always = a;\n    end\n\nendmodule"}
{"task_id": "kmap1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    input c,\n    output out\n);\n\nassign out = b | c;\n\nendmodule"}
{"task_id": "2013_q2afsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input [3:1] r,\n    output [3:1] g\n);\n\n    // State encoding\n    localparam A = 4'b0000;\n    localparam B = 4'b0001;\n    localparam C = 4'b0010;\n    localparam D = 4'b0011;\n    reg [3:0] current_state, next_state;\n\n    // State transition logic\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            current_state <= A;\n        else\n            current_state <= next_state;\n    end\n\n    always @(*) begin\n        case (current_state)\n            A: begin\n                if (r[1])\n                    next_state = B;\n                else if (r[2])\n                    next_state = C;\n                else if (r[3])\n                    next_state = D;\n                else\n                    next_state = A;\n            end\n            B: begin\n                if (r[1])\n                    next_state = B;\n                else\n                    next_state = A;\n            end\n            C: begin\n                if (r[2])\n                    next_state = C;\n                else\n                    next_state = A;\n            end\n            D: next_state = A;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        g[1] = (current_state == B);\n        g[2] = (current_state == C);\n        g[3] = (current_state == D);\n    end\n\nendmodule"}
{"task_id": "count10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q\n);\n    always @(posedge clk) begin\n        if (reset)\n            q <= 4'd0; // Reset counter to 0\n        else if (q == 4'd9) // Check if counter reached 9\n            q <= 4'd0; // Reset counter to 0\n        else\n            q <= q + 1'b1; // Increment counter\n    end\nendmodule"}
{"task_id": "fsm_ps2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output done\n);\n    localparam [1:0] IDLE = 2'b00, BYTE1 = 2'b01, BYTE2 = 2'b10;\n    reg [1:0] state, next_state;\n    reg [7:0] byte_count;\n    reg done_reg;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= IDLE;\n            byte_count <= 8'd0;\n            done_reg <= 1'b0;\n        end else begin\n            state <= next_state;\n            if (state == BYTE2 && byte_count == 8'd2) begin\n                done_reg <= 1'b1;\n                byte_count <= 8'd0;\n            end else if (state != IDLE) begin\n                byte_count <= byte_count + 1'b1;\n            end else begin\n                done_reg <= 1'b0;\n            end\n        end\n    end\n\n    always @(*) begin\n        next_state = state;\n        case (state)\n            IDLE: next_state = in[3] ? BYTE1 : IDLE;\n            BYTE1: next_state = BYTE2;\n            BYTE2: next_state = BYTE2;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    assign done = done_reg;\n\nendmodule"}
{"task_id": "mux2to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel,\n    output out\n);\n    assign out = sel ? b : a;\nendmodule"}
{"task_id": "gates4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and = &in;  // 4-input AND gate\n    assign out_or = |in;   // 4-input OR gate\n    assign out_xor = ^in;  // 4-input XOR gate\nendmodule"}
{"task_id": "2014_q3bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input x,\n    output reg z\n);\n    reg [2:0] y;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            y <= 3'b000;\n        else\n            case (y)\n                3'b000: y <= (x) ? 3'b001 : 3'b000;\n                3'b001: y <= (x) ? 3'b100 : 3'b001;\n                3'b010: y <= (x) ? 3'b001 : 3'b010;\n                3'b011: y <= (x) ? 3'b100 : 3'b010;\n                3'b100: y <= (x) ? 3'b100 : 3'b011;\n                default: y <= 3'b000;\n            endcase\n    end\n\n    always @(*) begin\n        case (y)\n            3'b011, 3'b100: z = 1'b1;\n            default: z = 1'b0;\n        endcase\n    end\nendmodule"}
{"task_id": "2013_q2bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input x,\n    input y,\n    output f,\n    output g\n);\n\n    localparam A = 3'b000;\n    localparam B = 3'b001;\n    localparam C = 3'b010;\n    localparam D = 3'b011;\n    localparam E = 3'b100;\n    localparam F = 3'b101;\n    localparam G = 3'b110;\n\n    reg [2:0] state, next_state;\n    reg [1:0] x_seq, y_seq;\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            A: begin\n                next_state = resetn ? A : B;\n                f = 0;\n                g = 0;\n            end\n            B: begin\n                next_state = resetn ? A : C;\n                f = 1;\n                g = 0;\n            end\n            C: begin\n                x_seq = {x, x_seq[1:0]};\n                next_state = x_seq == 3'b101 ? D : C;\n                f = 0;\n                g = 0;\n            end\n            D: begin\n                next_state = E;\n                f = 0;\n                g = 1;\n            end\n            E: begin\n                y_seq = {y, y_seq[1:0]};\n                next_state = y_seq == 3'b011 ? G : F;\n                f = 0;\n            end\n            F: begin\n                next_state = F;\n                g = 0;\n            end\n            G: begin\n                next_state = G;\n                g = 1;\n            end\n            default: begin\n                next_state = A;\n                f = 0;\n                g = 0;\n            end\n        endcase\n    end\n\nendmodule"}
{"task_id": "dff8p", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q\n);\n    always @(negedge clk or posedge reset) begin\n        if (reset)\n            q <= 8'h34; // Reset to 0x34\n        else\n            q <= d; // Load input data\n    end\nendmodule"}
{"task_id": "reduction", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nParity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output parity\n);\n    assign parity = ^in; // XOR of all 8 bits\nendmodule"}
{"task_id": "fsm3comb", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [1:0] state,\n    output reg [1:0] next_state,\n    output out\n);\n    always @(*) begin\n        case(state)\n            2'b00: begin\n                if (in == 1'b0)\n                    next_state = 2'b00;\n                else\n                    next_state = 2'b01;\n                out = 1'b0;\n            end\n            2'b01: begin\n                if (in == 1'b0)\n                    next_state = 2'b10;\n                else\n                    next_state = 2'b01;\n                out = 1'b0;\n            end\n            2'b10: begin\n                if (in == 1'b0)\n                    next_state = 2'b00;\n                else\n                    next_state = 2'b11;\n                out = 1'b0;\n            end\n            2'b11: begin\n                if (in == 1'b0)\n                    next_state = 2'b10;\n                else\n                    next_state = 2'b01;\n                out = 1'b1;\n            end\n            default: begin\n                next_state = 2'b00;\n                out = 1'b0;\n            end\n        endcase\n    end\nendmodule"}
{"task_id": "mt2015_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n    \n    // Define a register to hold the previous state of z\n    reg z_reg;\n\n    // Sequential logic to update z_reg based on x and y\n    always @(posedge x or posedge y) begin\n        if (x) begin\n            z_reg <= 0; // Reset z_reg when x is high\n        end else if (y) begin\n            z_reg <= 1; // Set z_reg when y is high\n        end\n    end\n\n    // Combinational logic to assign z based on the current state of z_reg\n    assign z = z_reg;\n\nendmodule"}
{"task_id": "2012_q2fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n\n    // State encoding\n    localparam [2:0] A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n    reg [2:0] state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case(state)\n            A: next_state = w ? B : A;\n            B: next_state = w ? C : D;\n            C: next_state = w ? E : D;\n            D: next_state = w ? F : A;\n            E: next_state = w ? E : D;\n            F: next_state = w ? C : D;\n            default: next_state = A;\n        endcase\n    end\n\n    // State flip-flops\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Output logic\n    assign z = (state == E) | (state == F);\n\nendmodule"}
{"task_id": "dff16e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input resetn,\n    input [1:0] byteena,\n    input [15:0] d,\n    output reg [15:0] q);\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            q <= 16'b0;\n        else begin\n            if (byteena[1])\n                q[15:8] <= d[15:8];\n            if (byteena[0])\n                q[7:0] <= d[7:0];\n        end\n    end\n\nendmodule"}
{"task_id": "edgedetect", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] pedge);\n\n    always @(posedge clk) begin\n        // Detect positive edge on each bit\n        posedge <= (in & ~in[7:0] >>> 1);\n    end\n\nendmodule"}
{"task_id": "circuit8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "module top_module (\n    input clock,\n    input a, \n    output reg p,\n    output reg q\n);\n\n    always @(posedge clock) begin\n        if (a) begin\n            p <= 0;\n            q <= 1;\n        end else begin\n            p <= q;\n            q <= 0;\n        end\n    end\n\nendmodule"}
{"task_id": "rule90", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else begin\n            q[511:1] <= {q[509:0], 1'b0} ^ {1'b0, q[509:0]};\n            q[0] <= 1'b0; // Boundary condition\n        end\n    end\n\nendmodule"}
{"task_id": "mt2015_eq2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "module top_module(\n    input [1:0] A,\n    input [1:0] B,\n    output z\n);\n    assign z = (A == B);\nendmodule"}
{"task_id": "gatesv100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output [98:0] out_both,\n    output [99:1] out_any,\n    output [99:0] out_different\n);\n    assign out_both = in[98:0] & in[99:1];\n    assign out_any = in[99:1] | in[98:0];\n    assign out_different = in[99:1] ^ in[98:0];\n    assign out_both[99] = 1'b0; // No need to compute out_both[99]\nendmodule"}
{"task_id": "m2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D latch using an always block.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input d,\n    input ena,\n    output logic q\n);\n    always @(posedge ena) begin\n        q <= d; // Update q on the rising edge of ena\n    end\nendmodule"}
{"task_id": "mux256to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "module top_module (\n    input [1023:0] in,\n    input [7:0] sel,\n    output [3:0] out\n);\n    wire [3:0] selected_bits;\n\n    assign selected_bits = in[(sel+1)*4-1 : sel*4];\n    assign out = selected_bits;\n\nendmodule"}
{"task_id": "mux9to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "module top_module (\n    input [15:0] a,\n    input [15:0] b,\n    input [15:0] c,\n    input [15:0] d,\n    input [15:0] e,\n    input [15:0] f,\n    input [15:0] g,\n    input [15:0] h,\n    input [15:0] i,\n    input [3:0] sel,\n    output logic [15:0] out\n);\n\nalways @(*) begin\n    case (sel)\n        4'd0: out = a;\n        4'd1: out = b;\n        4'd2: out = c;\n        4'd3: out = d;\n        4'd4: out = e;\n        4'd5: out = f;\n        4'd6: out = g;\n        4'd7: out = h;\n        4'd8: out = i;\n        default: out = 16'hFFFF; // Set output to '1' for unused cases\n    endcase\nend\n\nendmodule"}
{"task_id": "vectorgates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "module top_module(\n    input [2:0] a, \n    input [2:0] b, \n    output [2:0] out_or_bitwise,\n    output out_or_logical,\n    output [5:0] out_not\n);\n    assign out_or_bitwise = a | b;  // Bitwise OR\n    assign out_or_logical = a || b; // Logical OR\n    assign out_not = {~b, ~a};      // Inversion and concatenation\nendmodule"}
{"task_id": "fsm3onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [3:0] state,\n    output reg [3:0] next_state,\n    output out\n);\n\n    always @(*) begin\n        case (state)\n            4'b0001: next_state = in ? 4'b0010 : 4'b0001; // A\n            4'b0010: next_state = in ? 4'b0010 : 4'b0100; // B\n            4'b0100: next_state = in ? 4'b1000 : 4'b0001; // C\n            4'b1000: next_state = in ? 4'b0100 : 4'b0010; // D\n            default: next_state = 4'b0001; // Default to state A\n        endcase\n    end\n\n    assign out = (state == 4'b1000); // Output is 1 only in state D\n\nendmodule"}
{"task_id": "conditional", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [7:0] b,\n    input [7:0] c,\n    input [7:0] d,\n    output reg [7:0] min\n);\n    always @(*) begin\n        min = a < b ? a : b;\n        min = min < c ? min : c;\n        min = min < d ? min : d;\n    end\nendmodule"}
{"task_id": "gates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output out_and,\n    output out_or,\n    output out_xor,\n    output out_nand,\n    output out_nor,\n    output out_xnor,\n    output out_anotb\n);\n    assign out_and = a & b;\n    assign out_or = a | b;\n    assign out_xor = a ^ b;\n    assign out_nand = ~(a & b);\n    assign out_nor = ~(a | b);\n    assign out_xnor = ~(a ^ b);\n    assign out_anotb = a & ~b;\nendmodule"}
{"task_id": "kmap2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output out\n);\n    wire x, y, z;\n    assign x = ~a & ~b & (c | d);\n    assign y = a & ~b & ~c & (d | ~d);\n    assign z = ~a & b & (c | ~c);\n    assign out = x | y | z;\nendmodule"}
{"task_id": "2014_q3fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input s,\n    input w,\n    output reg z\n);\n\n    // State encoding\n    localparam A = 3'b000;\n    localparam B1 = 3'b001;\n    localparam B2 = 3'b010;\n    localparam B3 = 3'b011;\n    localparam B4 = 3'b100;\n    localparam B5 = 3'b101;\n\n    reg [2:0] state, next_state;\n\n    // State register\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = s ? B1 : A;\n            B1: next_state = B2;\n            B2: next_state = B3;\n            B3: next_state = B4;\n            B4: next_state = B5;\n            B5: next_state = B1;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        case (state)\n            B4: z = w;\n            default: z = 1'b0;\n        endcase\n    end\n\nendmodule"}
{"task_id": "vector4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nOne common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [31:0] out\n);\n    assign out = {24{in[7]}, in};\nendmodule"}
{"task_id": "m2014_q4k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a shift register with four D flops. Reset is active-low synchronous resettable.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input in,\n    output out\n);\n    reg [3:0] shift_reg;\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            shift_reg <= 4'b0000;\n        else\n            shift_reg <= {shift_reg[2:0], in};\n    end\n\n    assign out = shift_reg[3];\n\nendmodule"}
{"task_id": "always_case2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output reg [1:0] pos\n);\n    always @(*) begin\n        casez (in)\n            4'b1??? : pos = 2'd0;\n            4'b01?? : pos = 2'd1;\n            4'b001? : pos = 2'd2;\n            4'b0001 : pos = 2'd3;\n            default : pos = 2'd0;\n        endcase\n    end\nendmodule"}
{"task_id": "fsm2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input areset,\n    output out\n);\n    \n    reg state, next_state;\n\n    // State transition logic\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 1'b0; // OFF\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            1'b0: next_state = j; // OFF\n            1'b1: next_state = ~k; // ON\n            default: next_state = 1'b0; // Default to OFF\n        endcase\n    end\n\n    // Output logic\n    assign out = state;\n\nendmodule"}
{"task_id": "m2014_q4i", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 0 (or logic low).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput out);\n", "completion": "module top_module(\n    output out\n);\n    assign out = 1'b0;\nendmodule"}
{"task_id": "step_one", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 1 (or logic high).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput one);\n", "completion": "module top_module(\n    output one);\n    assign one = 1'b1;\nendmodule"}
{"task_id": "vector100r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven a 100-bit input vector [99:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output reg [99:0] out\n);\n    always @* begin\n        out = {in[99], in[98], in[97], in[96], in[95], in[94], in[93], in[92], in[91], in[90],\n                in[89], in[88], in[87], in[86], in[85], in[84], in[83], in[82], in[81], in[80],\n                in[79], in[78], in[77], in[76], in[75], in[74], in[73], in[72], in[71], in[70],\n                in[69], in[68], in[67], in[66], in[65], in[64], in[63], in[62], in[61], in[60],\n                in[59], in[58], in[57], in[56], in[55], in[54], in[53], in[52], in[51], in[50],\n                in[49], in[48], in[47], in[46], in[45], in[44], in[43], in[42], in[41], in[40],\n                in[39], in[38], in[37], in[36], in[35], in[34], in[33], in[32], in[31], in[30],\n                in[29], in[28], in[27], in[26], in[25], in[24], in[23], in[22], in[21], in[20],\n                in[19], in[18], in[17], in[16], in[15], in[14], in[13], in[12], in[11], in[10],\n                in[9], in[8], in[7], in[6], in[5], in[4], in[3], in[2], in[1], in[0]};\n    end\nendmodule"}
{"task_id": "m2014_q4d", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    output logic out\n);\n  logic xor_output;\n\n  // XOR gate\n  always @(in or out) begin\n    xor_output = in ^ out;\n  end\n\n  // D flip-flop\n  always @(posedge clk) begin\n    out <= xor_output;\n  end\n\nendmodule"}
{"task_id": "shift4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input load,\n    input ena,\n    input [3:0] data,\n    output reg [3:0] q);\n    \nalways @(posedge clk or posedge areset) begin\n    if (areset)\n        q <= 4'b0000;\n    else if (load)\n        q <= data;\n    else if (ena)\n        q <= {1'b0, q[3:1]};\nend\n\nendmodule"}
{"task_id": "truthtable1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "module top_module (\n    input x3,\n    input x2,\n    input x1,\n    output f\n);\n\n    assign f = (x2 & ~x1) | (x3 & x1);\n\nendmodule"}
{"task_id": "dff8ar", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input areset,\n    output reg [7:0] q);\n\nalways @(posedge clk or posedge areset) begin\n    if (areset)\n        q <= 8'b0;  // Reset output to 0 on reset\n    else\n        q <= d;    // Update output on clock edge\nend\n\nendmodule"}
{"task_id": "gates100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and = &in; // 100-input AND gate\n    assign out_or = |in;  // 100-input OR gate\n    assign out_xor = ^in; // 100-input XOR gate\nendmodule"}
{"task_id": "hadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output sum,\n    output cout\n);\n    assign sum = a ^ b; // Sum is the XOR of a and b\n    assign cout = a & b; // Carry-out is the AND of a and b\nendmodule"}
{"task_id": "always_if2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "module top_module (\n    input cpu_overheated,\n    output reg shut_off_computer,\n    input arrived,\n    input gas_tank_empty,\n    output reg keep_driving\n);\n\n    always @(*) begin\n        if (cpu_overheated)\n            shut_off_computer = 1;\n        else\n            shut_off_computer = 0;\n    end\n\n    always @(*) begin\n        if (arrived)\n            keep_driving = 0;\n        else\n            keep_driving = ~gas_tank_empty;\n    end\n\nendmodule"}
{"task_id": "fsm2s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input reset,\n    output out\n);\n    \n    // State encoding\n    localparam OFF = 2'b00;\n    localparam ON  = 2'b01;\n    \n    reg [1:0] state, next_state;\n    \n    // State register\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= OFF;\n        else\n            state <= next_state;\n    end\n    \n    // Next state logic\n    always @(*) begin\n        case (state)\n            OFF: next_state = j ? ON : OFF;\n            ON:  next_state = k ? OFF : ON;\n            default: next_state = OFF;\n        endcase\n    end\n    \n    // Output logic\n    assign out = (state == ON);\n    \nendmodule"}
{"task_id": "vector3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "module top_module (\n    input [4:0] a,\n    input [4:0] b,\n    input [4:0] c,\n    input [4:0] d,\n    input [4:0] e,\n    input [4:0] f,\n    output [7:0] w,\n    output [7:0] x,\n    output [7:0] y,\n    output [7:0] z\n);\n\n    // Concatenate inputs and two 1 bits\n    assign {w, x, y, z} = {a, b, c, d, e, f, 2'b11};\n\nendmodule"}
{"task_id": "circuit2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n\nwire aux1, aux2;\n\nassign aux1 = a & b;\nassign aux2 = c ^ d;\nassign q = aux1 | aux2;\n\nendmodule"}
{"task_id": "andgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an AND gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = a & b;\nendmodule"}
{"task_id": "fsm1s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n    reg [1:0] state, next_state;\n    wire out;\n    \n    // State encoding: B=00, A=01\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= 2'b00; // Reset to state B\n        else\n            state <= next_state;\n    end\n    \n    always @(*) begin\n        case (state)\n            2'b00: next_state = (in == 1'b0) ? 2'b01 : 2'b00; // B -> A (in=0), B -> B (in=1)\n            2'b01: next_state = (in == 1'b0) ? 2'b00 : 2'b01; // A -> B (in=0), A -> A (in=1)\n            default: next_state = 2'b00; // Default to B\n        endcase\n    end\n    \n    assign out = (state == 2'b00); // Output 1 in state B, 0 in state A\n    \nendmodule"}
{"task_id": "fadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input cin,\n    output cout,\n    output sum\n);\n    wire sum_wire, carry_wire;\n\n    // Sum logic\n    assign sum = a ^ b ^ cin;\n\n    // Carry logic\n    assign cout = (a & b) | (b & cin) | (a & cin);\n\nendmodule"}
{"task_id": "m2014_q4g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    input in3,\n    output logic out\n);\n\n    logic xnor_out;\n\n    // XNOR operation\n    assign xnor_out = ~(in1 ^ in2);\n\n    // XOR operation with xnor_out and in3\n    assign out = xnor_out ^ in3;\n\nendmodule"}
{"task_id": "ece241_2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "module top_module (\n    input c,\n    input d,\n    output [3:0] mux_in\n);\n    wire mux2_out0, mux2_out1;\n\n    // Implement mux_in[0] using a 2-to-1 mux\n    assign mux_in[0] = mux2_out0;\n    assign mux2_out0 = d ? 0 : 1;\n\n    // Implement mux_in[1] using a 2-to-1 mux\n    assign mux_in[1] = mux2_out1;\n    assign mux2_out1 = d ? 0 : 0;\n\n    // Directly assign values to mux_in[2] and mux_in[3]\n    assign mux_in[2] = c ? 1 : 0;\n    assign mux_in[3] = c ? 1 : 1;\n\nendmodule"}
{"task_id": "ece241_2014_q5b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n    localparam [1:0] A = 2'b00, B = 2'b01;\n    reg [1:0] state, next_state;\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = (x == 1'b0) ? A : B;\n            B: next_state = B;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        z = (state == A) ? x : ~x;\n    end\nendmodule"}
{"task_id": "circuit10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "module top_module (\n    input clk,\n    input a,\n    input b,\n    output q,\n    output state\n);\n\nreg current_state, next_state;\n\nalways @(posedge clk) begin\n    current_state <= next_state;\nend\n\nalways @(*) begin\n    if (a && b)\n        next_state = 1'b0;\n    else if (a && ~b)\n        next_state = 1'b1;\n    else if (~a && b)\n        next_state = current_state;\n    else\n        next_state = 1'b0;\nend\n\nassign q = current_state;\nassign state = next_state;\n\nendmodule"}
{"task_id": "2012_q1g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n    \n    // Karnaugh map implementation\n    assign f = (x[4] & x[1]) | (x[4] & ~x[2] & ~x[1]) | (x[3] & x[2]);\n\nendmodule"}
{"task_id": "fsm_hdlc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSynchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input in,\n    output disc,\n    output flag,\n    output err);\n\nlocalparam S0 = 3'd0, S1 = 3'd1, S2 = 3'd2, S3 = 3'd3, S4 = 3'd4, S5 = 3'd5, S6 = 3'd6, S7 = 3'd7;\nreg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= S0;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        S0: if (in) next_state = S1; else next_state = S0;\n        S1: if (in) next_state = S2; else next_state = S0;\n        S2: if (in) next_state = S3; else next_state = S0;\n        S3: if (in) next_state = S4; else next_state = S0;\n        S4: if (in) next_state = S5; else next_state = S0;\n        S5: if (in) begin next_state = S6; disc = 1'b1; end else next_state = S0;\n        S6: if (in) next_state = S7; else next_state = S0;\n        S7: if (in) begin next_state = S0; err = 1'b1; end else next_state = S1; flag = 1'b1;\n        default: next_state = S0;\n    endcase\nend\n\nendmodule"}
{"task_id": "review2015_fancytimer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "module top_module(\n    input wire clk,\n    input wire reset,\n    input wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack\n);\n    reg [3:0] seq_counter, delay_counter;\n    reg [3:0] delay;\n    reg [3:0] bit_counter;\n    reg [3:0] expected_seq;\n    reg [3:0] input_seq;\n    reg [3:0] current_count;\n\n    // State machine to detect 1101 and count delay bits\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            seq_counter <= 4'd0;\n            input_seq <= 4'd0;\n            expected_seq <= 4'd0;\n            bit_counter <= 4'd0;\n            delay <= 4'd0;\n            counting <= 1'b0;\n            done <= 1'b0;\n            current_count <= 4'd0;\n        end else begin\n            if (seq_counter == 4'd4) begin\n                seq_counter <= 4'd0;\n                if (expected_seq == 4'd13) begin\n                    bit_counter <= 4'd0;\n                    expected_seq <= 4'd0;\n                    counting <= 1'b1;\n                    done <= 1'b0;\n                end else begin\n                    expected_seq <= 4'd0;\n                end\n            end else begin\n                seq_counter <= seq_counter + 1'b1;\n                input_seq <= {input_seq[2:0], data};\n                if (input_seq == expected_seq) begin\n                    expected_seq <= expected_seq + 1'b1;\n                end else begin\n                    expected_seq <= input_seq;\n                end\n            end\n            if (counting) begin\n                if (bit_counter < 4'd4) begin\n                    delay <= {delay[2:0], data};\n                    bit_counter <= bit_counter + 1'b1;\n                end else begin\n                    if (current_count == delay) begin\n                        current_count <= 4'd0;\n                    end else begin\n                        current_count <= current_count + 1'b1;\n                    end\n                    if (current_count == delay) begin\n                        counting <= 1'b0;\n                        done <= 1'b1;\n                    end\n                end\n            end else begin\n                if (done && ack) begin\n                    done <= 1'b0;\n                end\n            end\n        end\n    end\n\n    // Output remaining time\n    assign count = current_count;\n\nendmodule"}
{"task_id": "ece241_2013_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input [3:1] s,\n    output reg fr3,\n    output reg fr2,\n    output reg fr1,\n    output reg dfr\n);\n    reg [2:0] state, next_state;\n    parameter LOW = 3'b000, MID1 = 3'b001, MID2 = 3'b010, HIGH = 3'b011;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= LOW;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (s)\n            3'b111: next_state = HIGH;\n            3'b110: next_state = MID1;\n            3'b100: next_state = MID2;\n            default: next_state = LOW;\n        endcase\n    end\n\n    always @(*) begin\n        case (state)\n            LOW: {fr3, fr2, fr1, dfr} = 4'b1111;\n            MID2: {fr3, fr2, fr1, dfr} = {s[1:1], s[1:1], s[1:1], 1'b0};\n            MID1: {fr3, fr2, fr1, dfr} = {s[2:2], s[2:2], s[2:2], 1'b0};\n            HIGH: {fr3, fr2, fr1, dfr} = 4'b0000;\n            default: {fr3, fr2, fr1, dfr} = 4'b0000;\n        endcase\n    end\nendmodule"}
{"task_id": "fsm_serial", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output reg done\n);\n\n    localparam IDLE = 3'b000;\n    localparam START = 3'b001;\n    localparam DATA = 3'b010;\n    localparam STOP = 3'b011;\n    localparam ERROR = 3'b100;\n\n    reg [2:0] state, next_state;\n    reg [2:0] data_count;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= IDLE;\n            data_count <= 3'd0;\n            done <= 1'b0;\n        end else begin\n            state <= next_state;\n            done <= (state == IDLE);\n            if (state == DATA && data_count == 3'd8) begin\n                data_count <= 3'd0;\n            end else if (state == DATA) begin\n                data_count <= data_count + 1'b1;\n            end\n        end\n    end\n\n    always @(*) begin\n        case (state)\n            IDLE: next_state = (in == 1'b0) ? START : IDLE;\n            START: next_state = (in == 1'b1) ? DATA : ERROR;\n            DATA: next_state = (in == 1'b1) ? STOP : DATA;\n            STOP: next_state = (in == 1'b0) ? IDLE : ERROR;\n            default: next_state = ERROR;\n        endcase\n    end\n\nendmodule"}
{"task_id": "fsm_serialdata", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output [7:0] out_byte,\n    output done\n);\n    localparam [3:0] IDLE = 4'd0, START = 4'd1, DATA = 4'd2, STOP = 4'd3;\n    reg [3:0] state, next_state;\n    reg [7:0] data_reg;\n    reg done_reg;\n\n    // State register\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            IDLE: if (in == 1'b0) next_state = START; else next_state = IDLE;\n            START: next_state = DATA;\n            DATA: if (in == 1'b0) next_state = DATA; else next_state = STOP;\n            STOP: if (in == 1'b1) next_state = IDLE; else next_state = STOP;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Output register logic\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            data_reg <= 8'h00;\n            done_reg <= 1'b0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    done_reg <= 1'b0;\n                    data_reg <= 8'h00;\n                end\n                START: begin\n                    done_reg <= 1'b0;\n                    data_reg <= 8'h00;\n                end\n                DATA: if (in == 1'b0) data_reg <= {data_reg[6:0], 1'b0}; else data_reg <= {data_reg[6:0], 1'b0};\n                STOP: begin\n                    done_reg <= 1'b1;\n                    data_reg <= data_reg;\n                end\n                default: begin\n                    done_reg <= 1'b0;\n                    data_reg <= 8'h00;\n                end\n            endcase\n        end\n    end\n\n    assign out_byte = data_reg;\n    assign done = done_reg;\n\nendmodule"}
{"task_id": "gshare", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "module top_module(\n    input clk,\n    input areset, \n\n    input predict_valid,\n    input [6:0] predict_pc,\n    output predict_taken, \n    output [6:0] predict_history,\n\n    input train_valid,\n    input train_taken,\n    input train_mispredicted,\n    input [6:0] train_history, \n    input [6:0] train_pc\n);\n\n    // 7-bit global history register\n    reg [6:0] global_history;\n    // 128-entry table of 2-bit counters\n    reg [1:0] pht [0:127];\n    // 7-bit index for pht\n    reg [6:0] pht_index;\n    // temporary registers for current pc and history\n    reg [6:0] curr_pc, curr_history;\n\n    // Initialize PHT\n    initial begin\n        for (int i = 0; i < 128; i = i + 1)\n            pht[i] = 2'b00;\n    end\n\n    // Update branch history register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            global_history <= 7'b0;\n        else if (predict_valid && !train_valid)\n            global_history <= {global_history[5:0], predict_taken};\n    end\n\n    // Update PHT for training\n    always @(posedge clk) begin\n        if (train_valid) begin\n            pht_index = {train_pc[6:1], train_history[0]};\n            pht[pht_index] <= train_taken ? pht[pht_index] + 1 : pht[pht_index] - 1;\n        end\n    end\n\n    // Compute pht_index and predict_taken\n    always @(*) begin\n        pht_index = {predict_pc[6:1], global_history[0]};\n        predict_taken = pht[pht_index] > 1'b0;\n        predict_history = global_history;\n    end\n\nendmodule"}
{"task_id": "lemmings4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n    // State encoding\n    localparam [3:0] WALK_LEFT = 4'd0,\n                     WALK_RIGHT = 4'd1,\n                     FALLING = 4'd2,\n                     DIGGING = 4'd3,\n                     SPLATTER = 4'd4;\n\n    reg [3:0] current_state, next_state;\n    reg fall_count;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= WALK_LEFT;\n        else\n            current_state <= next_state;\n    end\n\n    always @(*) begin\n        next_state = current_state;\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n        fall_count = 0;\n\n        case (current_state)\n            WALK_LEFT:\n                if (bump_left)\n                    next_state = WALK_RIGHT;\n                else if (bump_right)\n                    next_state = WALK_LEFT;\n                else if (!ground) begin\n                    next_state = FALLING;\n                    aaah = 1'b1;\n                end else if (dig)\n                    next_state = DIGGING;\n                else begin\n                    walk_left = 1'b1;\n                end\n\n            WALK_RIGHT:\n                if (bump_right)\n                    next_state = WALK_LEFT;\n                else if (bump_left)\n                    next_state = WALK_RIGHT;\n                else if (!ground) begin\n                    next_state = FALLING;\n                    aaah = 1'b1;\n                end else if (dig)\n                    next_state = DIGGING;\n                else begin\n                    walk_right = 1'b1;\n                end\n\n            FALLING:\n                if (ground) begin\n                    fall_count = 0;\n                    next_state = WALK_RIGHT;\n                    walk_right = 1'b1;\n                end else begin\n                    fall_count <= fall_count + 1;\n                    if (fall_count > 20)\n                        next_state = SPLATTER;\n                    else\n                        aaah = 1'b1;\n                end\n\n            DIGGING:\n                if (ground)\n                    next_state = WALK_RIGHT;\n                else begin\n                    digging = 1'b1;\n                    if (!ground)\n                        next_state = FALLING;\n                end\n\n            SPLATTER:\n                // No change in state, outputs set to 0\n                walk_left = 1'b0;\n                walk_right = 1'b0;\n                aaah = 1'b0;\n                digging = 1'b0;\n        endcase\n    end\nendmodule"}
{"task_id": "review2015_fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack\n);\n    localparam [3:0] FIND_PATTERN = 4'd0, SHIFT_BITS = 4'd1, COUNTING = 4'd2, NOTIFY = 4'd3;\n    reg [3:0] state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= FIND_PATTERN;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            FIND_PATTERN: begin\n                shift_ena = 0;\n                counting = 0;\n                done = 0;\n                if (data == 1'b1) begin\n                    next_state = FIND_PATTERN + 1;\n                    shift_ena = 1;\n                end else begin\n                    next_state = FIND_PATTERN;\n                end\n            end\n            SHIFT_BITS: begin\n                shift_ena = 1;\n                counting = 0;\n                done = 0;\n                if (data == 1'b1) begin\n                    next_state = SHIFT_BITS + 1;\n                end else begin\n                    next_state = FIND_PATTERN;\n                end\n            end\n            COUNTING: begin\n                shift_ena = 0;\n                counting = 1;\n                done = 0;\n                if (done_counting) begin\n                    next_state = NOTIFY;\n                end else begin\n                    next_state = COUNTING;\n                end\n            end\n            NOTIFY: begin\n                shift_ena = 0;\n                counting = 0;\n                done = 1;\n                if (ack) begin\n                    next_state = FIND_PATTERN;\n                end else begin\n                    next_state = NOTIFY;\n                end\n            end\n            default: next_state = FIND_PATTERN;\n        endcase\n    end\nendmodule"}
{"task_id": "conwaylife", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [255:0] data,\n    output reg [255:0] q\n);\n\nreg [255:0] next_state;\n\ninteger i, j;\ninteger x, y;\ninteger neighbors;\n\nalways @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        q <= next_state;\n    end\nend\n\nalways @* begin\n    for (i = 0; i < 256; i = i + 1) begin\n        neighbors = 0;\n        x = i % 16;\n        y = i / 16;\n        // Count neighbors\n        neighbors = q[(y-1)*16+x-1] + q[(y-1)*16+x] + q[(y-1)*16+x+15] +\n                    q[y*16+x-1] + q[y*16+x+15] +\n                    q[(y+1)*16+x-1] + q[(y+1)*16+x] + q[(y+1)*16+x+15];\n        // Apply game rules\n        if (q[i] == 1'b1) begin\n            next_state[i] = (neighbors == 2) || (neighbors == 3);\n        end else begin\n            next_state[i] = neighbors == 3;\n        end\n    end\nend\n\nendmodule"}
{"task_id": "lemmings3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n    // State encoding: 000 - walk_left, 001 - walk_right, 010 - falling, 011 - digging\n    reg [2:0] state, next_state;\n    reg aahing, digging_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= 3'b000; // Reset to walk_left\n            aahing <= 1'b0;\n            digging_state <= 1'b0;\n        end else begin\n            state <= next_state;\n            aahing <= (state == 3'b010);\n            digging_state <= (state == 3'b011);\n        end\n    end\n\n    always @(*) begin\n        case (state)\n            3'b000: next_state = ground ? 3'b000 : (bump_left ? 3'b001 : (bump_right ? 3'b000 : 3'b010));\n            3'b001: next_state = ground ? 3'b001 : (bump_right ? 3'b000 : (bump_left ? 3'b001 : 3'b010));\n            3'b010: next_state = ground ? (state[2:1]) : 3'b010;\n            3'b011: next_state = ground ? (state[2:1]) : 3'b011;\n            default: next_state = 3'b000;\n        endcase\n    end\n\n    assign walk_left = (state == 3'b000);\n    assign walk_right = (state == 3'b001);\n    assign aaah = aahing;\n    assign digging = digging_state;\n\nendmodule"}
{"task_id": "count_clock", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input ena,\n    output reg pm,\n    output reg [7:0] hh,\n    output reg [7:0] mm,\n    output reg [7:0] ss\n);\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        pm <= 1'b0;  // AM\n        hh <= 8'd12; // 12:00\n        mm <= 8'd00; // 00 minutes\n        ss <= 8'd00; // 00 seconds\n    end else if (ena) begin\n        ss <= ss + 1; // Increment seconds\n        if (ss == 8'd59) begin\n            ss <= 8'd00; // Reset seconds\n            mm <= mm + 1; // Increment minutes\n            if (mm == 8'd59) begin\n                mm <= 8'd00; // Reset minutes\n                hh <= hh + 1; // Increment hours\n                if (hh == 8'd12) begin\n                    hh <= 8'd12; // Reset hours\n                    pm <= ~pm; // Toggle AM/PM\n                end\n            end\n        end\n    end\nend\n\nendmodule"}
{"task_id": "lemmings2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    output walk_left,\n    output walk_right,\n    output aaah\n);\n    \n    // States\n    localparam IDLE = 2'b00, FALLING = 2'b01, WALK_LEFT = 2'b10, WALK_RIGHT = 2'b11;\n\n    // State register\n    reg [1:0] state, next_state;\n\n    // Combinational logic to determine next state\n    always @(*) begin\n        case (state)\n            IDLE: begin\n                if (bump_left & bump_right) next_state = WALK_LEFT; // Fall to left\n                else if (bump_left) next_state = WALK_RIGHT;\n                else if (bump_right) next_state = WALK_LEFT;\n                else next_state = IDLE;\n            end\n            WALK_LEFT: begin\n                if (bump_right) next_state = WALK_RIGHT;\n                else if (!ground) next_state = FALLING;\n                else next_state = WALK_LEFT;\n            end\n            WALK_RIGHT: begin\n                if (bump_left) next_state = WALK_LEFT;\n                else if (!ground) next_state = FALLING;\n                else next_state = WALK_RIGHT;\n            end\n            FALLING: begin\n                if (ground) next_state = IDLE;\n                else next_state = FALLING;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Sequential logic to update state\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    // Output logic\n    always @(*) begin\n        walk_left = (state == WALK_LEFT);\n        walk_right = (state == WALK_RIGHT);\n        aaah = (state == FALLING);\n    end\n\nendmodule"}
{"task_id": "countbcd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output [3:1] ena,\n    output reg [15:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 16'b0000_0000_0000_0000; // Reset to 0000\n        else begin\n            // Increment the ones digit (q[3:0])\n            q[3:0] <= q[3:0] + 1'b1;\n            // Check if ones digit overflowed to increment tens digit (q[7:4])\n            if (q[3:0] == 4'b1001) begin\n                q[7:4] <= q[7:4] + 1'b1;\n                q[3:0] <= 4'b0000; // Reset ones digit\n            end\n            // Check if tens digit overflowed to increment hundreds digit (q[11:8])\n            if (q[7:4] == 4'b1001) begin\n                q[11:8] <= q[11:8] + 1'b1;\n                q[7:4] <= 4'b0000; // Reset tens digit\n            end\n            // Check if hundreds digit overflowed to increment thousands digit (q[15:12])\n            if (q[11:8] == 4'b1001) begin\n                q[15:12] <= q[15:12] + 1'b1;\n                q[11:8] <= 4'b0000; // Reset hundreds digit\n            end\n        end\n    end\n\n    assign ena[1] = q[3:0] == 4'b1001;  // Tens digit enable\n    assign ena[2] = q[7:4] == 4'b1001;  // Hundreds digit enable\n    assign ena[3] = q[11:8] == 4'b1001; // Thousands digit enable\n\nendmodule"}
{"task_id": "mux2to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] a,\n    input [99:0] b,\n    input sel,\n    output [99:0] out\n);\n    assign out = sel ? b : a;\nendmodule"}
{"task_id": "m2014_q6b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "module top_module(\n    input [3:1] y,\n    input w,\n    output reg Y2);\n\n    always @(*) begin\n        case(y)\n            3'b000: Y2 = w;    // State A\n            3'b001: Y2 = 1'b0; // State B\n            3'b010: Y2 = 1'b0; // State C\n            3'b011: Y2 = 1'b0; // State D\n            3'b100: Y2 = 1'b1; // State E\n            3'b101: Y2 = 1'b0; // State F\n            default: Y2 = 1'bx; // Default case\n        endcase\n    end\n\nendmodule"}
{"task_id": "ringer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "module top_module(\n    input ring, \n    input vibrate_mode,\n    output ringer,\n    output motor\n);\n    assign ringer = ~vibrate_mode & ring;\n    assign motor = vibrate_mode & ring;\nendmodule"}
{"task_id": "alwaysblock1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an AND gate using both an assign statement and a combinational always block. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out_assign,\n    output reg out_alwaysblock\n);\n    // Assign statement for out_assign\n    assign out_assign = a & b;\n\n    // Combinational always block for out_alwaysblock\n    always @(*) begin\n        out_alwaysblock = a & b;\n    end\nendmodule"}
{"task_id": "zero", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that always outputs a LOW.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput zero);\n", "completion": "module top_module(\n    output zero);\n    assign zero = 1'b0;\nendmodule"}
{"task_id": "circuit7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "module top_module (\n    input clk,\n    input a,\n    output reg q\n);\n\nalways @(posedge clk) begin\n    if (a)\n        q <= #1 0;\n    else\n        q <= #1 1;\nend\n\nendmodule"}
{"task_id": "ece241_2014_q5a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output reg z\n);\n    \n    enum logic {IDLE, COMPLEMENTING} state, next_state;\n    \n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n    \n    always @(*) begin\n        case (state)\n            IDLE: begin\n                z <= 1'b0; // Initialize output\n                next_state = COMPLEMENTING;\n            end\n            COMPLEMENTING: begin\n                z <= ~x; // Complement the input\n                next_state = COMPLEMENTING;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n    \nendmodule"}
{"task_id": "fsm3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n\n    // States\n    localparam A = 2'b00;\n    localparam B = 2'b01;\n    localparam C = 2'b10;\n    localparam D = 2'b11;\n\n    reg [1:0] state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case(state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    assign out = (state == D);\n\n    // Sequential logic\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\nendmodule"}
{"task_id": "vector2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that reverses the byte order of a 32-bit vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [31:0] in,\n    output [31:0] out\n);\n    // Reverse byte order: byteswap\n    assign out = {in[7:0], in[15:8], in[23:16], in[31:24]};\nendmodule"}
{"task_id": "m2014_q4c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a simple D flip flop with active high synchronous reset (reset output to 0).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input r,\n    output logic q\n);\n    always @(posedge clk) begin\n        if (r)\n            q <= 1'b0;\n        else\n            q <= d;\n    end\nendmodule"}
{"task_id": "mt2015_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the boolean function z = (x^y) & x.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n    \n    assign z = (x ^ y) & x;\n    \nendmodule"}
{"task_id": "shift18", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input ena,\n    input [1:0] amount,\n    input [63:0] data,\n    output reg [63:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else if (ena) begin\n            case (amount)\n                2'b00: q <= {q[62:0], 1'b0};  // Shift left by 1\n                2'b01: q <= {q[55:0], 8'b0};  // Shift left by 8\n                2'b10: q <= {{1{q[63]}}, q[62:0]};  // Shift right by 1 (arithmetic)\n                2'b11: q <= {{8{q[63]}}, q[55:0]};  // Shift right by 8 (arithmetic)\n            endcase\n        end\n    end\n\nendmodule"}
{"task_id": "ece241_2013_q8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input aresetn,\n    input x,\n    output reg z\n);\n    \n    reg [1:0] state, next_state;\n    \n    // State encoding\n    localparam IDLE = 2'b00,\n               S1 = 2'b01,\n               S2 = 2'b10;\n    \n    // Next state logic\n    always @(posedge clk or negedge aresetn) begin\n        if (!aresetn)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n    \n    // Output logic\n    always @(state) begin\n        case (state)\n            S2: z = 1'b1;\n            default: z = 1'b0;\n        endcase\n    end\n    \n    // Next state logic\n    always @(*) begin\n        case (state)\n            IDLE: next_state = (x) ? S1 : IDLE;\n            S1: next_state = (x) ? S1 : S2;\n            S2: next_state = (x) ? S1 : IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\n    \nendmodule"}
{"task_id": "m2014_q6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n    \n    // State encoding\n    localparam [2:0] A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n    \n    // Register to hold the current state\n    reg [2:0] current_state, next_state;\n    \n    // Output logic\n    assign z = (current_state == E);\n    \n    // State transition logic\n    always @(*) begin\n        case (current_state)\n            A: next_state = w ? A : B;\n            B: next_state = w ? D : C;\n            C: next_state = w ? D : E;\n            D: next_state = w ? A : F;\n            E: next_state = w ? D : E;\n            F: next_state = w ? D : C;\n            default: next_state = A;\n        endcase\n    end\n    \n    // State register update on the positive edge of clk or reset\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            current_state <= A;\n        else\n            current_state <= next_state;\n    end\nendmodule"}
{"task_id": "fsm_ps2data", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output [23:0] out_bytes,\n    output done\n);\n    // State encoding\n    localparam [1:0] IDLE = 2'b00, BYTE1 = 2'b01, BYTE2 = 2'b10, BYTE3 = 2'b11;\n    reg [1:0] state, next_state;\n    reg [23:0] message;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            IDLE: next_state = (in[3]) ? BYTE1 : IDLE;\n            BYTE1: next_state = BYTE2;\n            BYTE2: next_state = BYTE3;\n            BYTE3: next_state = IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            message <= 24'b0;\n            done <= 1'b0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    message <= message;\n                    done <= 1'b0;\n                end\n                BYTE1: begin\n                    message <= {in, message[23:8]};\n                    done <= 1'b0;\n                end\n                BYTE2: begin\n                    message <= {in, message[23:8]};\n                    done <= 1'b0;\n                end\n                BYTE3: begin\n                    message <= {in, message[23:8]};\n                    done <= 1'b1;\n                end\n                default: begin\n                    message <= message;\n                    done <= 1'b0;\n                end\n            endcase\n        end\n    end\n\n    assign out_bytes = message;\nendmodule"}
{"task_id": "2012_q2b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\n\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "module top_module (\n    input [5:0] y,\n    input w,\n    output Y1,\n    output Y3\n);\n\n    assign Y1 = (y == 6'b000001) | (y == 6'b000100) | (y == 6'b001000) | (y == 6'b010000);\n    assign Y3 = (y == 6'b000010) | (y == 6'b000001) | (y == 6'b100000);\n\nendmodule"}
{"task_id": "vector0", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "module top_module(\n    input [2:0] vec, \n    output [2:0] outv,\n    output o2,\n    output o1,\n    output o0\n);\n    assign outv = vec;\n    assign o2 = vec[2];\n    assign o1 = vec[1];\n    assign o0 = vec[0];\nendmodule"}
{"task_id": "kmap4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n\nalways @(*) begin\n    case({c,d,a,b})\n        4'b0000, 4'b0110, 4'b1101, 4'b1011: out = 1'b0;\n        default: out = 1'b1;\n    endcase\nend\n\nendmodule"}
{"task_id": "vector1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "module top_module (\n    input [15:0] in,\n    output [7:0] out_hi,\n    output [7:0] out_lo\n);\n    assign out_hi = in[15:8];\n    assign out_lo = in[7:0];\nendmodule"}
{"task_id": "norgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = ~(a | b); // NOR gate implementation\nendmodule"}
{"task_id": "alwaysblock2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "module top_module(\n    input clk,\n    input a, \n    input b,\n    output out_assign,\n    output reg out_always_comb,\n    output reg out_always_ff\n);\n\n    // Assign statement\n    assign out_assign = a ^ b;\n\n    // Combinational always block\n    always @(*) begin\n        out_always_comb = a ^ b;\n    end\n\n    // Clocked always block\n    always @(posedge clk) begin\n        out_always_ff <= a ^ b;\n    end\n\nendmodule"}
{"task_id": "m2014_q6c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "module top_module (\n    input [6:1] y,\n    input w,\n    output Y2,\n    output Y4\n);\n    \n    assign Y2 = y[3] | (y[2] & ~w) | (y[1] & w);\n    assign Y4 = y[5] | (y[4] & ~w) | (y[3] & w);\n    \nendmodule"}
{"task_id": "mux256to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "module top_module (\n    input [255:0] in,\n    input [7:0] sel,\n    output  out\n);\nassign out = in[sel];\nendmodule"}
{"task_id": "2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input w,\n    input R,\n    input E,\n    input L,\n    output reg Q\n);\n\n    always @(posedge clk) begin\n        if (L)\n            Q <= R;\n        else if (E)\n            Q <= Q[0]; // Shift right for E\n        else\n            Q <= w; // Load w on clock edge\n    end\n\nendmodule"}
{"task_id": "ece241_2014_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    output z\n);\n    \n    reg q1, q2, q3;\n\n    // D flip-flops\n    always @(posedge clk) begin\n        q1 <= x ^ q1;\n        q2 <= x & ~q2;\n        q3 <= x | ~q3;\n    end\n\n    // XNOR output\n    assign z = ~(q1 ^ q2 ^ q3);\n\nendmodule"}
{"task_id": "circuit4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n    assign q = (a & b) | (c & d);\nendmodule"}
{"task_id": "rule110", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else\n            q <= {q[509:0], q[0], 1'b0} ^ {1'b0, q, q[511]};\n    end\n\nendmodule"}
{"task_id": "fsm3s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n    // State encoding\n    localparam [1:0] A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n    reg [1:0] current_state, next_state;\n\n    // State register with synchronous active high reset\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            current_state <= A;\n        else\n            current_state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    assign out = (current_state == D);\n\nendmodule"}
{"task_id": "circuit5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "module top_module (\n    input [3:0] a, \n    input [3:0] b, \n    input [3:0] c, \n    input [3:0] d,\n    input [3:0] e,\n    output reg [3:0] q\n);\n    \n    always @(*) begin\n        case (c)\n            0: q = b;\n            1: q = e;\n            2: q = a;\n            3: q = d;\n            4: q = 4'b1111;\n            default: q = 4'bxxxx;\n        endcase\n    end\n    \nendmodule"}
{"task_id": "bugs_mux2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFind the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input sel,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out\n);\n\n    always @(*) begin\n        out = sel ? b : a;\n    end\n\nendmodule"}
{"task_id": "mt2015_muxdff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "module top_module(\n    input clk,\n    input L,\n    input q_in,\n    input r_in,\n    output reg Q\n);\n\nalways @(posedge clk) begin\n    if (L) begin\n        Q <= r_in;\n    end else begin\n        Q <= q_in ^ q_in; // This can be simplified to Q <= q_in;\n    end\nend\n\nendmodule\n\nmodule full_module (\n    input [2:0] r,\n    input L,\n    input clk,\n    output reg [2:0] q\n);\n\nwire L_wire;\ntop_module top1 (.clk(clk), .L(L), .q_in(q[0]), .r_in(r[0]), .Q(q[0]));\ntop_module top2 (.clk(clk), .L(L), .q_in(q[1]), .r_in(r[1]), .Q(q[1]));\ntop_module top3 (.clk(clk), .L(L), .q_in(q[2]), .r_in(r[2]), .Q(q[2]));\n\nendmodule"}
{"task_id": "edgecapture", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input [31:0] in,\n    output reg [31:0] out\n);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            out <= 32'b0;\n        else begin\n            out <= (in & ~{32{in[0]}}) & ~in;\n        end\n    end\n\nendmodule"}
{"task_id": "dff8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    output reg [7:0] q\n);\nalways @(posedge clk) begin\n    q <= d;\nend\nendmodule"}
{"task_id": "ece241_2014_q1c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nAssume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [8:0] b,  // Extended to 9 bits to detect overflow\n    output [7:0] s,\n    output overflow\n);\n    assign s = a + b[7:0];\n    assign overflow = b[8] ^ b[7];  // Overflow occurs when the carry-in and carry-out of the MSB differ\nendmodule"}
{"task_id": "review2015_fsmonehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output reg B3_next,\n    output reg S_next,\n    output reg S1_next,\n    output reg Count_next,\n    output reg Wait_next,\n    output reg done,\n    output reg counting,\n    output reg shift_ena\n);\n\n    always @(*) begin\n        B3_next = state[8] & ~d;  // B3 transitions to Count if d = 0\n        S_next = state[9] | (state[0] & ~d);  // S transitions if d = 0 or in S\n        S1_next = state[1] & d;  // S1 transitions to S11 if d = 1\n        Count_next = state[7] & ~done_counting;  // Count stays if done_counting = 0\n        Wait_next = state[6] & ~ack;  // Wait stays if ack = 0\n        done = state[6];  // done is 1 in Wait state\n        counting = state[7];  // counting is 1 in Count state\n        shift_ena = |(state[0:3] | state[4] | state[6]);  // shift_ena is 1 in B0, B1, B2, B3, Count, Wait\n    end\n\nendmodule"}
{"task_id": "counter_2bc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 2'b01; // Reset to weakly not-taken\n        else if (train_valid) begin\n            if (train_taken)\n                state <= (state == 2'b11) ? state : state + 1'b1; // Increment up to 3\n            else\n                state <= (state == 2'b00) ? state : state - 1'b1; // Decrement down to 0\n        end\n    end\n\nendmodule"}
{"task_id": "always_casez", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output reg [2:0] pos\n);\nalways @* begin\n    pos = 3'd7; // default to highest bit\n    if (in[0]) pos = 3'd0;\n    else if (in[1]) pos = 3'd1;\n    else if (in[2]) pos = 3'd2;\n    else if (in[3]) pos = 3'd3;\n    else if (in[4]) pos = 3'd4;\n    else if (in[5]) pos = 3'd5;\n    else if (in[6]) pos = 3'd6;\n    else if (in[7]) pos = 3'd7;\n    else pos = 3'd0; // all bits are 0\nend\nendmodule"}
{"task_id": "always_nolatches", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "module top_module (\n    input [15:0] scancode,\n    output reg left,\n    output reg down,\n    output reg right,\n    output reg up\n);\n\nalways @(*) begin\n    left = 1'b0;\n    down = 1'b0;\n    right = 1'b0;\n    up = 1'b0;\n\n    case(scancode)\n        16'hE06B: left = 1'b1;\n        16'hE072: down = 1'b1;\n        16'hE074: right = 1'b1;\n        16'hE075: up = 1'b1;\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4j", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 4-bit adder with full adders. The output sum should include the overflow bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "module top_module (\n    input [3:0] x,\n    input [4:0] y,\n    output [4:0] sum\n);\n    wire carry;\n\n    assign {carry, sum[3:1]} = x + y[3:0];\n    assign sum[0] = carry;\n\nendmodule"}
{"task_id": "history_shift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            predict_history <= 32'b0;\n        end else if (train_mispredicted) begin\n            predict_history <= {train_history, train_taken};\n        end else if (predict_valid) begin\n            predict_history <= {predict_history[30:0], predict_taken};\n        end\n    end\nendmodule"}
{"task_id": "wire_decl", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out,\n    output out_n\n);\n    wire and1, and2;\n\n    // First layer: AND gates\n    assign and1 = a & b;\n    assign and2 = c & d;\n\n    // Second layer: OR gate\n    assign out = and1 | and2;\n\n    // Inverted output\n    assign out_n = ~out;\nendmodule"}
{"task_id": "dff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a single D flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q);\n    \n    always @(posedge clk) begin\n        q <= d; // D flip-flop behavior\n    end\nendmodule"}
{"task_id": "ece241_2013_q12", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "module top_module (\n    input clk,\n    input enable,\n    input S,\n    input A,\n    input B,\n    input C,\n    output reg Z\n);\n\nreg [7:0] shift_reg;\n\nalways @(posedge clk) begin\n    if (enable)\n        shift_reg <= {shift_reg[6:0], S};\nend\n\nalways @(*) begin\n    case ({A, B, C})\n        3'b000: Z = shift_reg[0];\n        3'b001: Z = shift_reg[1];\n        3'b010: Z = shift_reg[2];\n        3'b011: Z = shift_reg[3];\n        3'b100: Z = shift_reg[4];\n        3'b101: Z = shift_reg[5];\n        3'b110: Z = shift_reg[6];\n        3'b111: Z = shift_reg[7];\n        default: Z = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "thermostat", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "module top_module(\n    input mode,\n    input too_cold, \n    input too_hot,\n    input fan_on,\n    output heater,\n    output aircon,\n    output fan\n);\n    assign heater = mode & too_cold;\n    assign aircon = ~mode & too_hot;\n    assign fan = heater | aircon | fan_on;\n\nendmodule"}
{"task_id": "ece241_2013_q2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out_sop,\n    output out_pos\n);\n\n    // Sum-of-Products (SOP) form\n    assign out_sop = (a & b & ~c & ~d) | (~a & ~b & c & ~d) | (~a & ~b & ~c & d);\n    \n    // Product-of-Sums (POS) form\n    assign out_pos = (~a | ~b | c | d) & (~a | b | ~c | ~d) & (a | ~b | ~c | d);\n\nendmodule"}
{"task_id": "lfsr32", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [31:0] q\n);\n    always @(posedge clk) begin\n        if (reset)\n            q <= 32'h1;\n        else\n            q <= {q[30:0], q[31] ^ q[21] ^ q[1] ^ q[0]};\n    end\nendmodule"}
{"task_id": "circuit3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n    // q is the logical OR of inputs a, b, c, and d.\n    assign q = a | b | c | d;\nendmodule"}
{"task_id": "7420", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d, \n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n    // 4-input NAND gate for output p1y\n    assign p1y = ~(p1a & p1b & p1c & p1d);\n    // 4-input NAND gate for output p2y\n    assign p2y = ~(p2a & p2b & p2c & p2d);\nendmodule"}
{"task_id": "popcount255", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input [254:0] in,\n    output reg [7:0] out\n);\n    reg [7:0] count;\n\n    always @(*) begin\n        count = 0;\n        for (int i = 0; i < 255; i = i + 1) begin\n            if (in[i]) count = count + 1;\n        end\n        out = count;\n    end\nendmodule"}
{"task_id": "gatesv", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output [2:0] out_both,\n    output [3:1] out_any,\n    output [3:0] out_different\n);\n    assign out_both = {in[3] & in[2], in[2] & in[1], in[1] & in[0]};\n    assign out_any = {in[0], in[1] | in[0], in[2] | in[1], in[3] | in[2]};\n    assign out_different = {in[3] ^ in[2], in[2] ^ in[1], in[1] ^ in[0], in[0] ^ in[3]};\nendmodule"}
{"task_id": "circuit6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "module top_module (\n    input [2:0] a, \n    output reg [15:0] q\n);\nalways @(*) begin\n    case(a)\n        3'b000: q = 16'h1232;\n        3'b001: q = 16'hAEE0;\n        3'b010: q = 16'h27D4;\n        3'b011: q = 16'h5A0E;\n        3'b100: q = 16'h2066;\n        3'b101: q = 16'h64CE;\n        3'b110: q = 16'hC526;\n        3'b111: q = 16'h2F19;\n        default: q = 16'h0000;\n    endcase\nend\nendmodule"}
{"task_id": "countslow", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input slowena,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'd0;  // Reset to 0\n        else if (slowena)\n            q <= (q == 4'd9) ? 4'd0 : q + 1'b1;  // Increment if not at 9\n    end\n\nendmodule"}
{"task_id": "m2014_q4f", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    logic inverted_in2;\n    \n    // Invert in2 to simulate the bubble\n    not (inverted_in2, in2);\n    // AND in1 with inverted in2\n    and (out, in1, inverted_in2);\nendmodule"}
{"task_id": "m2014_q4h", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module assigns the output port to the same value as the input port combinationally.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out);\n    assign out = in;\nendmodule"}
{"task_id": "fsm1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n  \n    // State encoding\n    localparam [1:0] B = 2'b00, A = 2'b01;\n    reg [1:0] current_state, next_state;\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= B;\n        else\n            current_state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            B: next_state = in ? B : A;\n            A: next_state = in ? A : B;\n            default: next_state = B;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        out = current_state[0];\n    end\n\nendmodule"}
{"task_id": "dualedge", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q);\n\n    reg q1;\n\n    always @(posedge clk) begin\n        q1 <= d; // Capture input on positive edge\n    end\n\n    always @(negedge clk) begin\n        q <= q1; // Update output on negative edge\n    end\n\nendmodule"}
{"task_id": "xnorgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an XNOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = ~(a ^ b); // XNOR operation using XOR and NOT\nendmodule"}
{"task_id": "mt2015_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nModule A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z\n);\n    // Submodule A: Implements (x^y) & x\n    wire a_out;\n    module_a A_inst (\n        .x(x),\n        .y(y),\n        .z(a_out)\n    );\n\n    // Submodule B: Implements the given truth table\n    wire b_out;\n    module_b B_inst (\n        .x(x),\n        .y(y),\n        .z(b_out)\n    );\n\n    // Output logic\n    wire or_out, and_out;\n    // OR gate for outputs of A and B\n    or #1 or_gate(a_out, b_out, or_out);\n    // AND gate for outputs of A and B\n    and #1 and_gate(a_out, b_out, and_out);\n    // XOR gate for outputs of OR and AND\n    xor #1 xor_gate(or_out, and_out, z);\nendmodule\n\nmodule module_a(\n    input x,\n    input y,\n    output z\n);\n    assign z = (x ^ y) & x;\nendmodule\n\nmodule module_b(\n    input x,\n    input y,\n    output z\n);\n    // Implement B using a case statement for the given truth table\n    always @(*) begin\n        case({x, y})\n            2'b00: z = 1;\n            2'b01: z = 0;\n            2'b10: z = 0;\n            2'b11: z = 1;\n        endcase\n    end\nendmodule"}
{"task_id": "rotate100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [1:0] ena,\n    input [99:0] data,\n    output reg [99:0] q);\n    \n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else if (ena == 2'b01)\n            q <= {q[0], q[99:1]};\n        else if (ena == 2'b10)\n            q <= {q[98:0], q[99]};\n    end\nendmodule"}
{"task_id": "review2015_count1k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [9:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 10'd0;\n        else if (q == 10'd999)\n            q <= 10'd0;\n        else\n            q <= q + 1'b1;\n    end\n\nendmodule"}
{"task_id": "notgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOT gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = ~in;\nendmodule"}
{"task_id": "fsm_onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "module top_module (\n    input in,\n    input [9:0] state,\n    output [9:0] next_state,\n    output out1,\n    output out2);\n\n    // Next state logic\n    assign next_state = state ? {state[5] & ~in ? 10'd8 : state[5] & in ? 10'd6 : 10'd0,\n                                 state[6] & ~in ? 10'd9 : state[6] & in ? 10'd7 : 10'd0,\n                                 state[3] & ~in ? 10'd4 : state[3] & in ? 10'd5 : 10'd0,\n                                 state[2] & ~in ? 10'd3 : state[2] & in ? 10'd2 : 10'd0,\n                                 state[1] & ~in ? 10'd1 : state[1] & in ? 10'd0 : 10'd0,\n                                 state[0] & ~in ? 10'd0 : state[0] & in ? 10'd1 : 10'd0,\n                                 10'd0,\n                                 10'd0,\n                                 10'd0,\n                                 10'd0} : 10'd0;\n\n    // Output logic\n    assign {out2, out1} = state[7] & in ? 2'b10 : 2'b00;\n\nendmodule"}
{"task_id": "ece241_2013_q7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    output reg Q\n);\n\nalways @(posedge clk) begin\n    case ({j, k})\n        2'b00: Q <= Q;    // Hold state\n        2'b01: Q <= 1'b0; // Reset\n        2'b10: Q <= 1'b1; // Set\n        2'b11: Q <= ~Q;   // Toggle\n    endcase\nend\n\nendmodule"}
{"task_id": "popcount3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "module top_module (\n    input [2:0] in,\n    output [1:0] out\n);\n    assign out = in[0] + in[1] + in[2];\nendmodule"}
{"task_id": "vector5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    input e,\n    output [24:0] out\n);\n    assign out[24] = ~a ^ a;\n    assign out[23] = ~a ^ b;\n    assign out[22] = ~a ^ c;\n    assign out[21] = ~a ^ d;\n    assign out[20] = ~a ^ e;\n    assign out[19] = ~b ^ a;\n    assign out[18] = ~b ^ b;\n    assign out[17] = ~b ^ c;\n    assign out[16] = ~b ^ d;\n    assign out[15] = ~b ^ e;\n    assign out[14] = ~c ^ a;\n    assign out[13] = ~c ^ b;\n    assign out[12] = ~c ^ c;\n    assign out[11] = ~c ^ d;\n    assign out[10] = ~c ^ e;\n    assign out[ 9] = ~d ^ a;\n    assign out[ 8] = ~d ^ b;\n    assign out[ 7] = ~d ^ c;\n    assign out[ 6] = ~d ^ d;\n    assign out[ 5] = ~d ^ e;\n    assign out[ 4] = ~e ^ a;\n    assign out[ 3] = ~e ^ b;\n    assign out[ 2] = ~e ^ c;\n    assign out[ 1] = ~e ^ d;\n    assign out[ 0] = ~e ^ e;\nendmodule"}
{"task_id": "lemmings1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    output walk_left,\n    output walk_right\n);\n    // State encoding\n    localparam LEFT = 1'b0;\n    localparam RIGHT = 1'b1;\n    \n    reg state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (state)\n            LEFT: next_state = bump_right ? RIGHT : LEFT;\n            RIGHT: next_state = bump_left ? LEFT : RIGHT;\n            default: next_state = LEFT;\n        endcase\n    end\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= LEFT;\n        else\n            state <= next_state;\n    end\n\n    // Output logic\n    assign walk_left = state == LEFT;\n    assign walk_right = state == RIGHT;\n\nendmodule"}
{"task_id": "circuit1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    output q\n);\n    \n    assign q = a & b;\n\nendmodule"}
{"task_id": "7458", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d,\n    input p1e,\n    input p1f,\n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n\n  wire and1, and2, and3, and4;\n\n  assign and1 = p1a & p1b & p1c;\n  assign and2 = p1d & p1e & p1f;\n  assign and3 = p2a & p2b;\n  assign and4 = p2c & p2d;\n\n  assign p1y = and1 | and2;\n  assign p2y = and3 | and4;\n\nendmodule"}
{"task_id": "2014_q3c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    input [2:0] y,\n    output reg Y0,\n    output reg z\n);\nreg [2:0] next_y;\n\nalways @(posedge clk) begin\n    case(y)\n        3'b000: next_y <= x ? 3'b001 : 3'b000;\n        3'b001: next_y <= x ? 3'b100 : 3'b001;\n        3'b010: next_y <= x ? 3'b001 : 3'b010;\n        3'b011: next_y <= x ? 3'b010 : 3'b001;\n        3'b100: next_y <= x ? 3'b100 : 3'b011;\n        default: next_y <= 3'b000;\n    endcase\n    Y0 <= next_y[0];\n    z  <= (y == 3'b011) | (y == 3'b100);\nend\n\nendmodule"}
{"task_id": "m2014_q4e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 2-input NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    \n    // NOR gate implementation\n    assign out = ~(in1 | in2);\n\nendmodule"}
{"task_id": "wire4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    output w,\n    output x,\n    output y,\n    output z\n);\n    // Connect inputs to outputs\n    assign w = a;\n    assign x = b;\n    assign y = b;\n    assign z = c;\nendmodule"}
{"task_id": "m2014_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input ar,\n    output logic q\n);\n    always @(posedge clk or posedge ar) begin\n        if (ar)\n            q <= 1'b0;\n        else\n            q <= d;\n    end\nendmodule"}
{"task_id": "always_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "module top_module (\n    input [2:0] sel,\n    input [3:0] data0,\n    input [3:0] data1,\n    input [3:0] data2,\n    input [3:0] data3,\n    input [3:0] data4,\n    input [3:0] data5,\n    output reg [3:0] out\n);\n    always @(*) begin\n        case(sel)\n            3'b000: out = data0;\n            3'b001: out = data1;\n            3'b010: out = data2;\n            3'b011: out = data3;\n            3'b100: out = data4;\n            3'b101: out = data5;\n            default: out = 4'b0;\n        endcase\n    end\nendmodule"}
{"task_id": "timer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "module top_module(\n    input clk, \n    input load, \n    input [9:0] data, \n    output tc\n);\n    reg [9:0] counter;\n    reg tc_reg;\n\n    always @(posedge clk) begin\n        if (load) begin\n            counter <= data;\n            tc_reg <= 1'b0; // Reset tc on load\n        end else if (counter > 0) begin\n            counter <= counter - 1;\n            tc_reg <= 1'b0; // Reset tc if counting\n        end else begin\n            tc_reg <= 1'b1; // Set tc when counter reaches 0\n        end\n    end\n\n    assign tc = tc_reg; // Output tc\n\nendmodule"}
{"task_id": "review2015_fsmseq", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg start_shifting);\n    parameter [3:0] IDLE  = 4'b0000,\n                    S1    = 4'b0001,\n                    S11   = 4'b0010,\n                    S110  = 4'b0011,\n                    S1101 = 4'b0100;\n    reg [3:0] state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= IDLE;\n            start_shifting <= 1'b0;\n        end else begin\n            state <= next_state;\n            if (next_state == S1101)\n                start_shifting <= 1'b1;\n            else\n                start_shifting <= 1'b0;\n        end\n    end\n\n    always @(*) begin\n        case (state)\n            IDLE:   next_state = (data) ? S1 : IDLE;\n            S1:     next_state = (data) ? S11 : IDLE;\n            S11:    next_state = (data) ? S110 : IDLE;\n            S110:   next_state = (data) ? S1101 : IDLE;\n            S1101:  next_state = IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\nendmodule"}
{"task_id": "dff8r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 8'b0;\n        else\n            q <= d;\n    end\n\nendmodule"}
{"task_id": "edgedetect2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] anyedge);\n\n    reg [7:0] in_prev;\n\n    always @(posedge clk) begin\n        in_prev <= in;\n        anyedge <= in & ~in_prev;\n    end\n\nendmodule"}
{"task_id": "count1to10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nMake a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'd1;\n        else\n            q <= (q == 4'd10) ? 4'd1 : q + 1'b1;\n    end\n\nendmodule"}
{"task_id": "circuit9", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg [2:0] q\n);\n\ninitial begin\n    q = 3'd4;\nend\n\nalways @(posedge clk) begin\n    if (a == 0) begin\n        if (q == 3'd6) begin\n            q <= 3'd0;\n        end else begin\n            q <= q + 1'b1;\n        end\n    end\n    else begin\n        q <= 3'd4;\n    end\nend\n\nendmodule"}
{"task_id": "lfsr5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [4:0] q);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 5'b10000; // Reset to initial state\n        else begin\n            // Galois LFSR with taps at bit positions 5 and 3\n            q <= {q[3], q[4] ^ q[2], q[0], q[3], q[2]};\n        end\n    end\nendmodule"}
{"task_id": "bugs_addsubz", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "module top_module (\n    input do_sub,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out,\n    output reg result_is_zero\n);\n\n    always @(*) begin\n        case (do_sub)\n            0: out = a + b;\n            1: out = a - b;\n            default: out = 8'b0; // Handle default case\n        endcase\n\n        result_is_zero = (out == 8'b0);\n    end\n\nendmodule"}
{"task_id": "m2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n    \n    always_comb begin\n        case(x)\n            4'b0000, 4'b0010, 4'b0011, 4'b0100, 4'b0110, 4'b1000, 4'b1010: f = 1'b0;\n            4'b0001, 4'b0101, 4'b0111, 4'b1001, 4'b1011: f = 1'b1;\n            default: f = 1'b1; // Don't care\n        endcase\n    end\n\nendmodule"}
{"task_id": "bugs_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "module top_module (\n    input [7:0] code,\n    output reg [3:0] out,\n    output reg valid\n);\nalways @(*) begin\n    case(code)\n        8'h45: {out, valid} = 4'd0; // 0\n        8'h16: {out, valid} = 4'd1; // 1\n        8'h1e: {out, valid} = 4'd2; // 2\n        8'h26: {out, valid} = 4'd3; // 3\n        8'h25: {out, valid} = 4'd4; // 4\n        8'h2e: {out, valid} = 4'd5; // 5\n        8'h36: {out, valid} = 4'd6; // 6\n        8'h3d: {out, valid} = 4'd7; // 7\n        8'h3e: {out, valid} = 4'd8; // 8\n        8'h46: {out, valid} = 4'd9; // 9\n        default: {out, valid} = 2'b00;\n    endcase\nend\nendmodule"}
{"task_id": "vectorr", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven an 8-bit input vector [7:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [7:0] out\n);\n    assign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\nendmodule"}
{"task_id": "kmap3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n    \n    always @(*) begin\n        case({c, b, a})\n            3'b000, 3'b010: out = 1'b0;\n            3'b001, 3'b011, 3'b100, 3'b101: out = 1'b1;\n            default: out = 1'bx;\n        endcase\n    end\n\nendmodule"}
{"task_id": "review2015_shiftcount", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input shift_ena,\n    input count_ena,\n    input data,\n    output reg [3:0] q\n);\n\nalways @(posedge clk) begin\n    if (shift_ena) begin\n        q <= {data, q[3:1]};  // Shift in data MSB first\n    end\n    else if (count_ena) begin\n        q <= q - 1'b1;  // Decrement the counter\n    end\nend\n\nendmodule"}
{"task_id": "wire", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with one input and one output that behaves like a wire.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = in;\nendmodule"}
{"task_id": "review2015_fsmshift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output shift_ena);\n\nreg [1:0] count;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        count <= 2'b00;\n    else if (count == 2'b11)\n        count <= 2'b00;\n    else\n        count <= count + 1'b1;\nend\n\nassign shift_ena = (count < 2'b10);\n\nendmodule"}
{"task_id": "count15", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'b0000;\n        else\n            q <= q + 1'b1;\n    end\n\nendmodule"}
{"task_id": "always_if", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel_b1,\n    input sel_b2,\n    output out_assign,\n    output reg out_always\n);\n\n    // Using assign statement\n    assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\n    // Using procedural if statement\n    always @(*) begin\n        if (sel_b1 & sel_b2)\n            out_always = b;\n        else\n            out_always = a;\n    end\n\nendmodule"}
{"task_id": "kmap1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    input c,\n    output out\n);\n    wire d;  // Redundant input, not used in the K-map\n\n    // Implement the logic from the Karnaugh map\n    assign out = ~(a & ~c);\nendmodule"}
{"task_id": "2013_q2afsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input [3:1] r,\n    output [3:1] g\n);\n\n// State encoding\nlocalparam A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b100;\n\nreg [2:0] state, next_state;\n\n// State transition logic\nalways @(posedge clk or negedge resetn) begin\n    if (!resetn)\n        state <= A;\n    else\n        state <= next_state;\nend\n\n// Next state logic\nalways @(*) begin\n    case (state)\n        A: next_state = (r[1]) ? B : (r[2]) ? C : (r[3]) ? D : A;\n        B: next_state = (r[1]) ? B : A;\n        C: next_state = (r[2]) ? C : A;\n        default: next_state = A;\n    endcase\nend\n\n// Output logic\nalways @(*) begin\n    case (state)\n        A: g = 3'b000;\n        B: g = 3'b100;\n        C: g = 3'b010;\n        D: g = 3'b001;\n        default: g = 3'b000;\n    endcase\nend\n\nendmodule"}
{"task_id": "count10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk) begin\n        if (reset)\n            q <= 4'b0000; // Reset to 0\n        else\n            q <= (q == 4'b1001) ? 4'b0000 : q + 1'b1; // Count to 9 then reset to 0\n    end\n\nendmodule"}
{"task_id": "fsm_ps2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output reg done\n);\n\nlocalparam [1:0] IDLE = 2'b00, BYTE1 = 2'b01, BYTE2 = 2'b10, BYTE3 = 2'b11;\nreg [1:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= IDLE;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        IDLE: next_state = in[3] ? BYTE1 : IDLE;\n        BYTE1: next_state = BYTE2;\n        BYTE2: next_state = BYTE3;\n        BYTE3: next_state = IDLE;\n        default: next_state = IDLE;\n    endcase\nend\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        done <= 1'b0;\n    else if (state == BYTE3 && next_state == IDLE)\n        done <= 1'b1;\n    else\n        done <= 1'b0;\nend\n\nendmodule"}
{"task_id": "mux2to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel,\n    output out\n);\n    assign out = sel ? b : a;\nendmodule"}
{"task_id": "gates4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and = &in;  // 4-input AND using bitwise AND and reduction operator\n    assign out_or = |in;   // 4-input OR using bitwise OR and reduction operator\n    assign out_xor = ^in;  // 4-input XOR using bitwise XOR and reduction operator\nendmodule"}
{"task_id": "2014_q3bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input x,\n    output reg z\n);\n\nreg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= 3'b000;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        3'b000: next_state = x ? 3'b001 : 3'b000;\n        3'b001: next_state = x ? 3'b100 : 3'b001;\n        3'b010: next_state = x ? 3'b001 : 3'b010;\n        3'b011: next_state = x ? 3'b100 : 3'b010;\n        3'b100: next_state = x ? 3'b100 : 3'b011;\n        default: next_state = 3'b000;\n    endcase\nend\n\nalways @(*) begin\n    case (state)\n        3'b001, 3'b010, 3'b100: z = 1'b0;\n        3'b011: z = 1'b1;\n        default: z = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "2013_q2bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input x,\n    input y,\n    output f,\n    output g\n);\n\n    // State encoding\n    localparam [1:0] A = 2'b00,\n                     B = 2'b01,\n                     C = 2'b10,\n                     D = 2'b11;\n\n    reg [1:0] state, next_state;\n\n    // State transition logic\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn) begin\n            state <= A;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = (resetn) ? B : A;\n            B: next_state = (x == 1) ? C : B;\n            C: next_state = (x == 0) ? D : C;\n            D: next_state = (y == 1) ? D : A;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        f = (state == B) ? 1'b1 : 1'b0;\n        g = (state == D) ? 1'b1 : 1'b0;\n    end\n\nendmodule"}
{"task_id": "dff8p", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n\n    always @(negedge clk or posedge reset) begin\n        if (reset)\n            q <= 8'h34;\n        else\n            q <= d;\n    end\n\nendmodule"}
{"task_id": "reduction", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nParity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output parity\n);\n    \n    wire [7:0] xor_temp;\n    \n    genvar i;\n    generate\n        for (i = 0; i < 8; i = i + 1) begin : xor_gen\n            if (i == 0)\n                assign xor_temp[i] = in[i];\n            else\n                assign xor_temp[i] = xor_temp[i-1] ^ in[i];\n        end\n    endgenerate\n\n    assign parity = xor_temp[7];\n\nendmodule"}
{"task_id": "fsm3comb", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [1:0] state,\n    output reg [1:0] next_state,\n    output out\n);\n\nalways @(*) begin\n    case(state)\n        2'b00: begin // State A\n            next_state = in ? 2'b01 : 2'b00;\n            out = 1'b0;\n        end\n        2'b01: begin // State B\n            next_state = in ? 2'b01 : 2'b10;\n            out = 1'b0;\n        end\n        2'b10: begin // State C\n            next_state = in ? 2'b11 : 2'b00;\n            out = 1'b0;\n        end\n        2'b11: begin // State D\n            next_state = in ? 2'b10 : 2'b01;\n            out = 1'b1;\n        end\n        default: begin\n            next_state = 2'b00;\n            out = 1'b0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "mt2015_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n\n    // z is high when both x and y are high, or when both are low\n    assign z = ~(x ^ y);\n\nendmodule"}
{"task_id": "2012_q2fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n\nreg [2:0] state, next_state;\n\n// State encoding: A=0, B=1, C=2, D=3, E=4, F=5\nparameter A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n\n// State table\nalways @(*) begin\n    case(state)\n        A: next_state = w ? B : A;\n        B: next_state = w ? C : D;\n        C: next_state = w ? E : D;\n        D: next_state = w ? F : A;\n        E: next_state = w ? E : D;\n        F: next_state = w ? C : D;\n        default: next_state = A;\n    endcase\nend\n\n// State flip-flops\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= A;\n    else\n        state <= next_state;\nend\n\n// Output logic\nassign z = (state == E) | (state == F);\n\nendmodule"}
{"task_id": "dff16e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input resetn,\n    input [1:0] byteena,\n    input [15:0] d,\n    output reg [15:0] q);\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            q <= 16'b0;\n        else begin\n            if (byteena[1])\n                q[15:8] <= d[15:8];\n            if (byteena[0])\n                q[7:0] <= d[7:0];\n        end\n    end\n\nendmodule"}
{"task_id": "edgedetect", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] pedge\n);\n    reg [7:0] in_prev;\n\n    always @(posedge clk) begin\n        // Store previous input\n        in_prev <= in;\n        // Detect positive edge for each bit\n        posedge <= (in & ~in_prev);\n    end\n\nendmodule"}
{"task_id": "circuit8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "module top_module (\n    input clock,\n    input a, \n    output reg p,\n    output reg q\n);\n\nalways @(posedge clock) begin\n    if (a)\n        {p, q} <= {1'b1, p};\n    else\n        {p, q} <= {q, q};\nend\n\nendmodule"}
{"task_id": "rule90", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else begin\n            for (int i = 0; i < 512; i = i + 1) begin\n                q[i] <= data[i-1] ^ data[i+1];\n            end\n        end\n    end\nendmodule"}
{"task_id": "mt2015_eq2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "module top_module(\n    input [1:0] A,\n    input [1:0] B,\n    output z);\n    \n    assign z = (A == B);\n    \nendmodule"}
{"task_id": "gatesv100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output [98:0] out_both,\n    output [99:1] out_any,\n    output [99:0] out_different\n);\n\ngenvar i;\ngenerate\n    for (i = 0; i < 99; i = i + 1) begin : gen_loop\n        assign out_both[i] = in[i] & in[i+1];\n        assign out_any[i+1] = in[i] | in[i+1];\n        assign out_different[i] = in[i] ^ in[i+1];\n    end\n    // Special case for wrapping around\n    assign out_different[99] = in[99] ^ in[0];\n    assign out_any[1] = in[0];\nendgenerate\n\nendmodule"}
{"task_id": "m2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D latch using an always block.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input d,\n    input ena,\n    output logic q\n);\nalways @(posedge ena) begin\n    q <= d;\nend\nendmodule"}
{"task_id": "mux256to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "module top_module (\n    input [1023:0] in,\n    input [7:0] sel,\n    output [3:0] out\n);\n    wire [3:0] selected_bits;\n\n    assign selected_bits = in[(sel+1)*4-1 : sel*4];  // Select 4 bits based on sel\n    assign out = selected_bits;  // Assign selected bits to output\n\nendmodule"}
{"task_id": "mux9to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "module top_module (\n    input [15:0] a,\n    input [15:0] b,\n    input [15:0] c,\n    input [15:0] d,\n    input [15:0] e,\n    input [15:0] f,\n    input [15:0] g,\n    input [15:0] h,\n    input [15:0] i,\n    input [3:0] sel,\n    output logic [15:0] out\n);\n    always @(*) begin\n        case(sel)\n            4'd0: out = a;\n            4'd1: out = b;\n            4'd2: out = c;\n            4'd3: out = d;\n            4'd4: out = e;\n            4'd5: out = f;\n            4'd6: out = g;\n            4'd7: out = h;\n            4'd8: out = i;\n            default: out = 16'b1;\n        endcase\n    end\nendmodule"}
{"task_id": "vectorgates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "module top_module(\n    input [2:0] a, \n    input [2:0] b, \n    output [2:0] out_or_bitwise,\n    output out_or_logical,\n    output [5:0] out_not\n);\n    // Bitwise OR\n    assign out_or_bitwise = a | b;\n    // Logical OR\n    assign out_or_logical = |(a | b);\n    // Inverse of inputs\n    assign out_not = {3'b111, ~b, ~a};\nendmodule"}
{"task_id": "fsm3onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [3:0] state,\n    output reg [3:0] next_state,\n    output out\n);\n\n    // State transition logic\n    always @(*) begin\n        case(state)\n            4'b0001: next_state = (in == 0) ? 4'b0001 : 4'b0010; // State A\n            4'b0010: next_state = (in == 0) ? 4'b0100 : 4'b0010; // State B\n            4'b0100: next_state = (in == 0) ? 4'b0001 : 4'b1000; // State C\n            4'b1000: next_state = (in == 0) ? 4'b0100 : 4'b0010; // State D\n            default: next_state = 4'b0001; // Default state A\n        endcase\n    end\n\n    // Output logic\n    assign out = (state == 4'b1000) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "conditional", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [7:0] b,\n    input [7:0] c,\n    input [7:0] d,\n    output reg [7:0] min\n);\n    always @(*) begin\n        min = (a < b) ? a : b;\n        min = (min < c) ? min : c;\n        min = (min < d) ? min : d;\n    end\nendmodule"}
{"task_id": "gates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output out_and,\n    output out_or,\n    output out_xor,\n    output out_nand,\n    output out_nor,\n    output out_xnor,\n    output out_anotb\n);\n\n    assign out_and = a & b;\n    assign out_or = a | b;\n    assign out_xor = a ^ b;\n    assign out_nand = ~(a & b);\n    assign out_nor = ~(a | b);\n    assign out_xnor = ~(a ^ b);\n    assign out_anotb = a & ~b;\n\nendmodule"}
{"task_id": "kmap2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output out\n);\nwire ab, cd;\nassign ab = a ^ b;\nassign cd = c ^ d;\nassign out = ab | ~cd;\nendmodule"}
{"task_id": "2014_q3fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input s,\n    input w,\n    output reg z\n);\n\n    // State encoding\n    parameter A = 2'b00;\n    parameter B1 = 2'b01;\n    parameter B2 = 2'b10;\n    parameter B3 = 2'b11;\n\n    reg [1:0] state, next_state;\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        next_state = state;\n        case (state)\n            A: next_state = s ? B1 : A;\n            B1: next_state = B2;\n            B2: next_state = B3;\n            B3: next_state = A;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            z <= 1'b0;\n        else if (state == B3 && w)\n            z <= 1'b1;\n        else if (state == B3 && !w)\n            z <= 1'b0;\n    end\n\nendmodule"}
{"task_id": "vector4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nOne common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [31:0] out\n);\n    assign out = {{24{in[7]}}, in};\nendmodule"}
{"task_id": "m2014_q4k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a shift register with four D flops. Reset is active-low synchronous resettable.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input in,\n    output out\n);\n    reg [3:0] shift_reg;\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            shift_reg <= 4'b0000;\n        else\n            shift_reg <= {shift_reg[2:0], in};\n    end\n\n    assign out = shift_reg[3];\n\nendmodule"}
{"task_id": "always_case2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output reg [1:0] pos\n);\nalways @(*) begin\n    if (in[3]) pos = 2'd3;\n    else if (in[2]) pos = 2'd2;\n    else if (in[1]) pos = 2'd1;\n    else if (in[0]) pos = 2'd0;\n    else pos = 2'd0;\nend\nendmodule"}
{"task_id": "fsm2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input areset,\n    output out\n);\n    reg [1:0] state, next_state;\n    wire out;\n\n    // State encoding: OFF = 2'b00, ON = 2'b01\n    always @(*) begin\n        case(state)\n            2'b00: next_state = j ? 2'b01 : 2'b00; // OFF to OFF or ON\n            2'b01: next_state = k ? 2'b00 : 2'b01; // ON to OFF or ON\n            default: next_state = 2'b00;            // Default state is OFF\n        endcase\n    end\n\n    // Output logic\n    assign out = (state == 2'b01) ? 1'b1 : 1'b0;\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 2'b00; // Reset to OFF\n        else\n            state <= next_state;\n    end\nendmodule"}
{"task_id": "m2014_q4i", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 0 (or logic low).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput out);\n", "completion": "module top_module(\n    output out);\n    // Always drive the output to 0\n    assign out = 1'b0;\nendmodule"}
{"task_id": "step_one", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 1 (or logic high).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput one);\n", "completion": "module top_module(\n    output one);\n    assign one = 1'b1;\nendmodule"}
{"task_id": "vector100r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven a 100-bit input vector [99:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output reg [99:0] out\n);\n    always @* begin\n        out = {in[99],in[98],in[97],in[96],in[95],in[94],in[93],in[92],in[91],in[90],\n                in[89],in[88],in[87],in[86],in[85],in[84],in[83],in[82],in[81],in[80],\n                in[79],in[78],in[77],in[76],in[75],in[74],in[73],in[72],in[71],in[70],\n                in[69],in[68],in[67],in[66],in[65],in[64],in[63],in[62],in[61],in[60],\n                in[59],in[58],in[57],in[56],in[55],in[54],in[53],in[52],in[51],in[50],\n                in[49],in[48],in[47],in[46],in[45],in[44],in[43],in[42],in[41],in[40],\n                in[39],in[38],in[37],in[36],in[35],in[34],in[33],in[32],in[31],in[30],\n                in[29],in[28],in[27],in[26],in[25],in[24],in[23],in[22],in[21],in[20],\n                in[19],in[18],in[17],in[16],in[15],in[14],in[13],in[12],in[11],in[10],\n                in[9],in[8],in[7],in[6],in[5],in[4],in[3],in[2],in[1],in[0]};\n    end\nendmodule"}
{"task_id": "m2014_q4d", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    output logic out\n);\n    \n    // D flip-flop triggered by clk\n    always_ff @(posedge clk) begin\n        out <= in ^ out;\n    end\n\nendmodule"}
{"task_id": "shift4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input load,\n    input ena,\n    input [3:0] data,\n    output reg [3:0] q\n);\n    \n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            q <= 4'b0000; // Reset shift register to zero\n        end else if (load) begin\n            q <= data; // Load data into shift register\n        end else if (ena) begin\n            q <= {1'b0, q[3:1]}; // Shift right\n        end\n    end\n\nendmodule"}
{"task_id": "truthtable1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "module top_module (\n    input x3,\n    input x2,\n    input x1,\n    output f\n);\n    assign f = (x3 & ~x1) | (x2 & x1);\nendmodule"}
{"task_id": "dff8ar", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input areset,\n    output reg [7:0] q);\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            q <= 8'b0; // Reset output to 0\n        else\n            q <= d; // Store input data\n    end\n\nendmodule"}
{"task_id": "gates100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and = &in;  // 100-input AND gate\n    assign out_or = |in;   // 100-input OR gate\n    assign out_xor = ^in;  // 100-input XOR gate\nendmodule"}
{"task_id": "hadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output sum,\n    output cout\n);\n    assign sum = a ^ b;\n    assign cout = a & b;\nendmodule"}
{"task_id": "always_if2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "module top_module (\n    input cpu_overheated,\n    output reg shut_off_computer,\n    input arrived,\n    input gas_tank_empty,\n    output reg keep_driving\n);\n\n    always @(*) begin\n        if (cpu_overheated)\n            shut_off_computer = 1;\n        else\n            shut_off_computer = 0;\n    end\n\n    always @(*) begin\n        if (arrived)\n            keep_driving = 0;\n        else\n            keep_driving = ~gas_tank_empty;\n    end\n\nendmodule"}
{"task_id": "fsm2s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input reset,\n    output reg out\n);\n\n    // State encoding\n    localparam OFF = 2'b00;\n    localparam ON = 2'b01;\n\n    reg [1:0] state, next_state;\n\n    // State register\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= OFF;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            OFF: next_state = j ? ON : OFF;\n            ON: next_state = k ? OFF : ON;\n            default: next_state = OFF;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        out = (state == ON);\n    end\n\nendmodule"}
{"task_id": "vector3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "module top_module (\n    input [4:0] a,\n    input [4:0] b,\n    input [4:0] c,\n    input [4:0] d,\n    input [4:0] e,\n    input [4:0] f,\n    output [7:0] w,\n    output [7:0] x,\n    output [7:0] y,\n    output [7:0] z\n);\n    wire [31:0] concatenated;\n    assign concatenated = {a, b, c, d, e, f, 2'b11};\n    assign {w, x, y, z} = concatenated;\nendmodule"}
{"task_id": "circuit2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n    assign q = ~(a & d) | (b & c);\nendmodule"}
{"task_id": "andgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an AND gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = a & b;\nendmodule"}
{"task_id": "fsm1s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output reg out\n);\n    reg [1:0] state, next_state;\n\n    // State encoding: 00 = A, 01 = B\n    localparam A = 2'b00;\n    localparam B = 2'b01;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= B;  // Reset state to B\n        else\n            state <= next_state;  // Update state\n    end\n\n    always @(*) begin\n        case (state)\n            B: next_state = in ? B : A;  // B to B if in=1, B to A if in=0\n            A: next_state = in ? A : B;  // A to A if in=1, A to B if in=0\n            default: next_state = B;  // Default state\n        endcase\n    end\n\n    assign out = state == B;  // Output is 1 when in state B\n\nendmodule"}
{"task_id": "fadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input cin,\n    output cout,\n    output sum\n);\n    \n    assign {cout, sum} = a + b + cin;\n    \nendmodule"}
{"task_id": "m2014_q4g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    input in3,\n    output logic out\n);\n    logic xnor_output;\n\n    // XNOR gate\n    assign xnor_output = ~(in1 ^ in2);\n\n    // XOR gate\n    assign out = xnor_output ^ in3;\n\nendmodule"}
{"task_id": "ece241_2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "module top_module (\n    input c,\n    input d,\n    output [3:0] mux_in\n);\n    wire mux2_in0, mux2_in1, mux2_in2;\n\n    // 2-to-1 multiplexers for inputs\n    assign mux2_in0 = c & ~d;\n    assign mux2_in1 = ~c & d;\n    assign mux2_in2 = c & d;\n\n    // 4-to-1 multiplexer inputs\n    assign mux_in[0] = 1'b0;  // ab = 00\n    assign mux_in[1] = 1'b1;  // ab = 01\n    assign mux_in[2] = mux2_in2;  // ab = 11\n    assign mux_in[3] = mux2_in1;  // ab = 10\n\nendmodule"}
{"task_id": "ece241_2014_q5b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n\n    // One-hot encoding for states\n    localparam [1:0] A = 2'b00, B = 2'b01;\n    reg [1:0] state, next_state;\n\n    // State transition and output logic\n    always @(*) begin\n        case (state)\n            A:  next_state = (x) ? B : A;\n            B:  next_state = B;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    assign z = (state == B) ? 1'b1 : 1'b0;\n\n    // State register update\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\nendmodule"}
{"task_id": "circuit10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "module top_module (\n    input clk,\n    input a,\n    input b,\n    output q,\n    output state\n);\n    reg q_reg, state_reg;\n\n    always @(posedge clk) begin\n        if (a && ~b) begin\n            q_reg <= 0;\n            state_reg <= 0;\n        end else if (a && b) begin\n            q_reg <= 1;\n            state_reg <= 1;\n        end else begin\n            q_reg <= q_reg;\n            state_reg <= state_reg;\n        end\n    end\n\n    assign q = q_reg;\n    assign state = state_reg;\n\nendmodule"}
{"task_id": "2012_q1g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n\n    assign f = ~(x[4] & ~x[3] & x[2]) | (x[4] & ~x[3] & ~x[2] & x[1]) | (x[4] & x[3] & ~x[2]) | (x[3] & ~x[2] & x[1]) | (x[3] & x[2] & ~x[1]) | (~x[4] & ~x[3] & x[2] & ~x[1]);\n\nendmodule"}
{"task_id": "fsm_hdlc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSynchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input in,\n    output disc,\n    output flag,\n    output err\n);\n    localparam [2:0] S0 = 3'b000, S1 = 3'b001, S2 = 3'b010, S3 = 3'b011, S4 = 3'b100, S5 = 3'b101, S6 = 3'b110, S7 = 3'b111;\n\n    reg [2:0] state, next_state;\n    reg [2:0] last_state;\n\n    wire next_disc, next_flag, next_err;\n\n    assign next_disc = (next_state == S5);\n    assign next_flag = (next_state == S6);\n    assign next_err = (next_state == S7);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= S0;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            S0: next_state = (in) ? S1 : S0;\n            S1: next_state = (in) ? S2 : S0;\n            S2: next_state = (in) ? S3 : S0;\n            S3: next_state = (in) ? S4 : S0;\n            S4: next_state = (in) ? S5 : S0;\n            S5: next_state = (in) ? S6 : S0;\n            S6: next_state = (in) ? S7 : S0;\n            S7: next_state = (in) ? S7 : S0;\n            default: next_state = S0;\n        endcase\n    end\n\n    always @(posedge clk) begin\n        disc <= next_disc;\n        flag <= next_flag;\n        err <= next_err;\n    end\n\nendmodule"}
{"task_id": "review2015_fancytimer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "module top_module(\n    input wire clk,\n    input wire reset,\n    input wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack\n);\n\n    reg [3:0] state, next_state;\n    reg [3:0] delay, timer;\n    reg [3:0] shift_reg;\n\n    parameter SEARCH = 4'b0000,\n               START = 4'b0001,\n               LOAD_DELAY = 4'b0010,\n               COUNT = 4'b0011,\n               WAIT_ACK = 4'b0100;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= SEARCH;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        next_state = state;\n        counting = 1'b0;\n        done = 1'b0;\n        case (state)\n            SEARCH: begin\n                if (shift_reg == 4'b1101)\n                    next_state = START;\n            end\n            START: begin\n                shift_reg <= {shift_reg[2:0], data};\n                if (shift_reg == 4'b1101)\n                    next_state = LOAD_DELAY;\n            end\n            LOAD_DELAY: begin\n                delay <= {shift_reg[2:0], data};\n                next_state = COUNT;\n            end\n            COUNT: begin\n                counting = 1'b1;\n                if (timer == 0) begin\n                    timer <= delay;\n                    next_state = WAIT_ACK;\n                end\n                else if (timer == 1)\n                    timer <= delay;\n                else\n                    timer <= timer - 1;\n            end\n            WAIT_ACK: begin\n                done = 1'b1;\n                if (ack)\n                    next_state = SEARCH;\n            end\n        endcase\n    end\n\n    always @(*) begin\n        case (state)\n            COUNT: count = timer;\n            default: count = 4'bxxxx;\n        endcase\n    end\n\nendmodule"}
{"task_id": "ece241_2013_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input [3:1] s,\n    output reg fr3,\n    output reg fr2,\n    output reg fr1,\n    output reg dfr\n);\n    // Define states based on sensor levels\n    localparam LOW = 3'b000, SLOW = 3'b001, MEDIUM = 3'b011, HIGH = 3'b111;\n    reg [2:0] state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case(state)\n            LOW: next_state = (s == 3'b000) ? LOW : SLOW;\n            SLOW: next_state = (s == 3'b001) ? SLOW : (s == 3'b011) ? MEDIUM : HIGH;\n            MEDIUM: next_state = (s == 3'b010) ? SLOW : (s == 3'b111) ? HIGH : LOW;\n            HIGH: next_state = (s == 3'b111) ? HIGH : LOW;\n            default: next_state = LOW;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        fr3 = (state == LOW) ? 1'b1 : 1'b0;\n        fr2 = (state == LOW || state == SLOW) ? 1'b1 : 1'b0;\n        fr1 = (state == LOW || state == SLOW || state == MEDIUM) ? 1'b1 : 1'b0;\n        dfr = (state == LOW) ? 1'b0 : 1'b1;\n    end\n\n    // State register\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= LOW;\n        else\n            state <= next_state;\n    end\nendmodule"}
{"task_id": "fsm_serial", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output done\n);\n    localparam [2:0] IDLE = 3'd0,\n                     START = 3'd1,\n                     DATA = 3'd2,\n                     STOP = 3'd3;\n\n    reg [2:0] state, next_state;\n    reg [7:0] data;\n    reg data_valid;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            IDLE: next_state = in ? IDLE : START;\n            START: next_state = in ? STOP : START;\n            DATA: next_state = in ? DATA : DATA;\n            STOP: next_state = in ? IDLE : STOP;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    always @(posedge clk) begin\n        if (reset) begin\n            data <= 8'b0;\n            data_valid <= 0;\n        end else begin\n            case (state)\n                START: data <= in;\n                DATA: data <= {in, data[7:1]};\n                default: data <= data;\n            endcase\n            data_valid <= (state == STOP);\n        end\n    end\n\n    assign done = data_valid;\n\nendmodule"}
{"task_id": "fsm_serialdata", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output reg [7:0] out_byte,\n    output reg done\n);\n    \n    localparam [2:0] IDLE = 3'd0,\n                     START = 3'd1,\n                     DATA = 3'd2,\n                     STOP = 3'd3;\n    \n    reg [2:0] state, next_state;\n    reg [7:0] data;\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n    \n    always @(*) begin\n        case (state)\n            IDLE: begin\n                next_state = in ? IDLE : START;\n                done = 1'b0;\n                data = 8'b0;\n            end\n            START: begin\n                next_state = in ? DATA : START;\n                done = 1'b0;\n            end\n            DATA: begin\n                next_state = in ? DATA : STOP;\n                data = {data[6:0], in};\n                done = 1'b0;\n            end\n            STOP: begin\n                next_state = in ? STOP : IDLE;\n                done = 1'b1;\n                out_byte = data;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n    \nendmodule"}
{"task_id": "gshare", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "module top_module(\n    input clk,\n    input areset, \n\n    input predict_valid,\n    input [6:0] predict_pc,\n    output predict_taken, \n    output [6:0] predict_history,\n\n    input train_valid,\n    input train_taken,\n    input train_mispredicted,\n    input [6:0] train_history, \n    input [6:0] train_pc\n);\n    // Define a 7-bit global history register\n    reg [6:0] global_history;\n    reg [6:0] next_global_history;\n\n    // 128-entry pattern history table (PHT)\n    reg [1:0] pht [0:127];\n\n    // Initialize global history and PHT\n    initial begin\n        global_history = 7'b0;\n        for (integer i = 0; i < 128; i = i + 1)\n            pht[i] = 2'b00;\n    end\n\n    // Update global history register during prediction\n    always @(posedge clk) begin\n        if (predict_valid)\n            global_history <= next_global_history;\n    end\n\n    // Update global history based on predicted branch\n    always @(*) begin\n        next_global_history = global_history;\n        if (predict_valid) begin\n            if (predict_taken)\n                next_global_history[6] = 1'b1;\n            else\n                next_global_history[6] = 1'b0;\n        end\n    end\n\n    // Update PHT based on training inputs\n    always @(posedge clk) begin\n        if (train_valid) begin\n            if (train_mispredicted) begin\n                global_history <= train_history;\n            end else begin\n                integer index = (train_pc ^ train_history);\n                integer counter = pht[index];\n                if (train_taken)\n                    pht[index] <= counter + 2'b01;\n                else\n                    pht[index] <= counter - 2'b01;\n            end\n        end\n    end\n\n    // Prediction logic\n    always @(*) begin\n        integer index = (predict_pc ^ global_history);\n        predict_taken = pht[index][1];\n        predict_history = global_history;\n    end\n\n    // Asynchronous reset\n    always @(posedge areset) begin\n        global_history <= 7'b0;\n        for (integer i = 0; i < 128; i = i + 1)\n            pht[i] <= 2'b00;\n    end\nendmodule"}
{"task_id": "lemmings4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n    localparam [3:0] WALK_LEFT = 4'd1, WALK_RIGHT = 4'd2, FALL = 4'd3, DIG = 4'd4, SPLATTER = 4'd5;\n    reg [3:0] state, next_state;\n    reg [4:0] fall_count;\n    reg [4:0] dig_count;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        next_state = state;\n        fall_count = 4'd0;\n        dig_count = 4'd0;\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n\n        case (state)\n            WALK_LEFT: begin\n                if (bump_left)\n                    next_state = WALK_RIGHT;\n                else if (bump_right)\n                    next_state = WALK_LEFT;\n                else if (ground)\n                    walk_left = 1'b1;\n                else\n                    next_state = FALL;\n            end\n            WALK_RIGHT: begin\n                if (bump_right)\n                    next_state = WALK_LEFT;\n                else if (bump_left)\n                    next_state = WALK_RIGHT;\n                else if (ground)\n                    walk_right = 1'b1;\n                else\n                    next_state = FALL;\n            end\n            FALL: begin\n                if (ground) begin\n                    if (digging)\n                        next_state = DIG;\n                    else\n                        next_state = WALK_LEFT;\n                end\n                else begin\n                    fall_count <= fall_count + 1;\n                    if (fall_count > 20)\n                        next_state = SPLATTER;\n                    else\n                        aaah = 1'b1;\n                end\n            end\n            DIG: begin\n                if (ground) begin\n                    if (dig_count < 4'd10)\n                        dig_count <= dig_count + 1;\n                    else\n                        next_state = WALK_LEFT;\n                end\n                else\n                    digging = 1'b1;\n            end\n            SPLATTER: begin\n                walk_left = 1'b0;\n                walk_right = 1'b0;\n                aaah = 1'b0;\n                digging = 1'b0;\n            end\n        endcase\n    end\nendmodule"}
{"task_id": "review2015_fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack\n);\n\n    // State encoding\n    localparam IDLE = 3'b000,\n               SEARCH = 3'b001,\n               START = 3'b010,\n               COUNT = 3'b011,\n               DONE = 3'b100;\n\n    reg [2:0] state, next_state;\n    reg [3:0] pattern;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        next_state = state;\n        case (state)\n            IDLE: begin\n                if (data == 1'b1)\n                    next_state = SEARCH;\n            end\n            SEARCH: begin\n                if (pattern == 4'b1101) begin\n                    next_state = START;\n                    pattern = 4'b0000;\n                end else if (data == 1'b1)\n                    pattern = {pattern[2:0], 1'b1};\n                else\n                    pattern = 4'b0000;\n            end\n            START: begin\n                shift_ena = 1'b1;\n                next_state = COUNT;\n            end\n            COUNT: begin\n                counting = 1'b1;\n                if (done_counting)\n                    next_state = DONE;\n            end\n            DONE: begin\n                done = 1'b1;\n                if (ack)\n                    next_state = IDLE;\n            end\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            shift_ena <= 1'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n        end else begin\n            case (next_state)\n                START: shift_ena <= 1'b1;\n                default: shift_ena <= 1'b0;\n            endcase\n\n            counting <= (next_state == COUNT);\n\n            case (next_state)\n                DONE: done <= 1'b1;\n                default: done <= 1'b0;\n            endcase\n        end\n    end\n\nendmodule"}
{"task_id": "conwaylife", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [255:0] data,\n    output reg [255:0] q);\n\nreg [255:0] next_state;\n\nalways @(posedge clk) begin\n    if (load)\n        q <= data;\n    else\n        q <= next_state;\nend\n\nalways @(*) begin\n    // Initialize next_state to current state\n    next_state = q;\n\n    // Calculate next state\n    for (int i = 0; i < 256; i++) begin\n        int neighbours = 0;\n        // Check all 8 neighbours\n        neighbours += q[get_index(i, 1, 1)];\n        neighbours += q[get_index(i, -1, 1)];\n        neighbours += q[get_index(i, 1, -1)];\n        neighbours += q[get_index(i, -1, -1)];\n        neighbours += q[get_index(i, 0, 1)];\n        neighbours += q[get_index(i, 0, -1)];\n        neighbours += q[get_index(i, 1, 0)];\n        neighbours += q[get_index(i, -1, 0)];\n\n        if (neighbours == 3 || (q[i] == 1 && neighbours == 2))\n            next_state[i] = 1;\n        else\n            next_state[i] = 0;\n    end\nend\n\nfunction integer get_index;\n    input integer i, dx, dy;\n    begin\n        integer row, col;\n        row = i / 16;\n        col = i % 16;\n        row = (row + dy + 16) % 16;\n        col = (col + dx + 16) % 16;\n        get_index = row * 16 + col;\n    end\nendfunction\n\nendmodule"}
{"task_id": "lemmings3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n    // States\n    localparam [2:0] WALK_LEFT = 3'b001,\n                     WALK_RIGHT = 3'b010,\n                     FALL = 3'b100,\n                     DIG = 3'b101;\n\n    reg [2:0] state, next_state;\n\n    // State register flip-flop\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            WALK_LEFT:\n                next_state = (bump_left) ? WALK_RIGHT : (ground ? WALK_LEFT : FALL);\n            WALK_RIGHT:\n                next_state = (bump_right) ? WALK_LEFT : (ground ? WALK_RIGHT : FALL);\n            FALL:\n                next_state = (ground) ? (state[2:1]) : FALL;\n            DIG:\n                next_state = (ground) ? (state[2:1]) : FALL;\n            default:\n                next_state = WALK_LEFT;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        walk_left = (state == WALK_LEFT);\n        walk_right = (state == WALK_RIGHT);\n        aaah = (state == FALL);\n        digging = (state == DIG);\n    end\n\n    // Digging behavior\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else if (dig && state[2:1] == WALK_LEFT && ground)\n            state <= DIG;\n        else if (dig && state[2:1] == WALK_RIGHT && ground)\n            state <= DIG;\n    end\n\nendmodule"}
{"task_id": "count_clock", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input ena,\n    output reg pm,\n    output reg [7:0] hh,\n    output reg [7:0] mm,\n    output reg [7:0] ss);\n\n    // Seconds counter\n    always @(posedge clk) begin\n        if (reset)\n            ss <= 8'd0;\n        else if (ena)\n            ss <= (ss == 8'd59) ? 8'd0 : ss + 1'b1;\n    end\n\n    // Minutes counter\n    always @(posedge clk) begin\n        if (reset)\n            mm <= 8'd0;\n        else if (ena && ss == 8'd59)\n            mm <= (mm == 8'd59) ? 8'd0 : mm + 1'b1;\n    end\n\n    // Hours counter\n    always @(posedge clk) begin\n        if (reset)\n            hh <= 8'd12;\n        else if (ena && mm == 8'd59 && ss == 8'd59)\n            hh <= (hh == 8'd12) ? 8'd1 : hh + 1'b1;\n    end\n\n    // AM/PM indicator\n    always @(posedge clk) begin\n        if (reset)\n            pm <= 1'b0;\n        else if (ena && mm == 8'd59 && ss == 8'd59)\n            pm <= (hh == 8'd12) ? ~pm : pm;\n    end\n\nendmodule"}
{"task_id": "lemmings2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    output walk_left,\n    output walk_right,\n    output aaah\n);\n    // States\n    localparam [2:0] WALK_LEFT = 3'b001, WALK_RIGHT = 3'b010, FALL = 3'b100;\n    reg [2:0] state, next_state;\n    reg falling;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            WALK_LEFT: begin\n                if (bump_left) next_state = WALK_RIGHT;\n                else if (bump_right) next_state = WALK_LEFT;\n                else next_state = state;\n            end\n            WALK_RIGHT: begin\n                if (bump_right) next_state = WALK_LEFT;\n                else if (bump_left) next_state = WALK_RIGHT;\n                else next_state = state;\n            end\n            FALL: begin\n                if (ground) next_state = (state == WALK_LEFT) ? WALK_LEFT : WALK_RIGHT;\n                else next_state = FALL;\n            end\n            default: next_state = WALK_LEFT;\n        endcase\n    end\n\n    always @(*) begin\n        case (state)\n            WALK_LEFT: begin\n                walk_left = 1'b1;\n                walk_right = 1'b0;\n                aaah = 1'b0;\n            end\n            WALK_RIGHT: begin\n                walk_left = 1'b0;\n                walk_right = 1'b1;\n                aaah = 1'b0;\n            end\n            FALL: begin\n                walk_left = 1'b0;\n                walk_right = 1'b0;\n                aaah = 1'b1;\n            end\n            default: begin\n                walk_left = 1'b1;\n                walk_right = 1'b0;\n                aaah = 1'b0;\n            end\n        endcase\n    end\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            falling <= 1'b0;\n        else if (~ground)\n            falling <= 1'b1;\n        else if (falling && ground)\n            falling <= 1'b0;\n    end\n\n    always @(*) begin\n        case (state)\n            FALL: begin\n                walk_left = 1'b0;\n                walk_right = 1'b0;\n                aaah = 1'b1;\n            end\n            default: begin\n                walk_left = (state == WALK_LEFT);\n                walk_right = (state == WALK_RIGHT);\n                aaah = falling;\n            end\n        endcase\n    end\nendmodule"}
{"task_id": "countbcd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output [3:1] ena,\n    output reg [15:0] q);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 16'b0000000000000000; // Reset counter to 0\n        else begin\n            if (q[3:0] == 4'b1001) begin // Check if ones digit needs to be reset\n                q[3:0] <= 4'b0000; // Reset ones digit\n                if (q[7:4] == 4'b1001) begin // Check if tens digit needs to be reset\n                    q[7:4] <= 4'b0000; // Reset tens digit\n                    if (q[11:8] == 4'b1001) begin // Check if hundreds digit needs to be reset\n                        q[11:8] <= 4'b0000; // Reset hundreds digit\n                        if (q[15:12] == 4'b1001) begin // Check if thousands digit needs to be reset\n                            q[15:12] <= 4'b0000; // Reset thousands digit\n                        end else begin\n                            q[15:12] <= q[15:12] + 4'b0001; // Increment thousands digit\n                        end\n                    end else begin\n                        q[11:8] <= q[11:8] + 4'b0001; // Increment hundreds digit\n                    end\n                end else begin\n                    q[7:4] <= q[7:4] + 4'b0001; // Increment tens digit\n                end\n            end else begin\n                q[3:0] <= q[3:0] + 4'b0001; // Increment ones digit\n            end\n        end\n    end\n    \n    assign ena = {q[15:12] == 4'b1001, q[11:8] == 4'b1001, q[7:4] == 4'b1001}; // Generate enable signals\nendmodule"}
{"task_id": "mux2to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] a,\n    input [99:0] b,\n    input sel,\n    output [99:0] out\n);\n    assign out = sel ? b : a;\nendmodule"}
{"task_id": "m2014_q6b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "module top_module(\n    input [3:1] y,\n    input w,\n    output reg Y2);\n\nalways @(*) begin\n    case(y)\n        3'b000: Y2 = 0; // State A\n        3'b001: Y2 = w; // State B\n        3'b010: Y2 = w; // State C\n        3'b011: Y2 = 1; // State D\n        3'b100: Y2 = 1; // State E\n        3'b101: Y2 = w; // State F\n        default: Y2 = 0; // Default case\n    endcase\nend\n\nendmodule"}
{"task_id": "ringer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "module top_module(\n    input ring, \n    input vibrate_mode,\n    output ringer,\n    output motor\n);\n    assign ringer = ~vibrate_mode & ring;\n    assign motor = vibrate_mode & ring;\nendmodule"}
{"task_id": "alwaysblock1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an AND gate using both an assign statement and a combinational always block. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out_assign,\n    output reg out_alwaysblock\n);\n    \n    // Using assign statement for AND operation\n    assign out_assign = a & b;\n    \n    // Using always block for AND operation\n    always @(*) begin\n        out_alwaysblock = a & b;\n    end\n    \nendmodule"}
{"task_id": "zero", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that always outputs a LOW.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput zero);\n", "completion": "module top_module(\n    output zero);\n    assign zero = 1'b0; // Always output LOW\nendmodule"}
{"task_id": "circuit7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg q\n);\n\nalways @(posedge clk) begin\n    if (a)\n        q <= ~q;\n    else\n        q <= 1'b1;\nend\n\nendmodule"}
{"task_id": "ece241_2014_q5a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n    \n    localparam S_IDLE = 2'b00;\n    localparam S_INVERSE = 2'b01;\n    localparam S_CARRY = 2'b10;\n    \n    reg [1:0] state, next_state;\n    reg inverse;\n    \n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= S_IDLE;\n        else\n            state <= next_state;\n    end\n    \n    always @(*) begin\n        case (state)\n            S_IDLE: if (x) next_state = S_INVERSE; else next_state = S_IDLE;\n            S_INVERSE: if (x) next_state = S_INVERSE; else next_state = S_CARRY;\n            S_CARRY: next_state = S_CARRY;\n            default: next_state = S_IDLE;\n        endcase\n    end\n    \n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            inverse <= 1'b0;\n        else if (state == S_INVERSE)\n            inverse <= ~inverse;\n    end\n    \n    assign z = (state == S_IDLE) ? 1'b0 : inverse;\n    \nendmodule"}
{"task_id": "fsm3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n    localparam [1:0] A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n    reg [1:0] state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            A: next_state = (in) ? B : A;\n            B: next_state = (in) ? B : C;\n            C: next_state = (in) ? D : A;\n            D: next_state = (in) ? B : C;\n            default: next_state = A;\n        endcase\n    end\n\n    assign out = (state == D);\n\nendmodule"}
{"task_id": "vector2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that reverses the byte order of a 32-bit vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [31:0] in,\n    output [31:0] out\n);\n    assign out = {in[7:0], in[15:8], in[23:16], in[31:24]};\nendmodule"}
{"task_id": "m2014_q4c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a simple D flip flop with active high synchronous reset (reset output to 0).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input r,\n    output logic q\n);\n\nalways @(posedge clk or posedge r) begin\n    if (r)\n        q <= 1'b0; // Reset output to 0\n    else\n        q <= d; // Update output with input d\nend\n\nendmodule"}
{"task_id": "mt2015_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the boolean function z = (x^y) & x.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n    \n    assign z = (x ^ y) & x;\n\nendmodule"}
{"task_id": "shift18", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input ena,\n    input [1:0] amount,\n    input [63:0] data,\n    output reg [63:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else if (ena) begin\n            case (amount)\n                2'b00: q <= {q[62:0], 1'b0}; // shift left by 1\n                2'b01: q <= {q[55:0], 8'b0}; // shift left by 8\n                2'b10: q <= {q[63], q[63:1]}; // arithmetic shift right by 1\n                2'b11: q <= {q[63], q[55:0], 7'b0}; // arithmetic shift right by 8\n                default: q <= q; // maintain state\n            endcase\n        end\n    end\n\nendmodule"}
{"task_id": "ece241_2013_q8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input aresetn,\n    input x,\n    output reg z\n);\n    localparam [1:0] S0 = 2'b00, S1 = 2'b01, S2 = 2'b10;\n    reg [1:0] current_state, next_state;\n\n    always @(posedge clk or negedge aresetn) begin\n        if (!aresetn)\n            current_state <= S0;\n        else\n            current_state <= next_state;\n    end\n\n    always @(*) begin\n        case (current_state)\n            S0: next_state = (x) ? S1 : S0;\n            S1: next_state = (x) ? S2 : S0;\n            S2: next_state = (x) ? S1 : S0;\n        endcase\n\n        case (next_state)\n            S2: z = 1;\n            default: z = 0;\n        endcase\n    end\n\nendmodule"}
{"task_id": "m2014_q6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n\n    localparam [2:0] A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n    reg [2:0] state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            A: next_state = w ? A : B;\n            B: next_state = w ? D : C;\n            C: next_state = w ? D : E;\n            D: next_state = w ? A : F;\n            E: next_state = w ? D : E;\n            F: next_state = w ? D : C;\n            default: next_state = A;\n        endcase\n    end\n\n    assign z = (state == E || state == F);\n\nendmodule"}
{"task_id": "fsm_ps2data", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output [23:0] out_bytes,\n    output done\n);\n\nreg [2:0] state, next_state;\nreg [23:0] message;\nreg [2:0] byte_count;\n\nparameter [2:0] IDLE = 3'b000;\nparameter [2:0] BYTE1 = 3'b001;\nparameter [2:0] BYTE2 = 3'b010;\nparameter [2:0] BYTE3 = 3'b011;\nparameter [2:0] DONE = 3'b100;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= IDLE;\n        message <= 24'b0;\n        byte_count <= 3'b000;\n        done <= 1'b0;\n    end else begin\n        state <= next_state;\n        case (state)\n            IDLE: begin\n                if (in[3]) begin\n                    next_state = BYTE1;\n                    byte_count = 3'b001;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            BYTE1: begin\n                message[7:0] = in;\n                if (in[3]) begin\n                    next_state = BYTE2;\n                    byte_count = 3'b010;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            BYTE2: begin\n                message[15:8] = in;\n                if (in[3]) begin\n                    next_state = BYTE3;\n                    byte_count = 3'b011;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            BYTE3: begin\n                message[23:16] = in;\n                next_state = DONE;\n                byte_count = 3'b100;\n            end\n            DONE: begin\n                done = 1'b1;\n                if (in[3]) begin\n                    next_state = BYTE1;\n                    message[7:0] = in;\n                    byte_count = 3'b001;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n        endcase\n    end\nend\n\nassign out_bytes = done ? message : 24'b0;\n\nendmodule"}
{"task_id": "2012_q2b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\n\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "module top_module (\n    input [5:0] y,\n    input w,\n    output Y1,\n    output Y3\n);\n    // Y1 output: y[1] is set if the current state is B or D\n    assign Y1 = y[1] | y[3];\n    // Y3 output: y[3] is set if the current state is C or F\n    assign Y3 = y[2] | y[5];\nendmodule"}
{"task_id": "vector0", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "module top_module(\n    input [2:0] vec, \n    output [2:0] outv,\n    output o2,\n    output o1,\n    output o0\n);\n    assign outv = vec; // Assign input vector to output vector\n    assign o2 = vec[2]; // Assign position 2 to o2\n    assign o1 = vec[1]; // Assign position 1 to o1\n    assign o0 = vec[0]; // Assign position 0 to o0\nendmodule"}
{"task_id": "kmap4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n    always @(*) begin\n        case ({d, c, b, a})\n            4'b0000, 4'b0111, 4'b1010, 4'b1101: out = 1'b0;\n            4'b0001, 4'b0110, 4'b1001, 4'b1110: out = 1'b1;\n            default: out = 1'bx;\n        endcase\n    end\nendmodule"}
{"task_id": "vector1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "module top_module (\n    input [15:0] in,\n    output [7:0] out_hi,\n    output [7:0] out_lo\n);\n    assign out_hi = in[15:8];\n    assign out_lo = in[7:0];\nendmodule"}
{"task_id": "norgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = ~(a | b);\nendmodule"}
{"task_id": "alwaysblock2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "module top_module(\n    input clk,\n    input a, \n    input b,\n    output out_assign,\n    output reg out_always_comb,\n    output reg out_always_ff\n);\n\n    // Using assign statement\n    assign out_assign = a ^ b;\n\n    // Combinational always block\n    always @(*) begin\n        out_always_comb = a ^ b;\n    end\n\n    // Clocked always block\n    always @(posedge clk) begin\n        out_always_ff <= a ^ b;\n    end\n\nendmodule"}
{"task_id": "m2014_q6c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "module top_module (\n    input [6:1] y,\n    input w,\n    output Y2,\n    output Y4\n);\n\n    // Y2 logic: Active when state is A, B, or E\n    assign Y2 = y[1] || y[2] || y[5];\n\n    // Y4 logic: Active when state is A, C, or F\n    assign Y4 = y[1] || y[3] || y[4];\n\nendmodule"}
{"task_id": "mux256to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "module top_module (\n    input [255:0] in,\n    input [7:0] sel,\n    output  out\n);\n    assign out = in[sel];\nendmodule"}
{"task_id": "2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input w,\n    input R,\n    input E,\n    input L,\n    output reg Q\n);\n    \n    always @(posedge clk) begin\n        if (L) begin\n            Q <= R;\n        end else if (E) begin\n            Q <= w;\n        end\n    end\n\nendmodule"}
{"task_id": "ece241_2014_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    output z\n);\n\nreg y1, y2, y3;\n\nalways @(posedge clk) begin\n    y1 <= x ^ y1;\n    y2 <= x & ~y2;\n    y3 <= x | ~y3;\nend\n\nassign z = ~(y1 ^ y2 ^ y3);\n\nendmodule"}
{"task_id": "circuit4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n    \n    assign q = a | (b & c & d);\n\nendmodule"}
{"task_id": "rule110", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else\n            q <= {q[510:0], 1'b0} >> 1 ^ {{q[511:0] >> 1} ^ {q[511:0] >> 2}}; // Rule 110 implementation\n    end\nendmodule"}
{"task_id": "fsm3s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n    localparam [1:0] A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n    reg [1:0] current_state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            current_state <= A;\n        else\n            current_state <= next_state;\n    end\n\n    always @(*) begin\n        case (current_state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A;\n        endcase\n    end\n\n    assign out = (current_state == D);\n\nendmodule"}
{"task_id": "circuit5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "module top_module (\n    input [3:0] a, \n    input [3:0] b, \n    input [3:0] c, \n    input [3:0] d,\n    input [3:0] e,\n    output reg [3:0] q\n);\nalways @(*) begin\n    case (c)\n        4'd0: q = b;\n        4'd1: q = e;\n        4'd2: q = a;\n        4'd3: q = d;\n        default: q = 4'hF;\n    endcase\nend\nendmodule"}
{"task_id": "bugs_mux2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFind the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input sel,\n    input [7:0] a,\n    input [8:0] b,\n    output reg [7:0] out\n);\n\n    always @(*) begin\n        if (sel)\n            out = b[7:0];\n        else\n            out = a;\n    end\n\nendmodule"}
{"task_id": "mt2015_muxdff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "module top_module(\n    input clk,\n    input L,\n    input q_in,\n    input r_in,\n    output reg Q);\n\n    always @(posedge clk) begin\n        if (L)\n            Q <= r_in;\n        else\n            Q <= q_in ^ Q;\n    end\n\nendmodule\n\nmodule full_module (\n    input [2:0] r,\n    input L,\n    input clk,\n    output reg [2:0] q\n);\n\n    reg q1, q2, q3;\n    wire r1, r2, r3;\n\n    // Instantiate top_module for each bit\n    top_module top1 (.clk(clk), .L(L), .q_in(1'b0), .r_in(r[0]), .Q(q[0]));\n    top_module top2 (.clk(clk), .L(L), .q_in(q1), .r_in(r[1]), .Q(q[1]));\n    top_module top3 (.clk(clk), .L(L), .q_in(q2), .r_in(r[2]), .Q(q[2]));\n\nendmodule"}
{"task_id": "edgecapture", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input [31:0] in,\n    output reg [31:0] out);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            out <= 32'b0;\n        else begin\n            genvar i;\n            generate\n                for (i = 0; i < 32; i = i + 1) begin : bit_captures\n                    always @(posedge clk) begin\n                        if (in[i] == 1'b1 && out[i] == 1'b0)\n                            out[i] <= 1'b1;\n                        else if (in[i] == 1'b0)\n                            out[i] <= 1'b0;\n                    end\n                end\n            endgenerate\n        end\n    end\n\nendmodule"}
{"task_id": "dff8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    output reg [7:0] q);\n\n    always @(posedge clk) begin\n        q <= d;\n    end\n\nendmodule"}
{"task_id": "ece241_2014_q1c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nAssume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [7:0] b,\n    output [7:0] s,\n    output overflow\n);\n    wire [8:0] sum;\n    assign sum = {1'b0, a} + {1'b0, b};\n    assign s = sum[7:0];\n    assign overflow = sum[8] ^ sum[7];\nendmodule"}
{"task_id": "review2015_fsmonehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n);\n    // State transition logic\n    assign B3_next = &state; // Always go to next state\n    assign S_next = state[9] & ~d; // S -> S or S1\n    assign S1_next = state[9] & d; // S -> S1\n    assign Count_next = state[0] & done_counting; // Count -> Wait\n    assign Wait_next = state[0] & ~done_counting & ~ack; // Wait -> Wait\n    assign done = state[0] & done_counting & ack; // Done output\n    \n    // Output logic\n    assign counting = state[0] & done_counting; // Counting output\n    assign shift_ena = |{state[4:0], state[7], state[8]}; // Shift enable output\n\nendmodule"}
{"task_id": "counter_2bc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 2'b01; // Weakly not-taken (2'b01)\n        else if (train_valid) begin\n            if (train_taken)\n                state <= state + 1; // Increment counter\n            else if (state > 0)\n                state <= state - 1; // Decrement counter\n        end\n        // If not training, keep current state\n    end\nendmodule"}
{"task_id": "always_casez", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output reg [2:0] pos\n);\nalways @(*) begin\n    casez(in)\n        8'b1??????? : pos = 3'd0;\n        8'b?1?????? : pos = 3'd1;\n        8'b??1????? : pos = 3'd2;\n        8'b???1???? : pos = 3'd3;\n        8'b????1??? : pos = 3'd4;\n        8'b?????1?? : pos = 3'd5;\n        8'b??????1? : pos = 3'd6;\n        8'b???????1 : pos = 3'd7;\n        default : pos = 3'd0;\n    endcase\nend\nendmodule"}
{"task_id": "always_nolatches", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "module top_module (\n    input [15:0] scancode,\n    output reg left,\n    output reg down,\n    output reg right,\n    output reg up\n);\n    always @(*) begin\n        left = (scancode == 16'hE06B);\n        down = (scancode == 16'hE072);\n        right = (scancode == 16'hE074);\n        up = (scancode == 16'hE075);\n    end\nendmodule"}
{"task_id": "m2014_q4j", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 4-bit adder with full adders. The output sum should include the overflow bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "module top_module (\n    input [3:0] x,\n    input [4:0] y,\n    output [4:0] sum\n);\n    \n    wire [4:0] add_result;\n    wire overflow;\n    \n    // 4-bit adder using full adders for each bit\n    genvar i;\n    generate\n        for (i = 0; i < 4; i = i + 1) begin : full_adders\n            full_adder fa(.a(x[i]), .b(y[i]), .cin(i == 0 ? 1'b0 : add_result[i-1]), \n                          .sum(add_result[i]), .cout());\n        end\n    endgenerate\n    \n    // Overflow detection: occurs when the carry into the most significant bit is different from the carry out\n    assign overflow = add_result[3] ^ add_result[4];\n    assign sum = {overflow, add_result[3:0]};\n    \nendmodule\n\nmodule full_adder (\n    input a,\n    input b,\n    input cin,\n    output sum,\n    output cout\n);\n    assign sum = a ^ b ^ cin;\n    assign cout = (a & b) | (cin & (a ^ b));\nendmodule"}
{"task_id": "history_shift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            predict_history <= 32'b0;\n        else if (train_mispredicted)\n            predict_history <= {train_history, train_taken};\n        else if (predict_valid)\n            predict_history <= {predict_history[30:0], predict_taken};\n    end\n\nendmodule"}
{"task_id": "wire_decl", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out,\n    output out_n\n);\n\nwire and1, and2;\n\nand (and1, a, b);\nand (and2, c, d);\nor (out, and1, and2);\nnot (out_n, out);\n\nendmodule"}
{"task_id": "dff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a single D flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q);\n\n    always @(posedge clk) begin\n        q <= d;\n    end\n\nendmodule"}
{"task_id": "ece241_2013_q12", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "module top_module (\n    input clk,\n    input enable,\n    input S,\n    input A,\n    input B,\n    input C,\n    output reg Z\n);\n    reg [7:0] shift_reg;\n\n    always @(posedge clk) begin\n        if (enable)\n            shift_reg <= {shift_reg[6:0], S};  // Shift in the new bit\n    end\n\n    always @(*) begin\n        case ({A,B,C})\n            3'b000: Z = shift_reg[0];\n            3'b001: Z = shift_reg[1];\n            3'b010: Z = shift_reg[2];\n            3'b011: Z = shift_reg[3];\n            3'b100: Z = shift_reg[4];\n            3'b101: Z = shift_reg[5];\n            3'b110: Z = shift_reg[6];\n            3'b111: Z = shift_reg[7];\n            default: Z = 1'b0;  // Default case\n        endcase\n    end\nendmodule"}
{"task_id": "thermostat", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "module top_module(\n    input mode,\n    input too_cold, \n    input too_hot,\n    input fan_on,\n    output heater,\n    output aircon,\n    output fan\n);\n    assign heater = mode & too_cold;  // heater on in heating mode when too cold\n    assign aircon = ~mode & too_hot;  // aircon on in cooling mode when too hot\n    assign fan = (heater | aircon) | fan_on;  // fan on if heater or aircon is on, or if fan_on is true\nendmodule"}
{"task_id": "ece241_2013_q2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out_sop,\n    output out_pos\n);\n    // Sum-of-Products (SOP) implementation\n    assign out_sop = a & b & ~c & ~d | ~a & ~b & c & ~d | ~a & b & c & d;\n    // Product-of-Sums (POS) implementation\n    assign out_pos = ~(a | b | c | d) & ~(a | ~b | c | d) & ~(~a | ~b | ~c | ~d) & ~(~a | b | ~c | ~d);\nendmodule"}
{"task_id": "lfsr32", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [31:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 32'h1;\n        else\n            q <= {q[30:0], q[31] ^ q[21] ^ q[1] ^ q[0]};\n    end\n\nendmodule"}
{"task_id": "circuit3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n    assign q = (a & b) | (c & d);\nendmodule"}
{"task_id": "7420", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d, \n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n    // 4-input NAND gate for output p1y\n    assign p1y = ~(p1a & p1b & p1c & p1d);\n    // 4-input NAND gate for output p2y\n    assign p2y = ~(p2a & p2b & p2c & p2d);\nendmodule"}
{"task_id": "popcount255", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input [254:0] in,\n    output reg [7:0] out\n);\n    \n    // Initialize out to 0\n    always @* begin\n        out = 8'b0;\n    end\n\n    // Count the number of 1's in the input vector\n    genvar i;\n    generate\n        for (i = 0; i < 255; i = i + 1) begin : count\n            always @* begin\n                out = out + in[i];\n            end\n        end\n    endgenerate\n\nendmodule"}
{"task_id": "gatesv", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output [2:0] out_both,\n    output [3:1] out_any,\n    output [3:0] out_different\n);\n\n    // out_both: Check if both bits and their left neighbors are 1\n    assign out_both[2] = in[2] & in[3];\n    assign out_both[1] = in[1] & in[2];\n    assign out_both[0] = in[0] & in[1];\n\n    // out_any: Check if either bit or its right neighbor is 1\n    assign out_any[3] = in[3] | in[2];\n    assign out_any[2] = in[2] | in[1];\n    assign out_any[1] = in[1] | in[0];\n\n    // out_different: Check if bit is different from its left neighbor\n    assign out_different[3] = in[3] ^ in[0];\n    assign out_different[2] = in[2] ^ in[3];\n    assign out_different[1] = in[1] ^ in[2];\n    assign out_different[0] = in[0] ^ in[1];\n\nendmodule"}
{"task_id": "circuit6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "module top_module (\n    input [2:0] a, \n    output reg [15:0] q\n);\nalways @(*) begin\n    case(a)\n        3'b000: q = 16'h1232;\n        3'b001: q = 16'hAEE0;\n        3'b010: q = 16'h27D4;\n        3'b011: q = 16'h5A0E;\n        3'b100: q = 16'h2066;\n        3'b101: q = 16'h64CE;\n        3'b110: q = 16'hC526;\n        3'b111: q = 16'h2F19;\n        default: q = 16'h0000;\n    endcase\nend\n\nendmodule"}
{"task_id": "countslow", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input slowena,\n    input reset,\n    output reg [3:0] q\n);\n    always @(posedge clk) begin\n        if (reset)\n            q <= 4'b0000;\n        else if (slowena)\n            q <= (q == 4'b1001) ? 4'b0000 : q + 1'b1;\n    end\nendmodule"}
{"task_id": "m2014_q4f", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    logic not_in2;\n    // Invert in2 to simulate the bubble\n    assign not_in2 = ~in2;\n    // AND gate with in1 and inverted in2\n    assign out = in1 & not_in2;\nendmodule"}
{"task_id": "m2014_q4h", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module assigns the output port to the same value as the input port combinationally.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out);\n    \n    assign out = in;\n    \nendmodule"}
{"task_id": "fsm1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n    // State encoding\n    localparam B = 1'b1;\n    localparam A = 1'b0;\n\n    reg state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case(state)\n            B: next_state = in ? B : A;\n            A: next_state = in ? A : B;\n            default: next_state = B;\n        endcase\n    end\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= B;\n        else\n            state <= next_state;\n    end\n\n    // Output logic\n    assign out = state;\n\nendmodule"}
{"task_id": "dualedge", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q\n);\n    reg q_pos, q_neg;\n\n    always @(posedge clk) begin\n        q_pos <= d;\n    end\n\n    always @(negedge clk) begin\n        q_neg <= d;\n    end\n\n    always @(posedge clk or negedge clk) begin\n        q <= (clk) ? q_pos : q_neg;\n    end\n\nendmodule"}
{"task_id": "xnorgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an XNOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = ~(a ^ b);\nendmodule"}
{"task_id": "mt2015_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nModule A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n\n    wire a1_out, a2_out, b1_out, b2_out, or_out, and_out;\n\n    // Instantiate A modules\n    A a1(.x(x), .y(y), .z(a1_out));\n    A a2(.x(x), .y(y), .z(a2_out));\n\n    // Instantiate B modules\n    B b1(.x(x), .y(y), .z(b1_out));\n    B b2(.x(x), .y(y), .z(b2_out));\n\n    // Connect OR gate\n    or gate_or(a1_out, b1_out, or_out);\n\n    // Connect AND gate\n    and gate_and(a2_out, b2_out, and_out);\n\n    // Connect XOR gate\n    xor gate_xor(or_out, and_out, z);\n\nendmodule\n\n// Module A implementation\nmodule A(\n    input x,\n    input y,\n    output z);\n    assign z = (x ^ y) & x;\nendmodule\n\n// Module B implementation based on simulation waveform\nmodule B(\n    input x,\n    input y,\n    output z);\n    assign z = (x & ~y) | (~x & y);\nendmodule"}
{"task_id": "rotate100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [1:0] ena,\n    input [99:0] data,\n    output reg [99:0] q\n);\n    always @(posedge clk) begin\n        if (load) begin\n            q <= data;\n        end else begin\n            case (ena)\n                2'b01: q <= {q[0], q[99:1]}; // Rotate right\n                2'b10: q <= {q[98:0], q[99]}; // Rotate left\n                default: q <= q; // No rotation\n            endcase\n        end\n    end\nendmodule"}
{"task_id": "review2015_count1k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [9:0] q\n);\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 10'd0;\n        else if (q == 10'd999)\n            q <= 10'd0;\n        else\n            q <= q + 1;\n    end\nendmodule"}
{"task_id": "notgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOT gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = ~in;\nendmodule"}
{"task_id": "fsm_onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "module top_module (\n    input in,\n    input [9:0] state,\n    output [9:0] next_state,\n    output out1,\n    output out2);\n\n    assign next_state = (state[0] & ~in) | (state[1] & in) | (state[2] & ~in) | (state[3] & ~in) | (state[4] & ~in) | (state[5] & ~in) | (state[6] & in) | (state[7] & in) | (state[8] & ~in) | (state[9] & ~in);\n    assign out1 = state[7] | state[8] | state[9];\n    assign out2 = state[9];\n\nendmodule"}
{"task_id": "ece241_2013_q7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    output reg Q\n);\n    \n    always @(posedge clk) begin\n        case ({j, k})\n            2'b00: Q <= Q;   // Keep current state\n            2'b01: Q <= 1'b0; // Reset\n            2'b10: Q <= 1'b1; // Set\n            2'b11: Q <= ~Q;   // Toggle\n        endcase\n    end\n\nendmodule"}
{"task_id": "popcount3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "module top_module (\n    input [2:0] in,\n    output [1:0] out\n);\n    assign out = in[0] + in[1] + in[2];\nendmodule"}
{"task_id": "vector5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    input e,\n    output [24:0] out\n);\n    assign out[24] = ~a ^ a;\n    assign out[23] = ~a ^ b;\n    assign out[22] = ~a ^ c;\n    assign out[21] = ~a ^ d;\n    assign out[20] = ~a ^ e;\n    assign out[19] = ~b ^ a;\n    assign out[18] = ~b ^ b;\n    assign out[17] = ~b ^ c;\n    assign out[16] = ~b ^ d;\n    assign out[15] = ~b ^ e;\n    assign out[14] = ~c ^ a;\n    assign out[13] = ~c ^ b;\n    assign out[12] = ~c ^ c;\n    assign out[11] = ~c ^ d;\n    assign out[10] = ~c ^ e;\n    assign out[ 9] = ~d ^ a;\n    assign out[ 8] = ~d ^ b;\n    assign out[ 7] = ~d ^ c;\n    assign out[ 6] = ~d ^ d;\n    assign out[ 5] = ~d ^ e;\n    assign out[ 4] = ~e ^ a;\n    assign out[ 3] = ~e ^ b;\n    assign out[ 2] = ~e ^ c;\n    assign out[ 1] = ~e ^ d;\n    assign out[ 0] = ~e ^ e;\nendmodule"}
{"task_id": "lemmings1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    output walk_left,\n    output walk_right\n);\n    reg state, next_state;\n    localparam LEFT = 1'b0, RIGHT = 1'b1;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= LEFT;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            LEFT:  next_state = bump_left ? RIGHT : LEFT;\n            RIGHT: next_state = bump_right ? LEFT : RIGHT;\n        endcase\n    end\n\n    assign walk_left  = state;\n    assign walk_right = ~state;\n\nendmodule"}
{"task_id": "circuit1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    output q\n);\n    assign q = a & b;\nendmodule"}
{"task_id": "7458", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d,\n    input p1e,\n    input p1f,\n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n    wire and1, and2, and3, and4;\n\n    assign and1 = p1a & p1b & p1c;\n    assign and2 = p1d & p1e & p1f;\n    assign and3 = p2a & p2b;\n    assign and4 = p2c & p2d;\n    assign p1y = and1 | and2;\n    assign p2y = and3 | and4;\nendmodule"}
{"task_id": "2014_q3c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    input [2:0] y,\n    output reg Y0,\n    output reg z\n);\n\nreg [2:0] next_state;\n\nalways @(posedge clk) begin\n    case(y)\n        3'b000: next_state <= (x == 1'b0) ? 3'b000 : 3'b001;\n        3'b001: next_state <= (x == 1'b0) ? 3'b001 : 3'b100;\n        3'b010: next_state <= (x == 1'b0) ? 3'b010 : 3'b001;\n        3'b011: next_state <= (x == 1'b0) ? 3'b001 : 3'b010;\n        3'b100: next_state <= (x == 1'b0) ? 3'b011 : 3'b100;\n        default: next_state <= 3'b000;\n    endcase\nend\n\nalways @(posedge clk) begin\n    case(y)\n        3'b011, 3'b100: z <= 1'b1;\n        default: z <= 1'b0;\n    endcase\nend\n\nalways @(posedge clk) begin\n    case(next_state)\n        3'b000, 3'b001: Y0 <= 1'b0;\n        default: Y0 <= 1'b1;\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 2-input NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    assign out = ~(in1 | in2);\nendmodule"}
{"task_id": "wire4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    output w,\n    output x,\n    output y,\n    output z\n);\n    assign w = a;\n    assign x = b;\n    assign y = b;\n    assign z = c;\nendmodule"}
{"task_id": "m2014_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input ar,\n    output logic q\n);\n    always @(posedge clk or posedge ar) begin\n        if (ar)\n            q <= 1'b0;\n        else\n            q <= d;\n    end\nendmodule"}
{"task_id": "always_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "module top_module (\n    input [2:0] sel,\n    input [3:0] data0,\n    input [3:0] data1,\n    input [3:0] data2,\n    input [3:0] data3,\n    input [3:0] data4,\n    input [3:0] data5,\n    output reg [3:0] out\n);\n    always @(*) begin\n        case(sel)\n            3'b000: out = data0;\n            3'b001: out = data1;\n            3'b010: out = data2;\n            3'b011: out = data3;\n            3'b100: out = data4;\n            3'b101: out = data5;\n            default: out = 4'b0000;\n        endcase\n    end\nendmodule"}
{"task_id": "timer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "module top_module(\n    input clk, \n    input load, \n    input [9:0] data, \n    output reg tc\n);\n    // Internal counter\n    reg [9:0] counter;\n\n    always @(posedge clk) begin\n        if (load) begin\n            // Load new value into counter\n            counter <= data;\n            tc <= 1'b0; // Reset terminal count\n        end else if (counter != 0) begin\n            // Decrement counter\n            counter <= counter - 1'b1;\n            if (counter == 10'd0) begin\n                // Assert terminal count\n                tc <= 1'b1;\n            end\n        end\n    end\nendmodule"}
{"task_id": "review2015_fsmseq", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg start_shifting);\n\n    enum logic [2:0] {S0, S1, S2, S3, S4} state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= S0;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            S0: next_state = data ? S1 : S0;\n            S1: next_state = data ? S2 : S0;\n            S2: next_state = data ? S4 : S1;\n            S3: next_state = data ? S4 : S1;\n            S4: next_state = S4;\n            default: next_state = S0;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            start_shifting <= 1'b0;\n        else if (state == S4)\n            start_shifting <= 1'b1;\n    end\n\nendmodule"}
{"task_id": "dff8r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 8'b0;\n        else\n            q <= d;\n    end\n\nendmodule"}
{"task_id": "edgedetect2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] anyedge\n);\n\nreg [7:0] in_prev;\n\nalways @(posedge clk) begin\n    in_prev <= in;\n    anyedge <= (in ^ in_prev) & in;\nend\n\nendmodule"}
{"task_id": "count1to10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nMake a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'd1;  // Reset to 1\n        else if (q == 4'd10)\n            q <= 4'd1;  // Wrap around to 1 when reaching 10\n        else\n            q <= q + 1'b1;  // Increment counter\n    end\n\nendmodule"}
{"task_id": "circuit9", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg [2:0] q\n);\n\nalways @(posedge clk) begin\n    if (a)\n        q <= 4'd4;  // Hold q at 4 when a is high\n    else\n        q <= q + 1'b1;  // Increment q by 1 when a is low\nend\n\nendmodule"}
{"task_id": "lfsr5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [4:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 5'b00001; // Reset to 1\n        else\n            q <= {q[3:0], q[4] ^ q[2]}; // Galois LFSR with taps at bit 5 and 3\n    end\n\nendmodule"}
{"task_id": "bugs_addsubz", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "module top_module (\n    input do_sub,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out,\n    output reg result_is_zero\n);\n\n    always @(*) begin\n        case (do_sub)\n            0: out = a + b;\n            1: out = a - b;\n            default: out = 8'b0; // Add default case for completeness\n        endcase\n\n        result_is_zero = (out == 8'b0);\n    end\n\nendmodule"}
{"task_id": "m2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n\n    // Implement the function using a combinational logic block\n    always_comb begin\n        case (x)\n            4'b0000: f = 1'b0; // x[3]x[2]x[1]x[0] = 0000\n            4'b0001: f = 1'b0; // x[3]x[2]x[1]x[0] = 0001\n            4'b0010: f = 1'bx; // Don't care\n            4'b0011: f = 1'bx; // Don't care\n            4'b0100: f = 1'b0; // x[3]x[2]x[1]x[0] = 0100\n            4'b0101: f = 1'bx; // Don't care\n            4'b0110: f = 1'b1; // x[3]x[2]x[1]x[0] = 0110\n            4'b0111: f = 1'b0; // x[3]x[2]x[1]x[0] = 0111\n            4'b1000: f = 1'b1; // x[3]x[2]x[1]x[0] = 1000\n            4'b1001: f = 1'b1; // x[3]x[2]x[1]x[0] = 1001\n            4'b1010: f = 1'b0; // x[3]x[2]x[1]x[0] = 1010\n            4'b1011: f = 1'bx; // Don't care\n            default: f = 1'bx; // Default case (should not be reached)\n        endcase\n    end\n\nendmodule"}
{"task_id": "bugs_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "module top_module (\n    input [7:0] code,\n    output reg [3:0] out,\n    output reg valid\n);\n    always @* begin\n        case(code)\n            8'h45: {out, valid} = 4'd0;\n            8'h16: {out, valid} = 4'd1;\n            8'h1e: {out, valid} = 4'd2;\n            8'h26: {out, valid} = 4'd3;\n            8'h25: {out, valid} = 4'd4;\n            8'h2e: {out, valid} = 4'd5;\n            8'h36: {out, valid} = 4'd6;\n            8'h3d: {out, valid} = 4'd7;\n            8'h3e: {out, valid} = 4'd8;\n            8'h46: {out, valid} = 4'd9;\n            default: {out, valid} = 2'b00;\n        endcase\n    end\nendmodule"}
{"task_id": "vectorr", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven an 8-bit input vector [7:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [7:0] out\n);\n    assign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\nendmodule"}
{"task_id": "kmap3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n    \n    always @(*) begin\n        case({c, b, a})\n            3'b110, 3'b111, 3'b011, 3'b001: out = 1;\n            3'b000, 3'b001, 3'b100: out = 0;\n            default: out = 1; // don't-care condition\n        endcase\n    end\n\nendmodule"}
{"task_id": "review2015_shiftcount", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input shift_ena,\n    input count_ena,\n    input data,\n    output reg [3:0] q);\n    \n    always @(posedge clk) begin\n        if (shift_ena)\n            q <= {data, q[3:1]}; // Shift in data most-significant-bit first\n        else if (count_ena)\n            q <= q - 1'b1; // Decrement the value\n    end\nendmodule"}
{"task_id": "wire", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with one input and one output that behaves like a wire.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = in;\nendmodule"}
{"task_id": "review2015_fsmshift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output shift_ena);\n\nreg [1:0] count;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        count <= 2'b00;\n    else if (count == 2'b11)\n        count <= 2'b00;\n    else\n        count <= count + 1'b1;\nend\n\nassign shift_ena = (count != 2'b00);\n\nendmodule"}
{"task_id": "count15", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'b0000;\n        else\n            q <= q + 1'b1;\n    end\n\nendmodule"}
{"task_id": "always_if", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel_b1,\n    input sel_b2,\n    output out_assign,\n    output reg out_always\n);\n\n    // Using assign statement\n    assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\n    // Using procedural if statement\n    always @(*) begin\n        if (sel_b1 & sel_b2)\n            out_always = b;\n        else\n            out_always = a;\n    end\n\nendmodule"}
{"task_id": "kmap1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    input c,\n    output out\n);\n    wire d;\n\n    // Combinational logic using AND and OR gates\n    and #1 d_and, out_and;\n    or #1 out_or;\n\n    d_and (.i0(b), .i1(c), .o(d));\n    out_and (.i0(d), .i1(a), .o(out_or.i0));\n    out_or (.i1(a), .o(out));\n\nendmodule"}
{"task_id": "2013_q2afsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input [3:1] r,\n    output [3:1] g\n);\n\n    // State encoding: A=0, B=1, C=2, D=3\n    reg [1:0] state, next_state;\n    wire [3:1] grant;\n\n    // State transition logic\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn) begin\n            state <= 2'b00; // Reset to state A\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            2'b00: next_state = (r[1]) ? 2'b01 : (r[2]) ? 2'b10 : (r[3]) ? 2'b11 : 2'b00;\n            2'b01: next_state = (r[1]) ? 2'b01 : 2'b00;\n            2'b10: next_state = (r[2]) ? 2'b10 : 2'b00;\n            2'b11: next_state = 2'b00;\n            default: next_state = 2'b00;\n        endcase\n    end\n\n    // Output logic\n    assign grant = (state == 2'b01) ? 3'b100 :\n                   (state == 2'b10) ? 3'b010 :\n                   (state == 2'b11) ? 3'b001 : 3'b000;\n    assign g = grant;\n\nendmodule"}
{"task_id": "count10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk) begin\n        if (reset) begin\n            q <= 4'd0; // Reset to 0 when reset is high\n        end else begin\n            if (q == 4'd9) begin\n                q <= 4'd0; // Reset to 0 when count reaches 9\n            end else begin\n                q <= q + 1'b1; // Increment counter\n            end\n        end\n    end\n\nendmodule"}
{"task_id": "fsm_ps2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output done\n);\n\nreg [7:0] byte;\nreg [1:0] state;\nreg done_int;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        begin\n        state <= 2'b00;\n        done_int <= 0;\n        byte <= 8'b0;\n        end\n    else begin\n        case (state)\n            2'b00: begin\n                // Search for byte with in[3]=1\n                if (in[3])\n                    state <= 2'b01;\n                else\n                    state <= 2'b00;\n            end\n\n            2'b01: begin\n                // First byte of message\n                byte <= in;\n                state <= 2'b10;\n            end\n\n            2'b10: begin\n                // Second byte of message\n                byte <= in;\n                state <= 2'b11;\n            end\n\n            2'b11: begin\n                // Third byte of message\n                byte <= in;\n                state <= 2'b00;\n                done_int <= 1;\n            end\n\n            default: state <= 2'b00;\n        endcase\n    end\nend\n\nassign done = done_int;\n\nendmodule"}
{"task_id": "mux2to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel,\n    output out\n);\nassign out = sel ? b : a;\nendmodule"}
{"task_id": "gates4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and = &in;  // 4-input AND gate\n    assign out_or = |in;   // 4-input OR gate\n    assign out_xor = ^in;  // 4-input XOR gate\nendmodule"}
{"task_id": "2014_q3bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input x,\n    output reg z\n);\n\nreg [2:0] y;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        y <= 3'b000;\n    else begin\n        case (y)\n            3'b000: y <= x ? 3'b001 : 3'b000;\n            3'b001: y <= x ? 3'b100 : 3'b001;\n            3'b010: y <= x ? 3'b001 : 3'b010;\n            3'b011: y <= x ? 3'b010 : 3'b001;\n            3'b100: y <= x ? 3'b100 : 3'b011;\n            default: y <= 3'b000;\n        endcase\n    end\nend\n\nalways @(*) begin\n    case (y)\n        3'b000, 3'b001, 3'b010: z = 1'b0;\n        3'b011, 3'b100: z = 1'b1;\n        default: z = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "2013_q2bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input x,\n    input y,\n    output f,\n    output g\n);\n    \n    enum logic [2:0] {\n        A, B, C, D, E, F, G, H\n    } state, next_state;\n    \n    // State register with synchronous reset\n    always_ff @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            state <= A;\n        else\n            state <= next_state;\n    end\n    \n    // Next state logic\n    always_comb begin\n        next_state = state;\n        case (state)\n            A: next_state = B;\n            B: next_state = (x) ? C : A;\n            C: next_state = (x) ? D : A;\n            D: next_state = (x) ? E : A;\n            E: next_state = (y) ? G : F;\n            F: next_state = (y) ? G : F;\n            G: next_state = G;\n            H: next_state = (y) ? G : H;\n            default: next_state = A;\n        endcase\n    end\n    \n    // Output logic\n    always_comb begin\n        f = 1'b0;\n        g = 1'b0;\n        case (state)\n            B: f = 1'b1;\n            E: g = 1'b1;\n            G: g = 1'b1;\n            default: ;\n        endcase\n    end\n    \nendmodule"}
{"task_id": "dff8p", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n\n    always @(negedge clk or posedge reset) begin\n        if (reset)\n            q <= 8'h34;  // Reset to 0x34\n        else\n            q <= d;     // Load input d\n    end\n\nendmodule"}
{"task_id": "reduction", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nParity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output parity\n);\n    \n    assign parity = ^in; // XOR all bits to compute even parity\n\nendmodule"}
{"task_id": "fsm3comb", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [1:0] state,\n    output reg [1:0] next_state,\n    output out\n);\n\n    always @(*) begin\n        case(state)\n            2'b00: begin next_state = in ? 2'b01 : 2'b00; out = 1'b0; end\n            2'b01: begin next_state = in ? 2'b01 : 2'b10; out = 1'b0; end\n            2'b10: begin next_state = in ? 2'b11 : 2'b00; out = 1'b0; end\n            2'b11: begin next_state = in ? 2'b10 : 2'b01; out = 1'b1; end\n            default: begin next_state = 2'b00; out = 1'b0; end\n        endcase\n    end\n\nendmodule"}
{"task_id": "mt2015_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z\n);\n    reg z_reg;\n\n    always @(x or y) begin\n        if (x == 1'b1 && y == 1'b1)\n            z_reg <= 1'b1;\n        else if (x == 1'b1)\n            z_reg <= 1'b0;\n        else if (y == 1'b1)\n            z_reg <= 1'b0;\n        else\n            z_reg <= 1'b1;\n    end\n\n    assign z = z_reg;\n\nendmodule"}
{"task_id": "2012_q2fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n\nlocalparam [2:0] A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\nreg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= A;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        A: next_state = w ? B : A;\n        B: next_state = w ? C : D;\n        C: next_state = w ? E : D;\n        D: next_state = w ? F : A;\n        E: next_state = w ? E : D;\n        F: next_state = w ? C : D;\n        default: next_state = A;\n    endcase\nend\n\nassign z = (state == E);\n\nendmodule"}
{"task_id": "dff16e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input resetn,\n    input [1:0] byteena,\n    input [15:0] d,\n    output reg [15:0] q);\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            q <= 16'b0;\n        else begin\n            if (byteena[0])\n                q[7:0] <= d[7:0];\n            if (byteena[1])\n                q[15:8] <= d[15:8];\n        end\n    end\n\nendmodule"}
{"task_id": "edgedetect", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] pedge);\n    \n    always @(posedge clk) begin\n        pege <= {pege[6:0], in[7]}; // Shift previous states\n        pege[7] <= (in[7] && !pege[7]); // Detect rising edge for bit 7\n    end\nendmodule"}
{"task_id": "circuit8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "module top_module (\n    input clock,\n    input a, \n    output reg p,\n    output reg q\n);\n\nalways @(posedge clock) begin\n    if (a)\n        p <= ~p;\n    q <= p;\nend\n\nendmodule"}
{"task_id": "rule90", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else\n            q <= {q[510:0], 1'b0} ^ {1'b0, q} ^ {q, 1'b0};\n    end\n\nendmodule"}
{"task_id": "mt2015_eq2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "module top_module(\n    input [1:0] A,\n    input [1:0] B,\n    output z);\n    \n    assign z = (A == B);\n    \nendmodule"}
{"task_id": "gatesv100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output [98:0] out_both,\n    output [99:1] out_any,\n    output [99:0] out_different\n);\n    // out_both: Check if both current and previous bits are '1'\n    assign out_both = in[98:0] & in[99:1];\n    // out_any: Check if either current or next bit is '1'\n    assign out_any = in[99:1] | in[98:0];\n    // out_different: Check if current bit is different from previous bit\n    assign out_different = in[99:0] ^ in[89:0];\nendmodule"}
{"task_id": "m2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D latch using an always block.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input d,\n    input ena,\n    output logic q\n);\nalways @(posedge ena) begin\n    q <= d;\nend\nendmodule"}
{"task_id": "mux256to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "module top_module (\n    input [1023:0] in,\n    input [7:0] sel,\n    output [3:0] out\n);\n    wire [3:0] selected_out;\n\n    assign selected_out = in[(sel+1)*4-1 : sel*4];  // Select 4 bits from input based on sel\n    assign out = selected_out;  // Assign selected bits to output\n\nendmodule"}
{"task_id": "mux9to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "module top_module (\n    input [15:0] a,\n    input [15:0] b,\n    input [15:0] c,\n    input [15:0] d,\n    input [15:0] e,\n    input [15:0] f,\n    input [15:0] g,\n    input [15:0] h,\n    input [15:0] i,\n    input [3:0] sel,\n    output logic [15:0] out\n);\n    always @* begin\n        case (sel)\n            4'd0: out = a;\n            4'd1: out = b;\n            4'd2: out = c;\n            4'd3: out = d;\n            4'd4: out = e;\n            4'd5: out = f;\n            4'd6: out = g;\n            4'd7: out = h;\n            4'd8: out = i;\n            default: out = 16'hFFFF;\n        endcase\n    end\nendmodule"}
{"task_id": "vectorgates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "module top_module(\n    input [2:0] a, \n    input [2:0] b, \n    output [2:0] out_or_bitwise,\n    output out_or_logical,\n    output [5:0] out_not\n);\n    // Bitwise OR operation\n    assign out_or_bitwise = a | b;\n    // Logical OR operation\n    assign out_or_logical = a | b;\n    // Invert b and place in upper half of out_not\n    assign out_not[5:3] = ~b;\n    // Invert a and place in lower half of out_not\n    assign out_not[2:0] = ~a;\nendmodule"}
{"task_id": "fsm3onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [3:0] state,\n    output reg [3:0] next_state,\n    output out\n);\n    always @(*) begin\n        case(state)\n            4'b0001: next_state = in ? 4'b0001 : 4'b0010; // A\n            4'b0010: next_state = in ? 4'b0010 : 4'b0100; // B\n            4'b0100: next_state = in ? 4'b1000 : 4'b0001; // C\n            4'b1000: next_state = in ? 4'b0100 : 4'b0010; // D\n            default: next_state = 4'b0001; // Default to state A\n        endcase\n    end\n\n    always @(*) begin\n        case(state)\n            4'b1000: out = 1'b1; // D state output is 1\n            default: out = 1'b0; // All other states output is 0\n        endcase\n    end\nendmodule"}
{"task_id": "conditional", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [7:0] b,\n    input [7:0] c,\n    input [7:0] d,\n    output reg [7:0] min\n);\n    always @(*) begin\n        min = (a < b) ? a : b;\n        min = (c < min) ? c : min;\n        min = (d < min) ? d : min;\n    end\nendmodule"}
{"task_id": "gates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output out_and,\n    output out_or,\n    output out_xor,\n    output out_nand,\n    output out_nor,\n    output out_xnor,\n    output out_anotb\n);\n    assign out_and = a & b;           // (1) And gate\n    assign out_or = a | b;            // (2) Or gate\n    assign out_xor = a ^ b;           // (3) Xor gate\n    assign out_nand = ~(a & b);       // (4) Nand gate\n    assign out_nor = ~(a | b);        // (5) Nor gate\n    assign out_xnor = ~(a ^ b);       // (6) Xnor gate\n    assign out_anotb = a & ~b;        // (7) And-Not gate\nendmodule"}
{"task_id": "kmap2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output out\n);\n\nassign out = (a & ~b & ~c & d) | (a & ~b & c & ~d) | (~a & ~b & c & d) | (~a & b & d);\n\nendmodule"}
{"task_id": "2014_q3fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input s,\n    input w,\n    output reg z\n);\n    \n    reg [1:0] state, next_state;\n    \n    // State encoding\n    localparam A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n    \n    // State registers\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n    \n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = s ? B : A;\n            B: next_state = (w) ? C : D;\n            C: next_state = (w) ? D : C;\n            D: next_state = (w) ? B : C;\n            default: next_state = A;\n        endcase\n    end\n    \n    // Output logic\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            z <= 1'b0;\n        else if (state == B)\n            z <= 1'b0;\n        else if (state == D)\n            z <= 1'b1;\n        else\n            z <= z;\n    end\n    \nendmodule"}
{"task_id": "vector4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nOne common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [31:0] out\n);\n    assign out = {{24{in[7]}}, in};\nendmodule"}
{"task_id": "m2014_q4k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a shift register with four D flops. Reset is active-low synchronous resettable.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input in,\n    output out\n);\n    \n    reg [3:0] shift_reg;\n    \n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            shift_reg <= 4'b0000;\n        else\n            shift_reg <= {shift_reg[2:0], in};\n    end\n    \n    assign out = shift_reg[3];\n    \nendmodule"}
{"task_id": "always_case2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output reg [1:0] pos\n);\nalways @(*) begin\n    case(in)\n        4'b0001: pos = 2'b00; \n        4'b0010: pos = 2'b01; \n        4'b0100: pos = 2'b10; \n        4'b1000: pos = 2'b11; \n        default: pos = 2'b00; \n    endcase\nend\nendmodule"}
{"task_id": "fsm2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input areset,\n    output out\n);\n\nreg [1:0] state, next_state;\n\n// State encoding\nlocalparam OFF = 2'b00;\nlocalparam ON  = 2'b01;\n\n// State transition logic\nalways @(posedge clk or posedge areset) begin\n    if (areset)\n        state <= OFF;\n    else\n        state <= next_state;\nend\n\n// Next state logic\nalways @(*) begin\n    case (state)\n        OFF: next_state = (j) ? ON : OFF;\n        ON:  next_state = (k) ? OFF : ON;\n        default: next_state = OFF;\n    endcase\nend\n\n// Output logic\nassign out = (state == ON);\n\nendmodule"}
{"task_id": "m2014_q4i", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 0 (or logic low).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput out);\n", "completion": "module top_module(\n    output out);\n    assign out = 1'b0;\nendmodule"}
{"task_id": "step_one", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 1 (or logic high).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput one);\n", "completion": "module top_module(\n    output one);\n    assign one = 1'b1; // Output is always logic high\nendmodule"}
{"task_id": "vector100r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven a 100-bit input vector [99:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output reg [99:0] out\n);\n    always @* begin\n        out = {in[0], in[2:1], in[4:3], in[6:5], in[8:7], in[10:9], in[12:11], in[14:13], in[16:15],\n               in[18:17], in[20:19], in[22:21], in[24:23], in[26:25], in[28:27], in[30:29], in[32:31],\n               in[34:33], in[36:35], in[38:37], in[40:39], in[42:41], in[44:43], in[46:45], in[48:47],\n               in[50:49], in[52:51], in[54:53], in[56:55], in[58:57], in[60:59], in[62:61], in[64:63],\n               in[66:65], in[68:67], in[70:69], in[72:71], in[74:73], in[76:75], in[78:77], in[80:79],\n               in[82:81], in[84:83], in[86:85], in[88:87], in[90:89], in[92:91], in[94:93], in[96:95],\n               in[99]};\n    end\nendmodule"}
{"task_id": "m2014_q4d", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    output logic out\n);\n    logic xor_output;\n\n    // XOR operation\n    assign xor_output = in ^ out;\n\n    // D flip-flop\n    always_ff @(posedge clk) begin\n        out <= xor_output;\n    end\nendmodule"}
{"task_id": "shift4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input load,\n    input ena,\n    input [3:0] data,\n    output reg [3:0] q\n);\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            q <= 4'b0000; // Reset to zero\n        end else if (load) begin\n            q <= data; // Load data\n        end else if (ena) begin\n            q <= {q[2:0], 1'b0}; // Shift right\n        end\n    end\nendmodule"}
{"task_id": "truthtable1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "module top_module (\n    input x3,\n    input x2,\n    input x1,\n    output f\n);\n    \n    assign f = (x2 & x1) | (x3 & ~x1);\n\nendmodule"}
{"task_id": "dff8ar", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input areset,\n    output reg [7:0] q);\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            q <= 8'b0;\n        else\n            q <= d;\n    end\n\nendmodule"}
{"task_id": "gates100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and = &in;  // 100-input AND gate\n    assign out_or = |in;   // 100-input OR gate\n    assign out_xor = ^in;  // 100-input XOR gate\nendmodule"}
{"task_id": "hadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output sum,\n    output cout\n);\n    \n    assign sum = a ^ b;  // XOR for sum\n    assign cout = a & b; // AND for carry-out\n\nendmodule"}
{"task_id": "always_if2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "module top_module (\n    input cpu_overheated,\n    output reg shut_off_computer,\n    input arrived,\n    input gas_tank_empty,\n    output reg keep_driving\n);\n\n    always @(*) begin\n        if (cpu_overheated)\n           shut_off_computer = 1;\n        else\n           shut_off_computer = 0;\n    end\n\n    always @(*) begin\n        if (~arrived)\n           keep_driving = ~gas_tank_empty;\n        else\n           keep_driving = 0;\n    end\n\nendmodule"}
{"task_id": "fsm2s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input reset,\n    output out\n);\n    \n    // State encoding\n    localparam OFF = 2'b00;\n    localparam ON = 2'b01;\n    \n    // State register\n    reg [1:0] state, next_state;\n    \n    // Output logic\n    assign out = (state == ON);\n    \n    // State transition logic\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= OFF;\n        else\n            state <= next_state;\n    end\n    \n    // Next state logic\n    always @(*) begin\n        case (state)\n            OFF: next_state = (j) ? ON : OFF;\n            ON: next_state = (k) ? OFF : ON;\n            default: next_state = OFF;\n        endcase\n    end\n    \nendmodule"}
{"task_id": "vector3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "module top_module (\n    input [4:0] a,\n    input [4:0] b,\n    input [4:0] c,\n    input [4:0] d,\n    input [4:0] e,\n    input [4:0] f,\n    output [7:0] w,\n    output [7:0] x,\n    output [7:0] y,\n    output [7:0] z\n);\n    wire [31:0] combined_output;\n\n    // Concatenate inputs and add two 1 bits\n    assign combined_output = {a, b, c, d, e, f, 2'b11};\n\n    // Split combined_output into 4 8-bit outputs\n    assign w = combined_output[31:24];\n    assign x = combined_output[23:16];\n    assign y = combined_output[15:8];\n    assign z = combined_output[7:0];\n\nendmodule"}
{"task_id": "circuit2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n\nassign q = (~a & ~b & ~c & d) | (~a & ~b & c & ~d) | (~a & b & ~c & d) | (~a & b & c & ~d) | (a & b & ~c & ~d) | (a & b & c & d);\n\nendmodule"}
{"task_id": "andgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an AND gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = a & b;\nendmodule"}
{"task_id": "fsm1s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n    reg [1:0] state, next_state;\n    wire out;\n\n    // State encoding: B = 2'b10, A = 2'b01\n    localparam B = 2'b10;\n    localparam A = 2'b01;\n\n    // State transition logic\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= B; // Reset to B\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            B: next_state = in ? B : A;\n            A: next_state = in ? A : B;\n            default: next_state = B; // Default to B\n        endcase\n    end\n\n    // Output logic\n    assign out = (state == B);\n\nendmodule"}
{"task_id": "fadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input cin,\n    output cout,\n    output sum\n);\n    wire carry1, carry2;\n    \n    // First half adder: a + b\n    assign {carry1, sum} = a ^ b ^ cin;\n    // Second half adder: carry1 + cin\n    assign {cout, carry2} = carry1 ^ cin;\n    \n    // Output the final carry-out and sum\n    assign cout = carry2;\n    \nendmodule"}
{"task_id": "m2014_q4g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    input in3,\n    output logic out\n);\n\n    logic xnor_out;\n\n    // XNOR gate\n    assign xnor_out = ~(in1 ^ in2);\n\n    // XOR gate with xnor_out and in3\n    assign out = xnor_out ^ in3;\n\nendmodule"}
{"task_id": "ece241_2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "module top_module (\n    input c,\n    input d,\n    output [3:0] mux_in\n);\n\n    wire a, b, tmp1, tmp2, tmp3, tmp4;\n\n    // Implementing the K-map using 2-to-1 multiplexers\n    mux2to1 mux1(a, c, d, tmp1);\n    mux2to1 mux2(b, c, d, tmp2);\n    mux2to1 mux3(c, tmp1, ~tmp2, tmp3);\n    mux2to1 mux4(d, tmp1, ~tmp2, tmp4);\n    \n    assign mux_in = {tmp4, tmp3, tmp2, tmp1};\n\n    // 2-to-1 multiplexer\n    // mux2to1(a, b, c, out) where out = a if b = 0, out = c if b = 1\n    assign mux1.out = c ? 1'b1 : 1'b0;\n    assign mux2.out = d ? 1'b1 : 1'b0;\n    assign mux3.out = c & ~d ? 1'b1 : 1'b0;\n    assign mux4.out = c & d ? 1'b1 : 1'b0;\n\nendmodule\n\nmodule mux2to1(\n    input a,\n    input b,\n    input c,\n    output out\n);\n    assign out = b ? c : a;\nendmodule"}
{"task_id": "ece241_2014_q5b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n    // State encoding: A = 3'b001, B = 3'b010\n    reg [2:0] state, next_state;\n\n    // State transition logic\n    always @(*) begin\n        case (state)\n            3'b001: next_state = x ? 3'b010 : 3'b001;\n            3'b010: next_state = 3'b010;\n            default: next_state = 3'b001;  // Reset state\n        endcase\n    end\n\n    // Output logic\n    assign z = (state == 3'b010) ? 1'b1 : 1'b0;\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 3'b001;  // Reset to state A\n        else\n            state <= next_state;\n    end\n\nendmodule"}
{"task_id": "circuit10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "module top_module (\n    input clk,\n    input a,\n    input b,\n    output q,\n    output state\n);\n\nreg q_reg, state_reg;\n\nalways @(posedge clk) begin\n    case ({a, b})\n        2'b00: state_reg <= 1'b0;\n        2'b01: state_reg <= 1'b1;\n        2'b10: state_reg <= 1'b0;\n        2'b11: state_reg <= 1'b1;\n    endcase\n\n    if (state_reg == 1'b1) begin\n        q_reg <= ~q_reg;\n    end\nend\n\nassign q = q_reg;\nassign state = state_reg;\n\nendmodule"}
{"task_id": "2012_q1g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n    assign f = (~x[3] & ~x[4]) | (x[3] & ~x[1] & x[2]) | (x[3] & x[1] & ~x[2]);\nendmodule"}
{"task_id": "fsm_hdlc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSynchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input in,\n    output disc,\n    output flag,\n    output err);\n\n    // State encoding\n    localparam S0 = 3'd0, S1 = 3'd1, S2 = 3'd2, S3 = 3'd3, S4 = 3'd4, S5 = 3'd5, S6 = 3'd6, S7 = 3'd7;\n\n    reg [2:0] curr_state, next_state;\n    reg [2:0] bit_count;\n\n    // State registers\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            curr_state <= S0;\n        else\n            curr_state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        next_state = curr_state;\n        case (curr_state)\n            S0: next_state = in ? S1 : S0;\n            S1: next_state = in ? S2 : S0;\n            S2: next_state = in ? S3 : S0;\n            S3: next_state = in ? S4 : S0;\n            S4: next_state = in ? S5 : S0;\n            S5: next_state = in ? S6 : S0;\n            S6: next_state = in ? S0 : S7;\n            S7: next_state = in ? S0 : S7;\n            default: next_state = S0;\n        endcase\n    end\n\n    // Output logic\n    always @(*) begin\n        disc = 1'b0;\n        flag = 1'b0;\n        err = 1'b0;\n        case (curr_state)\n            S6: begin\n                disc = 1'b1;\n                next_state = S0;\n            end\n            S7: begin\n                err = 1'b1;\n                next_state = S0;\n            end\n            S0: if (in) begin\n                disc = 1'b1;\n                next_state = S1;\n            end\n        endcase\n    end\n\nendmodule"}
{"task_id": "review2015_fancytimer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "module top_module(\n    input wire clk,\n    input wire reset,\n    input wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack\n);\n    reg [3:0] delay;\n    reg [3:0] counter;\n    reg [3:0] shift_reg;\n    reg searching;\n    reg [3:0] search_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            delay <= 4'b0000;\n            counter <= 4'b0000;\n            shift_reg <= 4'b0000;\n            counting <= 1'b0;\n            done <= 1'b0;\n            search_state <= 4'b1101;\n            searching <= 1'b1;\n        end else begin\n            if (searching) begin\n                if (shift_reg == 4'b1101) begin\n                    searching <= 1'b0;\n                    counting <= 1'b1;\n                    done <= 1'b0;\n                    delay <= data ? 4'b0001 : 4'b0000;\n                end else begin\n                    shift_reg <= {shift_reg[2:0], data};\n                end\n            end else if (counting) begin\n                if (counter == delay) begin\n                    counter <= 4'b0000;\n                    counting <= 1'b0;\n                    done <= 1'b1;\n                end else begin\n                    counter <= counter + 1'b1;\n                    count <= delay - counter;\n                end\n            end else if (done && ack) begin\n                searching <= 1'b1;\n            end else if (done && !ack) begin\n                done <= 1'b0;\n            end\n        end\n    end\n\nendmodule"}
{"task_id": "ece241_2013_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input [3:1] s,\n    output reg fr3,\n    output reg fr2,\n    output reg fr1,\n    output reg dfr\n);\n\nreg [2:0] state, next_state;\n\n// State Encoding\nlocalparam IDLE = 3'b000;\nlocalparam LOW = 3'b001;\nlocalparam MEDIUM = 3'b010;\nlocalparam HIGH = 3'b011;\nlocalparam MAX = 3'b100;\n\n// State Transition Logic\nalways @(*) begin\n    case(state)\n        IDLE: next_state = (s == 3'b000) ? MAX : IDLE;\n        LOW: next_state = (s == 3'b000) ? MAX : (s == 3'b001) ? LOW : (s == 3'b010) ? MEDIUM : HIGH;\n        MEDIUM: next_state = (s == 3'b000) ? MAX : (s == 3'b001) ? LOW : (s == 3'b010) ? MEDIUM : HIGH;\n        HIGH: next_state = (s == 3'b000) ? MAX : (s == 3'b001) ? LOW : (s == 3'b010) ? MEDIUM : HIGH;\n        MAX: next_state = (s == 3'b000) ? MAX : IDLE;\n        default: next_state = IDLE;\n    endcase\nend\n\n// Output Logic\nalways @(*) begin\n    case(state)\n        IDLE: {fr3, fr2, fr1, dfr} = 4'b0000;\n        LOW: {fr3, fr2, fr1, dfr} = 4'b1110;\n        MEDIUM: {fr3, fr2, fr1, dfr} = 4'b1100;\n        HIGH: {fr3, fr2, fr1, dfr} = 4'b1000;\n        MAX: {fr3, fr2, fr1, dfr} = 4'b1111;\n        default: {fr3, fr2, fr1, dfr} = 4'b0000;\n    endcase\nend\n\n// State Register\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= IDLE;\n    else\n        state <= next_state;\nend\n\nendmodule"}
{"task_id": "fsm_serial", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output done\n);\n\n    parameter IDLE = 3'b000, START = 3'b001, DATA = 3'b010, STOP = 3'b100;\n\n    reg [2:0] state, next_state;\n    reg [2:0] bit_count;\n    reg [7:0] data;\n    reg stop_bit;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        next_state = state;\n        case (state)\n            IDLE: begin\n                if (!in)\n                    next_state = START;\n            end\n            START: begin\n                if (in)\n                    next_state = DATA;\n            end\n            DATA: begin\n                if (bit_count == 7)\n                    next_state = STOP;\n                else\n                    next_state = DATA;\n            end\n            STOP: begin\n                if (!in)\n                    next_state = IDLE;\n                else\n                    next_state = STOP;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            bit_count <= 3'd0;\n            data <= 8'd0;\n            stop_bit <= 1'b0;\n            done <= 1'b0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    bit_count <= 3'd0;\n                    data <= 8'd0;\n                    stop_bit <= 1'b0;\n                    done <= 1'b0;\n                end\n                START: begin\n                    bit_count <= 3'd0;\n                    data <= 8'd0;\n                    stop_bit <= 1'b0;\n                    done <= 1'b0;\n                end\n                DATA: begin\n                    if (in) begin\n                        data <= {data[6:0], in};\n                        bit_count <= bit_count + 1'b1;\n                    end\n                end\n                STOP: begin\n                    stop_bit <= in;\n                    if (in)\n                        done <= 1'b1;\n                end\n                default: begin\n                    bit_count <= 3'd0;\n                    data <= 8'd0;\n                    stop_bit <= 1'b0;\n                    done <= 1'b0;\n                end\n            endcase\n        end\n    end\n\nendmodule"}
{"task_id": "fsm_serialdata", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output [7:0] out_byte,\n    output done\n);\n    \n    // State encoding\n    localparam IDLE = 3'b000,\n               START = 3'b001,\n               DATA = 3'b010,\n               STOP = 3'b011,\n               ERROR = 3'b100;\n    \n    reg [2:0] state, next_state;\n    reg [7:0] data_reg;\n    reg [2:0] bit_count;\n    \n    // State register\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n    \n    // Next state logic\n    always @(*) begin\n        case (state)\n            IDLE: next_state = in ? IDLE : START;\n            START: next_state = in ? ERROR : DATA;\n            DATA: next_state = bit_count[2:0] == 7 ? STOP : DATA;\n            STOP: next_state = in ? IDLE : STOP;\n            ERROR: next_state = in ? ERROR : STOP;\n            default: next_state = IDLE;\n        endcase\n    end\n    \n    // Output logic\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            data_reg <= 8'b0;\n            bit_count <= 3'b0;\n            out_byte <= 8'b0;\n            done <= 1'b0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    data_reg <= 8'b0;\n                    bit_count <= 3'b0;\n                    done <= 1'b0;\n                end\n                START: begin\n                    data_reg <= 8'b0;\n                    bit_count <= 3'b0;\n                    done <= 1'b0;\n                end\n                DATA: begin\n                    if (bit_count[2:0] == 7) begin\n                        data_reg <= {data_reg[6:0], in};\n                    end else begin\n                        data_reg <= {data_reg[6:0], in};\n                        bit_count <= bit_count + 1'b1;\n                    end\n                end\n                STOP: begin\n                    if (in) begin\n                        out_byte <= data_reg;\n                        done <= 1'b1;\n                    end else begin\n                        done <= 1'b0;\n                    end\n                end\n                ERROR: begin\n                    // Do nothing, wait for stop bit\n                end\n                default: begin\n                    out_byte <= 8'b0;\n                    done <= 1'b0;\n                end\n            endcase\n        end\n    end\n    \nendmodule"}
{"task_id": "gshare", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n\n    input predict_valid,\n    input [6:0] predict_pc,\n    output predict_taken,\n    output [6:0] predict_history,\n\n    input train_valid,\n    input train_taken,\n    input train_mispredicted,\n    input [6:7] train_history,\n    input [6:0] train_pc\n);\n    parameter PHT_SIZE = 128;\n    parameter HISTORY_SIZE = 7;\n    parameter PHT_WIDTH = 2;\n\n    reg [HISTORY_SIZE-1:0] global_history;\n    reg [PHT_WIDTH-1:0] pht [0:PHT_SIZE-1];\n\n    // Predict interface\n    wire [HISTORY_SIZE-1:0] index;\n    wire [PHT_WIDTH-1:0] pht_entry;\n\n    assign index = predict_pc ^ global_history;\n    assign pht_entry = pht[index];\n    assign predict_taken = pht_entry > 0;\n    assign predict_history = global_history;\n\n    // Update global history\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            global_history <= 0;\n        else if (predict_valid)\n            global_history <= {global_history[HISTORY_SIZE-2:0], predict_taken};\n    end\n\n    // Training interface\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            for (int i = 0; i < PHT_SIZE; i = i + 1)\n                pht[i] <= 0;\n        end else if (train_valid) begin\n            if (train_mispredicted) begin\n                global_history <= {global_history[HISTORY_SIZE-2:0], train_taken};\n            end\n            // Update PHT based on actual outcome\n            pht[train_pc ^ global_history] <= pht[train_pc ^ global_history] + (train_taken ? 1 : -1);\n            pht[train_pc ^ global_history] <= pht[train_pc ^ global_history] > 1 ? 1 : pht[train_pc ^ global_history];\n            pht[train_pc ^ global_history] <= pht[train_pc ^ global_history] < 0 ? 0 : pht[train_pc ^ global_history];\n        end\n    end\nendmodule"}
{"task_id": "lemmings4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n    \n    // State encoding\n    localparam [3:0] WALK_LEFT = 4'b0001,\n                     WALK_RIGHT = 4'b0010,\n                     FALLING = 4'b0100,\n                     DIGGING = 4'b1000,\n                     SPLATTER = 4'b1111;\n    \n    reg [3:0] current_state, next_state;\n    \n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            current_state <= WALK_LEFT;\n        else\n            current_state <= next_state;\n    end\n    \n    // Next state logic\n    always @(*) begin\n        next_state = current_state;\n        case (current_state)\n            WALK_LEFT: \n                next_state = (bump_left && !bump_right) ? WALK_RIGHT : \n                (!bump_left && bump_right) ? WALK_LEFT : \n                (bump_left && bump_right) ? WALK_RIGHT : WALK_LEFT;\n            WALK_RIGHT: \n                next_state = (bump_right && !bump_left) ? WALK_LEFT : \n                (!bump_right && bump_left) ? WALK_RIGHT : \n                (bump_right && bump_left) ? WALK_LEFT : WALK_RIGHT;\n            \n            FALLING: \n                next_state = ground ? WALK_LEFT : FALLING;\n            DIGGING: \n                next_state = ground ? WALK_LEFT : DIGGING;\n            \n            default: next_state = SPLATTER;\n        endcase\n        \n        if (!ground && (current_state == WALK_LEFT || current_state == WALK_RIGHT)) \n            next_state = FALLING;\n        else if (dig && ground && (current_state == WALK_LEFT || current_state == WALK_RIGHT)) \n            next_state = DIGGING;\n        else if (current_state == FALLING && ground && !dig) \n            next_state = WALK_LEFT;\n    end\n    \n    // Output logic\n    always @(*) begin\n        walk_left = (current_state == WALK_LEFT);\n        walk_right = (current_state == WALK_RIGHT);\n        aaah = (current_state == FALLING);\n        digging = (current_state == DIGGING);\n    end\nendmodule"}
{"task_id": "review2015_fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack\n);\n\n    localparam [3:0] SEARCH = 4'd0, SHIFT = 4'd1, WAIT = 4'd2, TIMEOUT = 4'd3;\n    reg [3:0] state, next_state;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= SEARCH;\n            shift_ena <= 1'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n        end else begin\n            state <= next_state;\n            case (state)\n                SEARCH: begin\n                    shift_ena <= 1'b0;\n                    counting <= 1'b0;\n                    done <= 1'b0;\n                end\n                SHIFT: begin\n                    shift_ena <= 1'b1;\n                    counting <= 1'b0;\n                    done <= 1'b0;\n                end\n                WAIT: begin\n                    shift_ena <= 1'b0;\n                    counting <= 1'b1;\n                    done <= 1'b0;\n                end\n                TIMEOUT: begin\n                    shift_ena <= 1'b0;\n                    counting <= 1'b0;\n                    done <= 1'b1;\n                end\n            endcase\n        end\n    end\n\n    always @(*) begin\n        next_state = state;\n        case (state)\n            SEARCH: begin\n                if (data == 1'b1) begin\n                    next_state = SEARCH;\n                end else begin\n                    next_state = SEARCH;\n                end\n            end\n            SHIFT: begin\n                if (data == 1'b1) begin\n                    next_state = SEARCH;\n                end else begin\n                    next_state = (state == 4'd3) ? WAIT : state + 1'b1;\n                end\n            end\n            WAIT: begin\n                if (done_counting) begin\n                    next_state = TIMEOUT;\n                end else begin\n                    next_state = WAIT;\n                end\n            end\n            TIMEOUT: begin\n                if (ack) begin\n                    next_state = SEARCH;\n                end else begin\n                    next_state = TIMEOUT;\n                end\n            end\n        endcase\n    end\n\nendmodule"}
{"task_id": "conwaylife", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [255:0] data,\n    output reg [255:0] q\n);\n\n    reg [255:0] next_state;\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else\n            q <= next_state;\n    end\n\n    always @(*) begin\n        integer i, j;\n        integer count;\n        integer x, y;\n        next_state = q;\n\n        for (i = 0; i < 16; i = i + 1) begin\n            for (j = 0; j < 16; j = j + 1) begin\n                count = 0;\n                for (x = -1; x <= 1; x = x + 1) begin\n                    for (y = -1; y <= 1; y = y + 1) begin\n                        if (x == 0 && y == 0)\n                            continue;\n                        count = count + q[((i + x + 16) % 16) * 16 + ((j + y + 16) % 16)];\n                    end\n                end\n                if (q[i * 16 + j] == 1 && (count < 2 || count > 3))\n                    next_state[i * 16 + j] = 0;\n                else if (q[i * 16 + j] == 0 && count == 3)\n                    next_state[i * 16 + j] = 1;\n            end\n        end\n    end\n\nendmodule"}
{"task_id": "lemmings3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n\n    reg [1:0] state, next_state;\n    localparam WALK_LEFT = 2'b00, WALK_RIGHT = 2'b01, FALLING = 2'b10, DIGGING = 2'b11;\n\n    always @(*) begin\n        case (state)\n            WALK_LEFT: next_state = (ground && dig) ? DIGGING : (bump_left ? WALK_RIGHT : (bump_right ? WALK_RIGHT : WALK_LEFT));\n            WALK_RIGHT: next_state = (ground && dig) ? DIGGING : (bump_right ? WALK_LEFT : (bump_left ? WALK_LEFT : WALK_RIGHT));\n            FALLING: next_state = ground ? (state[0] ? WALK_RIGHT : WALK_LEFT) : FALLING;\n            DIGGING: next_state = ground ? WALK_LEFT : DIGGING;\n            default: next_state = WALK_LEFT;\n        endcase\n    end\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        walk_left = (state == WALK_LEFT);\n        walk_right = (state == WALK_RIGHT);\n        aaah = (state == FALLING);\n        digging = (state == DIGGING);\n    end\n\nendmodule"}
{"task_id": "count_clock", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input ena,\n    output reg pm,\n    output reg [7:0] hh,\n    output reg [7:0] mm,\n    output reg [7:0] ss\n);\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            {pm, hh, mm, ss} <= {1'b0, 8'd12, 8'd0, 8'd0}; // Reset to 12:00 AM\n        else if (ena) begin\n            if (ss == 8'd59) begin\n                ss <= 8'd0;\n                if (mm == 8'd59) begin\n                    mm <= 8'd0;\n                    if (hh == 8'd12) begin\n                        hh <= 8'd1;\n                        pm <= ~pm;\n                    end\n                    else begin\n                        hh <= hh + 1;\n                    end\n                end\n                else begin\n                    mm <= mm + 1;\n                end\n            end\n            else begin\n                ss <= ss + 1;\n            end\n        end\n    end\nendmodule"}
{"task_id": "lemmings2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    output walk_left,\n    output walk_right,\n    output aaah\n);\n    // State encoding: 000 - walk_left, 001 - walk_right, 010 - falling\n    reg [2:0] state, next_state;\n    wire [2:0] next_state_comb;\n\n    // State transition logic\n    always @(*) begin\n        next_state_comb = state;\n        aaah = 1'b0;\n        if (state[2] == 1'b0) begin\n            if (ground == 1'b0) begin\n                next_state_comb = 3'b010; // Falling state\n                aaah = 1'b1;\n            end\n            else if (state[1] == 1'b1) begin\n                if (bump_left) next_state_comb = 3'b000; // Walk left\n            end\n            else if (state[0] == 1'b1) begin\n                if (bump_right) next_state_comb = 3'b001; // Walk right\n            end\n        end\n        else begin // In falling state\n            if (ground == 1'b1) begin\n                next_state_comb = {state[1:0], 1'b0}; // Resume walking\n            end\n        end\n    end\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset) state <= 3'b000; // Walk left\n        else state <= next_state_comb;\n    end\n\n    // Output logic\n    assign walk_left = state[0];\n    assign walk_right = state[1];\n    assign aaah = state[2] & ~ground; // Fall sound while falling\n\nendmodule"}
{"task_id": "countbcd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output [3:1] ena,\n    output reg [15:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 16'b0000_0000_0000_0000; // Set all digits to 0\n        else begin\n            q[3:0] <= q[3:0] + 1'b1; // Increment ones digit\n            if (q[3:0] == 4'b1001) begin // If ones digit is 9\n                q[3:0] <= 4'b0000; // Reset ones digit\n                ena[1] <= 1'b1; // Enable tens digit\n            end else\n                ena[1] <= 1'b0;\n            \n            if (ena[1]) begin\n                q[7:4] <= q[7:4] + 1'b1; // Increment tens digit\n                if (q[7:4] == 4'b1001) begin // If tens digit is 9\n                    q[7:4] <= 4'b0000; // Reset tens digit\n                    ena[2] <= 1'b1; // Enable hundreds digit\n                end else\n                    ena[2] <= 1'b0;\n            end\n            if (ena[2]) begin\n                q[11:8] <= q[11:8] + 1'b1; // Increment hundreds digit\n                if (q[11:8] == 4'b1001) begin // If hundreds digit is 9\n                    q[11:8] <= 4'b0000; // Reset hundreds digit\n                    ena[3] <= 1'b1; // Enable thousands digit\n                end else\n                    ena[3] <= 1'b0;\n            end\n            if (ena[3]) begin\n                q[15:12] <= q[15:12] + 1'b1; // Increment thousands digit\n                if (q[15:12] == 4'b1001) // If thousands digit is 9\n                    q[15:12] <= 4'b0000; // Reset thousands digit\n            end\n        end\n    end\n\nendmodule"}
{"task_id": "mux2to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] a,\n    input [99:0] b,\n    input sel,\n    output [99:0] out\n);\n    always @(*) begin\n        if (sel)\n            out = b;\n        else\n            out = a;\n    end\nendmodule"}
{"task_id": "m2014_q6b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "module top_module(\n    input [3:1] y,\n    input w,\n    output reg Y2);\n    \n    always @(*) begin\n        case(y)\n            3'b000: Y2 = 1'b0; // State A\n            3'b001: Y2 = w;   // State B\n            3'b010: Y2 = w;   // State C\n            3'b011: Y2 = w;   // State D\n            3'b100: Y2 = 1'b1; // State E\n            3'b101: Y2 = w;   // State F\n            default: Y2 = 1'bx; // Default case\n        endcase\n    end\n    \nendmodule"}
{"task_id": "ringer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "module top_module(\n    input ring, \n    input vibrate_mode,\n    output ringer,\n    output motor\n);\n    assign ringer = ~vibrate_mode & ring;\n    assign motor = vibrate_mode & ring;\nendmodule"}
{"task_id": "alwaysblock1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an AND gate using both an assign statement and a combinational always block. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out_assign,\n    output reg out_alwaysblock\n);\n    // Assign statement\n    assign out_assign = a & b;\n\n    // Combinational always block\n    always @(*) \n        begin\n            out_alwaysblock = a & b;\n        end\nendmodule"}
{"task_id": "zero", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that always outputs a LOW.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput zero);\n", "completion": "module top_module(\n    output zero);\n    assign zero = 1'b0; // Always output LOW\nendmodule"}
{"task_id": "circuit7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg q\n);\n\nalways @(posedge clk) begin\n    if (a && q) \n        q <= 1'b0;\n    else if (a)\n        q <= 1'b1;\n    else \n        q <= 1'b0;\nend\n\nendmodule"}
{"task_id": "ece241_2014_q5a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n    localparam [1:0] IDLE = 2'b00, COMPLEMENT = 2'b01, DONE = 2'b10;\n    reg [1:0] state, next_state;\n    reg complement_flag;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            IDLE: next_state = (x == 1'b0) ? COMPLEMENT : DONE;\n            COMPLEMENT: next_state = DONE;\n            DONE: next_state = IDLE;\n            default: next_state = IDLE;\n        endcase\n    end\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            complement_flag <= 1'b0;\n        else if (state == COMPLEMENT)\n            complement_flag <= 1'b1;\n    end\n\n    assign z = (state == COMPLEMENT) ? ~x : x;\n\nendmodule"}
{"task_id": "fsm3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n    localparam [1:0] A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n    reg [1:0] state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= A;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A;\n        endcase\n    end\n\n    assign out = (state == D) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "vector2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that reverses the byte order of a 32-bit vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [31:0] in,\n    output [31:0] out\n);\n    \n    assign out = {in[7:0], in[15:8], in[23:16], in[31:24]};\n    \nendmodule"}
{"task_id": "m2014_q4c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a simple D flip flop with active high synchronous reset (reset output to 0).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input r,\n    output logic q\n);\n    always @(posedge clk) begin\n        if (r)\n            q <= 1'b0; // Reset q to 0 on rising edge of clk if r is high\n        else\n            q <= d; // Pass d to q on rising edge of clk if r is low\n    end\nendmodule"}
{"task_id": "mt2015_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the boolean function z = (x^y) & x.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n    \n    assign z = (x ^ y) & x;\n    \nendmodule"}
{"task_id": "shift18", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input ena,\n    input [1:0] amount,\n    input [63:0] data,\n    output reg [63:0] q\n);\n\nalways @(posedge clk) begin\n    if (load)\n        q <= data; // Load data\n    else if (ena) begin\n        case (amount)\n            2'b00: q <= {q[62:0], 1'b0}; // Shift left by 1\n            2'b01: q <= {q[55:0], 8'b0}; // Shift left by 8\n            2'b10: q <= {{1{q[63]}}, q[62:1]}; // Arithmetic shift right by 1\n            2'b11: q <= {{8{q[63]}}, q[55:0]}; // Arithmetic shift right by 8\n            default: q <= q; // No change\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "ece241_2013_q8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input aresetn,\n    input x,\n    output reg z\n);\n    \n    // State encoding\n    localparam [1:0] S0 = 2'b00, S1 = 2'b01, S2 = 2'b10;\n    reg [1:0] state, next_state;\n\n    // State register\n    always @(posedge clk or negedge aresetn) begin\n        if (!aresetn)\n            state <= S0;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic and output\n    always @(*) begin\n        case (state)\n            S0: next_state = x ? S1 : S0;\n            S1: next_state = x ? S2 : S0;\n            S2: next_state = x ? S2 : S0;\n        endcase\n\n        z = (state == S2);\n    end\n\nendmodule"}
{"task_id": "m2014_q6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n    \n    // State encoding\n    parameter A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n    \n    // State registers\n    reg [2:0] present_state, next_state;\n    \n    // Output logic\n    assign z = (present_state == E) ? 1'b1 : 1'b0;\n    \n    // State machine logic\n    always @(*) begin\n        case(present_state)\n            A: next_state = w ? A : B;\n            B: next_state = w ? D : C;\n            C: next_state = w ? D : E;\n            D: next_state = w ? A : F;\n            E: next_state = w ? D : E;\n            F: next_state = w ? D : C;\n            default: next_state = A;\n        endcase\n    end\n\n    // State register update\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            present_state <= A;\n        else\n            present_state <= next_state;\n    end\nendmodule"}
{"task_id": "fsm_ps2data", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output [23:0] out_bytes,\n    output done\n);\n    localparam [1:0] IDLE = 2'b00, MSG1 = 2'b01, MSG2 = 2'b10, MSG3 = 2'b11;\n\n    reg [1:0] state, next_state;\n    reg [23:0] message;\n    reg [2:0] byte_count;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            IDLE: begin\n                next_state = (in[3] == 1'b1) ? MSG1 : IDLE;\n                byte_count = 1;\n                done = 1'b0;\n            end\n            MSG1: begin\n                next_state = MSG2;\n                byte_count = 2;\n            end\n            MSG2: begin\n                next_state = MSG3;\n                byte_count = 3;\n            end\n            MSG3: begin\n                next_state = IDLE;\n                byte_count = 1;\n                done = 1'b1;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            message <= 24'b0;\n        else if (state == MSG1)\n            message <= {in, message[23:8]};\n        else if (state == MSG2)\n            message <= {in, message[23:16]};\n        else if (state == MSG3)\n            message <= {in, message[23:16]};\n    end\n\n    assign out_bytes = (done) ? message : 24'b0;\n\nendmodule"}
{"task_id": "2012_q2b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\n\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "module top_module (\n    input [5:0] y,\n    input w,\n    output Y1,\n    output Y3\n);\n    // Y1: State transition for y[1] (state B)\n    assign Y1 = y[0] & w;\n\n    // Y3: State transition for y[3] (state D)\n    assign Y3 = (y[1] & ~w) | (y[2] & ~w) | (y[4] & ~w) | (y[5] & ~w);\nendmodule"}
{"task_id": "vector0", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "module top_module(\n    input [2:0] vec, \n    output [2:0] outv,\n    output o2,\n    output o1,\n    output o0\n);\n    assign outv = vec; // Directly assign input to output\n    assign o2 = vec[2]; // Assign o2 to vec's bit 2\n    assign o1 = vec[1]; // Assign o1 to vec's bit 1\n    assign o0 = vec[0]; // Assign o0 to vec's bit 0\nendmodule"}
{"task_id": "kmap4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\n    always @(*) begin\n        case({c,d,a,b})\n            4'b0000, 4'b0110, 4'b1001, 4'b1111: out = 1'b1;\n            default: out = 1'b0;\n        endcase\n    end\nendmodule"}
{"task_id": "vector1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "module top_module (\n    input [15:0] in,\n    output [7:0] out_hi,\n    output [7:0] out_lo\n);\n    assign out_hi = in[15:8];\n    assign out_lo = in[7:0];\nendmodule"}
{"task_id": "norgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    assign out = ~(a | b);\nendmodule"}
{"task_id": "alwaysblock2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "module top_module(\n    input clk,\n    input a, \n    input b,\n    output out_assign,\n    output reg out_always_comb,\n    output reg out_always_ff\n);\n    // XOR using assign statement\n    assign out_assign = a ^ b;\n\n    // XOR using combinational always block\n    always @(*) begin\n        out_always_comb = a ^ b;\n    end\n\n    // XOR using clocked always block\n    always @(posedge clk) begin\n        out_always_ff <= a ^ b;\n    end\nendmodule"}
{"task_id": "m2014_q6c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "module top_module (\n    input [6:1] y,\n    input w,\n    output Y2,\n    output Y4\n);\n    // Y2 logic: Active when y is A, D, or F\n    assign Y2 = y[1] | y[5] | y[4];\n    \n    // Y4 logic: Active when y is B, C, or E\n    assign Y4 = y[2] | y[3] | y[6];\nendmodule"}
{"task_id": "mux256to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "module top_module (\n    input [255:0] in,\n    input [7:0] sel,\n    output  out\n);\nassign out = in[sel];\nendmodule"}
{"task_id": "2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input w,\n    input R,\n    input E,\n    input L,\n    output reg Q\n);\n\nwire mux_out;\n\nassign mux_out = E ? Q : w;\n\nalways @(posedge clk) begin\n    if (L)\n        Q <= R;\n    else\n        Q <= mux_out;\nend\n\nendmodule"}
{"task_id": "ece241_2014_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    output z\n);\n\nwire a, b, c;\n\n// D flip-flops\nreg q1, q2, q3;\n\n// XOR, AND, OR gates for next state logic\nassign a = x ^ q1;\nassign b = x & ~q2;\nassign c = x | ~q3;\n\n// D flip-flop updates\nalways @(posedge clk) begin\n    q1 <= a;\n    q2 <= b;\n    q3 <= c;\nend\n\n// XNOR for output\nassign z = ~(q1 ^ q2 ^ q3);\n\nendmodule"}
{"task_id": "circuit4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n\nassign q = (a & b) | (c & d);\n\nendmodule"}
{"task_id": "rule110", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q\n);\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else\n            q <= {1'b0, q[510:0], 1'b0} ^ ({1'b0, q[510:0], 1'b0} >> 1) ^ ({1'b0, q[510:0], 1'b0} >> 2);\n    end\nendmodule"}
{"task_id": "fsm3s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n\n    // State encoding\n    localparam [1:0] A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\n    reg [1:0] current_state, next_state;\n\n    // State transitions and output logic\n    always @(*) begin\n        case (current_state)\n            A: next_state = in ? B : A;\n            B: next_state = in ? B : C;\n            C: next_state = in ? D : A;\n            D: next_state = in ? B : C;\n            default: next_state = A; // default state\n        endcase\n        case (current_state)\n            D: out = 1'b1;\n            default: out = 1'b0;\n        endcase\n    end\n\n    // Sequential logic for state update\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            current_state <= A; // Reset to state A\n        else\n            current_state <= next_state;\n    end\n\nendmodule"}
{"task_id": "circuit5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "module top_module (\n    input [3:0] a, \n    input [3:0] b, \n    input [3:0] c, \n    input [3:0] d,\n    input [3:0] e,\n    output reg [3:0] q\n);\n    \n    always @(*) begin\n        case(c)\n            0: q = b;\n            1: q = e;\n            2: q = a;\n            3: q = d;\n            4: q = 4'bx; // Undefined case\n            default: q = 4'bx;\n        endcase\n    end\n\nendmodule"}
{"task_id": "bugs_mux2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFind the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input sel,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out\n);\n    always @(*) begin\n        out = sel ? b : a;\n    end\nendmodule"}
{"task_id": "mt2015_muxdff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "module top_module(\n    input clk,\n    input L,\n    input q_in,\n    input r_in,\n    output reg Q\n);\n    always @(posedge clk) begin\n        if (L) begin\n            Q <= r_in;\n        end else begin\n            Q <= q_in ^ Q;\n        end\n    end\nendmodule\n\nmodule full_module (\n    input [2:0] r,\n    input L,\n    input clk,\n    output reg [2:0] q\n);\n    wire [2:0] q_out;\n    top_module top0 (.clk(clk), .L(L), .q_in(q[0]), .r_in(r[0]), .Q(q_out[0]));\n    top_module top1 (.clk(clk), .L(L), .q_in(q[1]), .r_in(r[1]), .Q(q_out[1]));\n    top_module top2 (.clk(clk), .L(L), .q_in(q[2]), .r_in(r[2]), .Q(q_out[2]));\n    assign q = q_out;\nendmodule"}
{"task_id": "edgecapture", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input [31:0] in,\n    output reg [31:0] out);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            out <= 32'b0; // Reset output to 0\n        else\n            out <= out | (in & ~in[31:0] >>> 1); // Capture transitions\n    end\n\nendmodule"}
{"task_id": "dff8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    output reg [7:0] q);\n\n    always @(posedge clk) begin\n        q <= d;\n    end\n\nendmodule"}
{"task_id": "ece241_2014_q1c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nAssume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [7:0] b,\n    output [7:0] s,\n    output overflow\n);\nwire [8:0] sum;\nassign {overflow, s} = a + b;\nassign sum = {a[7], a} + {b[7], b};\nassign overflow = (sum[8] != sum[7]);\nendmodule"}
{"task_id": "review2015_fsmonehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n);\n\n    // State assignments\n    localparam [9:0] S = 10'b0000000001;\n    localparam [9:0] S1 = 10'b0000000010;\n    localparam [9:0] S11 = 10'b0000000100;\n    localparam [9:0] S110 = 10'b0000001000;\n    localparam [9:0] B0 = 10'b0000010000;\n    localparam [9:0] B1 = 10'b0000100000;\n    localparam [9:0] B2 = 10'b0001000000;\n    localparam [9:0] B3 = 10'b0010000000;\n    localparam [9:0] Count = 10'b0100000000;\n    localparam [9:0] Wait = 10'b1000000000;\n\n    // Next state logic\n    wire [9:0] next_state;\n    assign next_state = state == S110 ? B0 :\n                        state == B3 ? B3 :\n                        state == Count ? Count :\n                        state == Wait ? Wait :\n                        state == S ? (d ? S1 : S) :\n                        state == S1 ? (d ? S11 : S) :\n                        state == S11 ? (d ? S11 : S11) :\n                        state == B0 ? B1 :\n                        state == B1 ? B2 :\n                        state == B2 ? B3 :\n                        10'b0;\n\n    assign B3_next = next_state == B3;\n    assign S_next = next_state == S;\n    assign S1_next = next_state == S1;\n    assign Count_next = next_state == Count;\n    assign Wait_next = next_state == Wait;\n\n    // Output logic\n    assign done = state == Wait;\n    assign counting = state == Count;\n    assign shift_ena = state == B0 || state == B1 || state == B2 || state == B3;\n\nendmodule"}
{"task_id": "counter_2bc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n    always @(posedge clk or posedge areset) begin\n        if (areset) \n            state <= 2'b01;  // Reset to weakly not-taken\n        else if (train_valid) begin\n            if (train_taken) \n                state <= state == 2'b11 ? 2'b11 : state + 1'b1;  // Saturate at 3\n            else \n                state <= state == 2'b00 ? 2'b00 : state - 1'b1;  // Saturate at 0\n        end\n    end\nendmodule"}
{"task_id": "always_casez", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output reg [2:0] pos\n);\nalways @* begin\n    if (in[0]) pos = 3'd0;\n    else if (in[1]) pos = 3'd1;\n    else if (in[2]) pos = 3'd2;\n    else if (in[3]) pos = 3'd3;\n    else if (in[4]) pos = 3'd4;\n    else if (in[5]) pos = 3'd5;\n    else if (in[6]) pos = 3'd6;\n    else if (in[7]) pos = 3'd7;\n    else pos = 3'd0;\nend\nendmodule"}
{"task_id": "always_nolatches", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSuppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "module top_module (\n    input [15:0] scancode,\n    output reg left,\n    output reg down,\n    output reg right,\n    output reg up\n);\n\nalways @* begin\n    left = 1'b0;\n    down = 1'b0;\n    right = 1'b0;\n    up = 1'b0;\n\n    case(scancode)\n        16'hE06B: left = 1'b1;\n        16'hE072: down = 1'b1;\n        16'hE074: right = 1'b1;\n        16'hE075: up = 1'b1;\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4j", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 4-bit adder with full adders. The output sum should include the overflow bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "module top_module (\n    input [3:0] x,\n    input [3:0] y,\n    output [4:0] sum\n);\n    wire [3:0] carry;\n\n    // Full adder instantiation for each bit\n    full_adder fa0(.a(x[0]), .b(y[0]), .cin(1'b0), .sum(sum[0]), .cout(carry[0]));\n    full_adder fa1(.a(x[1]), .b(y[1]), .cin(carry[0]), .sum(sum[1]), .cout(carry[1]));\n    full_adder fa2(.a(x[2]), .b(y[2]), .cin(carry[1]), .sum(sum[2]), .cout(carry[2]));\n    full_adder fa3(.a(x[3]), .b(y[3]), .cin(carry[2]), .sum(sum[3]), .cout(carry[3]));\n\n    // Output the sum and the final carry as overflow\n    assign sum[4] = carry[3];\nendmodule"}
{"task_id": "history_shift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            predict_history <= 32'b0;\n        end else if (train_mispredicted) begin\n            predict_history <= {train_history, train_taken};\n        end else if (predict_valid) begin\n            predict_history <= {predict_history[30:0], predict_taken};\n        end\n    end\n\nendmodule"}
{"task_id": "wire_decl", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out,\n    output out_n );\n\n    wire and1, and2;\n\n    // First layer: AND gates\n    and1 = a & b;\n    and2 = c & d;\n\n    // Second layer: OR gate\n    out = and1 | and2;\n\n    // Inverted output\n    out_n = ~out;\n\nendmodule"}
{"task_id": "dff", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a single D flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q);\n\n    always @(posedge clk) begin\n        q <= d;\n    end\n\nendmodule"}
{"task_id": "ece241_2013_q12", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "module top_module (\n    input clk,\n    input enable,\n    input S,\n    input A,\n    input B,\n    input C,\n    output reg Z\n);\n    reg [7:0] shift_reg;\n\n    always @(posedge clk) begin\n        if (enable)\n            shift_reg <= {shift_reg[6:0], S};\n    end\n\n    always @(*) begin\n        case({A,B,C})\n            3'b000: Z = shift_reg[0];\n            3'b001: Z = shift_reg[1];\n            3'b010: Z = shift_reg[2];\n            3'b011: Z = shift_reg[3];\n            3'b100: Z = shift_reg[4];\n            3'b101: Z = shift_reg[5];\n            3'b110: Z = shift_reg[6];\n            3'b111: Z = shift_reg[7];\n            default: Z = 1'b0;\n        endcase\n    end\nendmodule"}
{"task_id": "thermostat", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "module top_module(\n    input mode,\n    input too_cold, \n    input too_hot,\n    input fan_on,\n    output heater,\n    output aircon,\n    output fan\n);\n    assign heater = mode & too_cold;\n    assign aircon = ~mode & too_hot;\n    assign fan = heater | aircon | fan_on;\nendmodule"}
{"task_id": "ece241_2013_q2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out_sop,\n    output out_pos\n);\n\n    // Sum-of-Products (SOP) implementation\n    assign out_sop = (a & b & ~c & ~d) | (~a & b & c & ~d) | (~a & ~b & c & d);\n\n    // Product-of-Sums (POS) implementation\n    assign out_pos = ~(a | ~b | ~c | d) & (~a | b | ~c | d) & (~a | ~b | c | ~d);\n\nendmodule"}
{"task_id": "lfsr32", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [31:0] q);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 32'h1;\n        else\n            q <= {q[30:0], q[31] ^ q[21] ^ q[1] ^ q[0]};\n    end\nendmodule"}
{"task_id": "circuit3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n    \n    assign q = (a & b) | (c & d);\n\nendmodule"}
{"task_id": "7420", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d, \n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n\n// 4-input NAND gates for both outputs\nassign p1y = ~(p1a & p1b & p1c & p1d);\nassign p2y = ~(p2a & p2b & p2c & p2d);\n\nendmodule"}
{"task_id": "popcount255", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "module top_module (\n    input [254:0] in,\n    output reg [7:0] out\n);\n    // Count the number of '1's in the input vector\n    always @* begin\n        out = 0;\n        for (int i = 0; i < 255; i = i + 1)\n            out = out + in[i];\n    end\nendmodule"}
{"task_id": "gatesv", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output [2:0] out_both,\n    output [3:1] out_any,\n    output [3:0] out_different\n);\n    assign out_both = {1'b0, in[3:1] & in[2:0]};\n    assign out_any = {in[3:1] | in[2:0], 1'b1};\n    assign out_different = {in[0] ^ in[3], in[3:1] ^ in[2:0]};\nendmodule"}
{"task_id": "circuit6", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "module top_module (\n    input [2:0] a, \n    output reg [15:0] q\n);\nalways @(*) begin\n    case(a)\n        3'b000: q = 16'h1232;\n        3'b001: q = 16'hAEE0;\n        3'b010: q = 16'h27D4;\n        3'b011: q = 16'h5A0E;\n        3'b100: q = 16'h2066;\n        3'b101: q = 16'h64CE;\n        3'b110: q = 16'hC526;\n        3'b111: q = 16'h2F19;\n        default: q = 16'h0000;\n    endcase\nend\nendmodule"}
{"task_id": "countslow", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input slowena,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk) begin\n        if (reset)\n            q <= 4'd0; // Reset counter to 0\n        else if (slowena)\n            q <= (q == 4'd9) ? 4'd0 : q + 1'b1; // Increment counter or reset to 0 if it reaches 9\n    end\n\nendmodule"}
{"task_id": "m2014_q4f", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    \n    // The bubble on in2 indicates an inversion\n    assign out = in1 & ~in2;\n    \nendmodule"}
{"task_id": "m2014_q4h", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module assigns the output port to the same value as the input port combinationally.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out);\n    \n    assign out = in;\n\nendmodule"}
{"task_id": "fsm1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input areset,\n    output out\n);\n    localparam [1:0] B = 2'b10, A = 2'b01;\n    reg [1:0] state, next_state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= B;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            B: next_state = in ? B : A;\n            A: next_state = in ? A : B;\n            default: next_state = B;\n        endcase\n    end\n\n    assign out = (state == A);\n\nendmodule"}
{"task_id": "dualedge", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "module top_module(\n    input clk,\n    input d,\n    output reg q);\n\n    reg q_prev;\n\n    always @(posedge clk or negedge clk) begin\n        if (clk == 1'b0) begin\n            q <= q_prev;\n            q_prev <= d;\n        end else begin\n            q <= q_prev;\n            q_prev <= d;\n        end\n    end\n\nendmodule"}
{"task_id": "xnorgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an XNOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n    \n    assign out = ~(a ^ b); // XNOR operation\n\nendmodule"}
{"task_id": "mt2015_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nModule A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n\n    wire a1_out, a2_out, b1_out, b2_out, or_out, and_out;\n\n    // First A submodule\n    A a1(\n        .x(x),\n        .y(y),\n        .z(a1_out)\n    );\n\n    // First B submodule\n    B b1(\n        .x(x),\n        .y(y),\n        .z(b1_out)\n    );\n\n    // Second A submodule\n    A a2(\n        .x(x),\n        .y(y),\n        .z(a2_out)\n    );\n\n    // Second B submodule\n    B b2(\n        .x(x),\n        .y(y),\n        .z(b2_out)\n    );\n\n    // OR gate\n    or gate_or(a1_out, b1_out, or_out);\n\n    // AND gate\n    and gate_and(a2_out, b2_out, and_out);\n\n    // XOR gate\n    xor gate_xor(or_out, and_out, z);\n\nendmodule\n\n// Module B implementation based on the provided waveform\nmodule B(\n    input x,\n    input y,\n    output z);\n    assign z = (x & ~y) | (~x & y);\nendmodule\n\n// Module A implementation\nmodule A(\n    input x,\n    input y,\n    output z);\n    assign z = (x ^ y) & x;\nendmodule"}
{"task_id": "rotate100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [1:0] ena,\n    input [99:0] data,\n    output reg [99:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;  // Load data into q\n        else if (ena != 2'b00) begin\n            case (ena)\n                2'b01: q <= {q[0], q[99:1]};  // Rotate right\n                2'b10: q <= {q[98:0], q[99]};  // Rotate left\n                default: q <= q;  // No rotation\n            endcase\n        end\n    end\n\nendmodule"}
{"task_id": "review2015_count1k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [9:0] q\n);\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 10'd0;\n        else if (q == 10'd999)\n            q <= 10'd0;\n        else\n            q <= q + 1;\n    end\nendmodule"}
{"task_id": "notgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements a NOT gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = ~in; // NOT gate implementation\nendmodule"}
{"task_id": "fsm_onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "module top_module (\n    input in,\n    input [9:0] state,\n    output [9:0] next_state,\n    output out1,\n    output out2);\n\n    assign out1 = state[7];\n    assign out2 = state[9];\n    assign next_state = (state[0]) ? 10'b0000000000 : // S0\n                        (state[1]) ? 10'b0000000010 : // S1\n                        (state[2]) ? 10'b0000000100 : // S2\n                        (state[3]) ? 10'b0000001000 : // S3\n                        (state[4]) ? 10'b0000010000 : // S4\n                        (state[5]) ? 10'b0000100000 : // S5\n                        (state[6]) ? 10'b0001000000 : // S6\n                        (state[7]) ? 10'b0010000000 : // S7\n                        (state[8]) ? 10'b0100000000 : // S8\n                        (state[9]) ? 10'b1000000000 : // S9\n                                      10'b0000000000; // Default S0\n\nendmodule"}
{"task_id": "ece241_2013_q7", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    output reg Q\n);\n    \n    always @(posedge clk) begin\n        case ({j, k})\n            2'b00: Q <= Q; // Maintain state\n            2'b01: Q <= 1'b0; // Reset\n            2'b10: Q <= 1'b1; // Set\n            2'b11: Q <= ~Q; // Toggle\n        endcase\n    end\n\nendmodule"}
{"task_id": "popcount3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "module top_module (\n    input [2:0] in,\n    output [1:0] out\n);\n    wire [2:0] ones;\n    // Count the number of ones in the input\n    assign ones = in & {3{in[0]}} + in & {3{in[1]}} + in & {3{in[2]}};\n    // Output the count as a 2-bit value\n    assign out = ones[1:0];\nendmodule"}
{"task_id": "vector5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    input e,\n    output [24:0] out\n);\n    assign out[24] = ~a ^ a;\n    assign out[23] = ~a ^ b;\n    assign out[22] = ~a ^ c;\n    assign out[21] = ~a ^ d;\n    assign out[20] = ~a ^ e;\n    assign out[19] = ~b ^ a;\n    assign out[18] = ~b ^ b;\n    assign out[17] = ~b ^ c;\n    assign out[16] = ~b ^ d;\n    assign out[15] = ~b ^ e;\n    assign out[14] = ~c ^ a;\n    assign out[13] = ~c ^ b;\n    assign out[12] = ~c ^ c;\n    assign out[11] = ~c ^ d;\n    assign out[10] = ~c ^ e;\n    assign out[9] = ~d ^ a;\n    assign out[8] = ~d ^ b;\n    assign out[7] = ~d ^ c;\n    assign out[6] = ~d ^ d;\n    assign out[5] = ~d ^ e;\n    assign out[4] = ~e ^ a;\n    assign out[3] = ~e ^ b;\n    assign out[2] = ~e ^ c;\n    assign out[1] = ~e ^ d;\n    assign out[0] = ~e ^ e;\nendmodule"}
{"task_id": "lemmings1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    output walk_left,\n    output walk_right\n);\n\nreg walk_left_next, walk_right_next;\n\nalways @(posedge clk or posedge areset) begin\n    if (areset)\n        {walk_left, walk_right} <= 2'b10; // Walk left\n    else begin\n        walk_left <= walk_left_next;\n        walk_right <= walk_right_next;\n    end\nend\n\nalways @(*) begin\n    if (bump_left && bump_right)\n        {walk_left_next, walk_right_next} = 2'b01; // Walk right\n    else if (bump_left)\n        {walk_left_next, walk_right_next} = 2'b01; // Walk right\n    else if (bump_right)\n        {walk_left_next, walk_right_next} = 2'b10; // Walk left\n    else\n        {walk_left_next, walk_right_next} = {walk_left, walk_right}; // Maintain current direction\nend\n\nassign walk_left = walk_left_next;\nassign walk_right = walk_right_next;\n\nendmodule"}
{"task_id": "circuit1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    output q\n);\n    // q is high only when both a and b are high\n    assign q = a & b;\nendmodule"}
{"task_id": "7458", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "module top_module(\n    input p1a, \n    input p1b, \n    input p1c, \n    input p1d,\n    input p1e,\n    input p1f,\n    output p1y, \n    input p2a, \n    input p2b, \n    input p2c, \n    input p2d, \n    output p2y\n);\n    // AND gates for p1y\n    wire p1_and1, p1_and2;\n    assign p1_and1 = p1a & p1b & p1c;\n    assign p1_and2 = p1d & p1e & p1f;\n\n    // OR gate for p1y\n    assign p1y = p1_and1 | p1_and2;\n\n    // AND gates for p2y\n    wire p2_and1, p2_and2;\n    assign p2_and1 = p2a & p2b;\n    assign p2_and2 = p2c & p2d;\n\n    // OR gate for p2y\n    assign p2y = p2_and1 | p2_and2;\n\nendmodule"}
{"task_id": "2014_q3c", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input x,\n    input [2:0] y,\n    output reg Y0,\n    output reg z\n);\n\nreg [2:0] next_state;\n\nalways @(posedge clk) begin\n    case(y)\n        3'b000: next_state <= (x == 1'b0) ? 3'b000 : 3'b001;\n        3'b001: next_state <= (x == 1'b0) ? 3'b001 : 3'b100;\n        3'b010: next_state <= (x == 1'b0) ? 3'b010 : 3'b001;\n        3'b011: next_state <= (x == 1'b0) ? 3'b001 : 3'b010;\n        3'b100: next_state <= (x == 1'b0) ? 3'b011 : 3'b100;\n        default: next_state <= 3'b000;\n    endcase\nend\n\nalways @(posedge clk) begin\n    case(y)\n        3'b001, 3'b100: z <= 1'b1;\n        default: z <= 1'b0;\n    endcase\nend\n\nalways @(posedge clk) begin\n    case(next_state)\n        3'b000, 3'b001, 3'b010: Y0 <= 1'b0;\n        default: Y0 <= 1'b1;\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a 2-input NOR gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    output logic out\n);\n    assign out = ~(in1 | in2);\nendmodule"}
{"task_id": "wire4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "module top_module (\n    input a,\n    input b,\n    input c,\n    output w,\n    output x,\n    output y,\n    output z\n);\n    // Assignments for the outputs based on inputs\n    assign w = a;\n    assign x = b;\n    assign y = b;\n    assign z = c;\nendmodule"}
{"task_id": "m2014_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input clk,\n    input d,\n    input ar,\n    output logic q\n);\n    always_ff @(posedge clk or posedge ar) begin\n        if (ar)\n            q <= 1'b0;\n        else\n            q <= d;\n    end\nendmodule"}
{"task_id": "always_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "module top_module (\n    input [2:0] sel,\n    input [3:0] data0,\n    input [3:0] data1,\n    input [3:0] data2,\n    input [3:0] data3,\n    input [3:0] data4,\n    input [3:0] data5,\n    output reg [3:0] out\n);\n    always @(*) begin\n        case(sel)\n            3'b000: out = data0;\n            3'b001: out = data1;\n            3'b010: out = data2;\n            3'b011: out = data3;\n            3'b100: out = data4;\n            3'b101: out = data5;\n            default: out = 4'b0000;\n        endcase\n    end\nendmodule"}
{"task_id": "timer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "module top_module(\n    input clk, \n    input load, \n    input [9:0] data, \n    output reg tc\n);\n    // Internal counter to keep track of countdown\n    reg [9:0] counter;\n\n    // Always block to update counter and tc based on load signal\n    always @(posedge clk) begin\n        if (load) begin\n            counter <= data; // Load counter with new value\n            tc <= 0; // Reset terminal count signal\n        end else if (counter > 0) begin\n            counter <= counter - 1'b1; // Decrement counter\n        end\n        tc <= (counter == 10'd0); // Assert tc when counter reaches 0\n    end\nendmodule"}
{"task_id": "review2015_fsmseq", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg start_shifting);\n    \n    localparam [3:0] S0 = 4'd0, S1 = 4'd1, S2 = 4'd2, S3 = 4'd3, S4 = 4'd4;\n    reg [3:0] state, next_state;\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= S0;\n        else\n            state <= next_state;\n    end\n    \n    always @(*) begin\n        case (state)\n            S0: next_state = data ? S1 : S0;\n            S1: next_state = data ? S2 : S0;\n            S2: next_state = data ? S3 : S0;\n            S3: next_state = data ? S4 : S0;\n            S4: next_state = S4; // Stay in S4 when sequence is found\n            default: next_state = S0;\n        endcase\n    end\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            start_shifting <= 1'b0;\n        else if (state == S4)\n            start_shifting <= 1'b1;\n    end\n    \nendmodule"}
{"task_id": "dff8r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        q <= 8'b0;\n    else\n        q <= d;\nend\n\nendmodule"}
{"task_id": "edgedetect2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] anyedge);\n\n    always @(posedge clk) begin\n        anyedge <= (in != in[1:0]);\n    end\n\nendmodule"}
{"task_id": "count1to10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nMake a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'd1;\n        else if (q == 4'd10)\n            q <= 4'd1;\n        else\n            q <= q + 1'b1;\n    end\n\nendmodule"}
{"task_id": "circuit9", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "module top_module (\n    input clk,\n    input a, \n    output reg [2:0] q\n);\n\nalways @(posedge clk) begin\n    if (a)\n        q <= 4;\n    else begin\n        if (q == 6)\n            q <= 0;\n        else\n            q <= q + 1;\n    end\nend\n\nendmodule"}
{"task_id": "lfsr5", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [4:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 5'b00001; // Reset to 1\n        else\n            q <= {q[3:0], q[4] ^ q[2]}; // Galois LFSR update\n    end\n\nendmodule"}
{"task_id": "bugs_addsubz", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "module top_module (\n    input do_sub,\n    input [7:0] a,\n    input [7:0] b,\n    output reg [7:0] out,\n    output reg result_is_zero\n);\n    always @(*) begin\n        if (do_sub)\n            out = a - b;\n        else\n            out = a + b;\n\n        result_is_zero = (out == 8'd0);\n    end\nendmodule"}
{"task_id": "m2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n    logic a, b, c;\n\n    // Intermediate logic for simplification\n    assign a = x[3] & (~x[1] | x[4]);\n    assign b = x[2] & (~x[3] | ~x[1] | x[4]);\n    assign c = x[1] & (~x[2] | ~x[4]);\n\n    // Final output\n    assign f = a | b | c;\n\nendmodule"}
{"task_id": "bugs_case", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "module top_module (\n    input [7:0] code,\n    output reg [3:0] out,\n    output reg valid\n);\nalways @(*) begin\n    case(code)\n        8'h45: {out, valid} = 4'd0;\n        8'h16: {out, valid} = 4'd1;\n        8'h1e: {out, valid} = 4'd2;\n        8'h26: {out, valid} = 4'd3;\n        8'h25: {out, valid} = 4'd4;\n        8'h2e: {out, valid} = 4'd5;\n        8'h36: {out, valid} = 4'd6;\n        8'h3d: {out, valid} = 4'd7;\n        8'h3e: {out, valid} = 4'd8;\n        8'h46: {out, valid} = 4'd9;\n        default: {out, valid} = 2'b00;\n    endcase\nend\nendmodule"}
{"task_id": "vectorr", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven an 8-bit input vector [7:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [7:0] out\n);\n    assign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\nendmodule"}
{"task_id": "kmap3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output reg out\n);\nreg [1:0] ab, cd;\n\nalways @(*) begin\n    ab = {a, b};\n    cd = {c, d};\n    \n    case({cd, ab})\n        4'b0000, 4'b0110, 4'b1000, 4'b1100: out = 1'b0; // 0\n        4'b0011, 4'b0111, 4'b1011, 4'b1111: out = 1'b1; // 1\n        default: out = 1'bX; // don't care\n    endcase\nend\n\nendmodule"}
{"task_id": "review2015_shiftcount", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input shift_ena,\n    input count_ena,\n    input data,\n    output reg [3:0] q);\n    \n    always @(posedge clk) begin\n        if (shift_ena) begin\n            q <= {data, q[3:1]};\n        end else if (count_ena) begin\n            q <= q - 1'b1;\n        end\n    end\nendmodule"}
{"task_id": "wire", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module with one input and one output that behaves like a wire.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "module top_module(\n    input in,\n    output out\n);\n    assign out = in;\nendmodule"}
{"task_id": "review2015_fsmshift", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg shift_ena\n);\n\nreg [1:0] state, next_state;\n\nparameter S0 = 2'b00, S1 = 2'b01, S2 = 2'b10, S3 = 2'b11;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= S0;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case(state)\n        S0: next_state = S1;\n        S1: next_state = S2;\n        S2: next_state = S3;\n        S3: next_state = S0;\n        default: next_state = S0;\n    endcase\nend\n\nalways @(*) begin\n    case(state)\n        S0: shift_ena = 1'b1;\n        S1: shift_ena = 1'b1;\n        S2: shift_ena = 1'b1;\n        S3: shift_ena = 1'b0;\n        default: shift_ena = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "count15", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'b0000;\n        else\n            q <= q + 1'b1;\n    end\n\nendmodule"}
{"task_id": "always_if", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel_b1,\n    input sel_b2,\n    output out_assign,\n    output reg out_always\n);\n\n    // Using assign statement\n    assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\n    // Using procedural if statement\n    always @(*) begin\n        if (sel_b1 & sel_b2)\n            out_always = b;\n        else\n            out_always = a;\n    end\n\nendmodule"}
{"task_id": "kmap1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    input c,\n    output out\n);\n    assign out = ~a & ~c | ~a & b | b & c;\nendmodule"}
{"task_id": "2013_q2afsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input [3:1] r,\n    output [3:1] g\n);\n    \n    // State encoding\n    localparam [1:0] A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n    \n    // State register\n    reg [1:0] state, next_state;\n    \n    // Output register\n    reg [3:1] grant;\n    \n    // State transition logic\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            state <= A;\n        else\n            state <= next_state;\n    end\n    \n    // Output logic\n    always @(*) begin\n        case (state)\n            A: grant = 4'b000;\n            B: grant = 4'b001;\n            C: grant = 4'b010;\n            D: grant = 4'b100;\n            default: grant = 4'b000;\n        endcase\n    end\n    \n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = (r[1]) ? B : (r[2]) ? C : (r[3]) ? D : A;\n            B: next_state = (r[1]) ? B : A;\n            C: next_state = (r[2]) ? C : A;\n            D: next_state = D; // D is a dead-end state\n            default: next_state = A;\n        endcase\n    end\n    \n    // Output assignment\n    assign g = grant;\nendmodule"}
{"task_id": "count10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output reg [3:0] q);\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            q <= 4'b0000; // Reset to 0\n        else if (q == 4'b1001) // Count to 9\n            q <= 4'b0000; // Reset to 0\n        else\n            q <= q + 1'b1; // Increment by 1\n    end\nendmodule"}
{"task_id": "fsm_ps2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input [7:0] in,\n    input reset,\n    output reg done\n);\n    reg [2:0] count; // Byte counter\n    reg [7:0] message[2:0]; // Stores the message bytes\n    reg [2:0] state; // FSM state\n\n    // State definitions\n    localparam IDLE = 3'b000,\n               SEARCH = 3'b001,\n               MESSAGE = 3'b010;\n    \n    // FSM always block\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= IDLE;\n            count <= 3'b000;\n            done <= 1'b0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    if (in[3]) begin\n                        state <= SEARCH;\n                        message[0] <= in;\n                    end\n                end\n                SEARCH: begin\n                    if (in[3]) begin\n                        state <= MESSAGE;\n                        message[0] <= in;\n                        count <= 1;\n                    end\n                end\n                MESSAGE: begin\n                    if (count < 2) begin\n                        message[count+1] <= in;\n                        count <= count + 1;\n                    end else begin\n                        state <= IDLE;\n                        done <= 1'b1; // Signal done after 3 bytes\n                    end\n                end\n            endcase\n        end\n    end\n\nendmodule"}
{"task_id": "mux2to1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input sel,\n    output out\n);\n   assign out = sel ? b : a;\nendmodule"}
{"task_id": "gates4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and = &in; // 4-input AND gate\n    assign out_or = |in;  // 4-input OR gate\n    assign out_xor = ^in; // 4-input XOR gate\nendmodule"}
{"task_id": "2014_q3bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input x,\n    output reg z\n);\n    reg [2:0] y;\n\n    always @(posedge clk) begin\n        if (reset)\n            y <= 3'b000;\n        else\n            case (y)\n                3'b000: y <= (x) ? 3'b001 : 3'b000;\n                3'b001: y <= (x) ? 3'b100 : 3'b001;\n                3'b010: y <= (x) ? 3'b001 : 3'b010;\n                3'b011: y <= (x) ? 3'b100 : 3'b010;\n                3'b100: y <= (x) ? 3'b100 : 3'b011;\n                default: y <= 3'b000;\n            endcase\n    end\n\n    always @(posedge clk) begin\n        case (y)\n            3'b011, 3'b100: z <= 1'b1;\n            default: z <= 1'b0;\n        endcase\n    end\nendmodule"}
{"task_id": "2013_q2bfsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input x,\n    input y,\n    output f,\n    output g\n);\n\nreg [1:0] state, next_state;\nreg [2:0] x_seq;\nreg [1:0] y_count;\n\nparameter A = 2'b00;\nparameter B = 2'b01;\nparameter C = 2'b10;\nparameter D = 2'b11;\n\nalways @(posedge clk or negedge resetn) begin\n    if (!resetn) begin\n        state <= A;\n        f <= 1'b0;\n        g <= 1'b0;\n        x_seq <= 3'b000;\n        y_count <= 2'b00;\n    end else begin\n        state <= next_state;\n        f <= (state == B);\n        g <= (state == D);\n        if (state == A) begin\n            x_seq <= {x_seq[1:0], x};\n            y_count <= 2'b00;\n        end else if (state == C) begin\n            y_count <= y_count + 1'b1;\n        end\n    end\nend\n\nalways @(*) begin\n    case (state)\n        A: next_state = (resetn) ? B : A;\n        B: next_state = (x_seq == 3'b101) ? C : B;\n        C: next_state = (y_count < 2) ? C : D;\n        D: next_state = D;\n        default: next_state = A;\n    endcase\nend\n\nendmodule"}
{"task_id": "dff8p", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input reset,\n    output reg [7:0] q);\n\n    always @(negedge clk or posedge reset) begin\n        if (reset)\n            q <= 8'h34;\n        else\n            q <= d;\n    end\n\nendmodule"}
{"task_id": "reduction", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nParity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output parity\n);\n    assign parity = ^in;\nendmodule"}
{"task_id": "fsm3comb", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [1:0] state,\n    output reg [1:0] next_state,\n    output out\n);\n    \n    always @(*) begin\n        case(state)\n            2'b00: begin next_state = (in == 1'b0) ? 2'b00 : 2'b01; out = 1'b0; end\n            2'b01: begin next_state = (in == 1'b0) ? 2'b10 : 2'b01; out = 1'b0; end\n            2'b10: begin next_state = (in == 1'b0) ? 2'b00 : 2'b11; out = 1'b0; end\n            2'b11: begin next_state = (in == 1'b0) ? 2'b10 : 2'b01; out = 1'b1; end\n            default: begin next_state = 2'b00; out = 1'b0; end\n        endcase\n    end\n\nendmodule"}
{"task_id": "mt2015_q4b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "module top_module(\n    input x,\n    input y,\n    output z);\n    \n    // State variables\n    reg state;\n    reg next_state;\n    \n    // Output logic\n    assign z = (state == 1'b0) ? 1'b1 : 1'b0;\n    \n    // State transitions\n    always @(posedge x or posedge y) begin\n        if (x) begin\n            state <= 1'b0;\n        end else if (y) begin\n            state <= 1'b1;\n        end\n    end\n    \nendmodule"}
{"task_id": "2012_q2fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input w,\n    output z\n);\n\n    // State encoding\n    localparam [2:0] A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n\n    reg [2:0] next_state, current_state;\n\n    // State transition logic\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            current_state <= A;\n        else\n            current_state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (current_state)\n            A: next_state = w ? B : A;\n            B: next_state = w ? C : D;\n            C: next_state = w ? E : D;\n            D: next_state = w ? F : A;\n            E: next_state = w ? E : D;\n            F: next_state = w ? C : D;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    assign z = (current_state == E) || (current_state == F);\n\nendmodule"}
{"task_id": "dff16e", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input resetn,\n    input [1:0] byteena,\n    input [15:0] d,\n    output reg [15:0] q);\n\n    always @(posedge clk or negedge resetn) begin\n        if (!resetn)\n            q <= 16'b0;\n        else begin\n            if (byteena[1])\n                q[15:8] <= d[15:8];\n            if (byteena[0])\n                q[7:0] <= d[7:0];\n        end\n    end\n\nendmodule"}
{"task_id": "edgedetect", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] in,\n    output reg [7:0] pedge\n);\n\nreg [7:0] in_prev;\n\nalways @(posedge clk) begin\n    in_prev <= in;\n    pege <= in & ~in_prev;\nend\n\nendmodule"}
{"task_id": "circuit8", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "module top_module (\n    input clock,\n    input a, \n    output reg p,\n    output reg q\n);\n\nalways @(posedge clock) begin\n    // p is set to 1 when a is 1 on the rising edge of clock\n    if (a) \n        p <= 1'b1;\n    else \n        p <= 1'b0;\n    \n    // q is set to p on the rising edge of clock\n    q <= p;\nend\n\nendmodule"}
{"task_id": "rule90", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nRule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [511:0] data,\n    output reg [511:0] q);\n\n    always @(posedge clk) begin\n        if (load)\n            q <= data;\n        else\n            q <= {q[510:0], 1'b0} ^ {1'b0, q[510:0], 1'b0};\n    end\nendmodule"}
{"task_id": "mt2015_eq2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "module top_module(\n    input [1:0] A,\n    input [1:0] B,\n    output z);\n\n    assign z = (A == B);\n\nendmodule"}
{"task_id": "gatesv100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nYou are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output [98:0] out_both,\n    output [99:1] out_any,\n    output [99:0] out_different\n);\n    \n    genvar i;\n    generate\n        for (i = 0; i < 99; i = i + 1) begin : both_gen\n            assign out_both[i] = in[i] & in[i+1];\n        end\n        assign out_both[98] = in[98] & in[99]; // Last bit\n    endgenerate\n\n    generate\n        for (i = 0; i < 99; i = i + 1) begin : any_gen\n            assign out_any[i+1] = in[i] | in[i+1];\n        end\n        assign out_any[99] = in[99] | in[0]; // Last bit\n    endgenerate\n\n    generate\n        for (i = 0; i < 99; i = i + 1) begin : diff_gen\n            assign out_different[i] = in[i] != in[i+1];\n        end\n        assign out_different[99] = in[99] != in[0]; // Last bit\n    endgenerate\n\nendmodule"}
{"task_id": "m2014_q4a", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a D latch using an always block.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "module top_module (\n    input d,\n    input ena,\n    output logic q\n);\nalways @(posedge ena) begin\n    q <= d;\nend\nendmodule"}
{"task_id": "mux256to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "module top_module (\n    input [1023:0] in,\n    input [7:0] sel,\n    output [3:0] out\n);\n    wire [3:0] selected;\n\n    assign selected = in[(sel * 4 + 3) -: 4];\n    assign out = selected;\n\nendmodule"}
{"task_id": "mux9to1v", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "module top_module (\n    input [15:0] a,\n    input [15:0] b,\n    input [15:0] c,\n    input [15:0] d,\n    input [15:0] e,\n    input [15:0] f,\n    input [15:0] g,\n    input [15:0] h,\n    input [15:0] i,\n    input [3:0] sel,\n    output logic [15:0] out\n);\n    always @(*) begin\n        case (sel)\n            4'b0000: out = a;\n            4'b0001: out = b;\n            4'b0010: out = c;\n            4'b0011: out = d;\n            4'b0100: out = e;\n            4'b0101: out = f;\n            4'b0110: out = g;\n            4'b0111: out = h;\n            4'b1000: out = i;\n            default: out = 16'b1;\n        endcase\n    end\nendmodule"}
{"task_id": "vectorgates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "module top_module(\n    input [2:0] a, \n    input [2:0] b, \n    output [2:0] out_or_bitwise,\n    output out_or_logical,\n    output [5:0] out_not\n);\n    assign out_or_bitwise = a | b; // Bitwise OR\n    assign out_or_logical = a | b; // Logical OR (same as bitwise OR for single bits)\n    assign out_not = {~b, ~a}; // Invert both and concatenate\nendmodule"}
{"task_id": "fsm3onehot", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "module top_module (\n    input in,\n    input [3:0] state,\n    output reg [3:0] next_state,\n    output out\n);\n    always @(*) begin\n        case(state)\n            4'b0001: next_state = in ? 4'b0001 : 4'b0010;\n            4'b0010: next_state = in ? 4'b0010 : 4'b0100;\n            4'b0100: next_state = in ? 4'b1000 : 4'b0001;\n            4'b1000: next_state = in ? 4'b0100 : 4'b0010;\n            default: next_state = 4'b0001;\n        endcase\n    end\n\n    assign out = (state == 4'b1000);\nendmodule"}
{"task_id": "conditional", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "module top_module (\n    input [7:0] a,\n    input [7:0] b,\n    input [7:0] c,\n    input [7:0] d,\n    output reg [7:0] min\n);\n    always @* begin\n        min = a;\n        if (b < min) min = b;\n        if (c < min) min = c;\n        if (d < min) min = d;\n    end\nendmodule"}
{"task_id": "gates", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output out_and,\n    output out_or,\n    output out_xor,\n    output out_nand,\n    output out_nor,\n    output out_xnor,\n    output out_anotb\n);\n\n    // (1) out_and: a and b\n    assign out_and = a & b;\n    // (2) out_or: a or b\n    assign out_or = a | b;\n    // (3) out_xor: a xor b\n    assign out_xor = a ^ b;\n    // (4) out_nand: a nand b\n    assign out_nand = ~(a & b);\n    // (5) out_nor: a nor b\n    assign out_nor = ~(a | b);\n    // (6) out_xnor: a xnor b\n    assign out_xnor = ~(a ^ b);\n    // (7) out_anotb: a and-not b\n    assign out_anotb = a & ~b;\n\nendmodule"}
{"task_id": "kmap2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "module top_module (\n    input a, \n    input b,\n    input c,\n    input d,\n    output out\n);\nwire out_wire;\n\nassign out_wire = (a & ~b & ~c & d) | (~a & b & ~c & d) | (~a & b & c & ~d) | (a & b & c & d) | (a & b & ~c & ~d);\n\nassign out = out_wire;\n\nendmodule"}
{"task_id": "2014_q3fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input s,\n    input w,\n    output reg z\n);\n\nreg [1:0] state, next_state;\nlocalparam A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= A;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        A: next_state = s ? B : A;\n        B: next_state = C;\n        C: next_state = w ? D : B;\n        D: next_state = w ? A : C;\n        default: next_state = A;\n    endcase\nend\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        z <= 1'b0;\n    else if (state == D)\n        z <= 1'b1;\n    else\n        z <= 1'b0;\nend\n\nendmodule"}
{"task_id": "vector4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nOne common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "module top_module (\n    input [7:0] in,\n    output [31:0] out\n);\n    assign out = {{24{in[7]}}, in};\nendmodule"}
{"task_id": "m2014_q4k", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement a shift register with four D flops. Reset is active-low synchronous resettable.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input resetn,\n    input in,\n    output out\n);\n\nreg [3:0] shift_reg;\n\nalways @(posedge clk or negedge resetn) begin\n    if (!resetn)\n        shift_reg <= 4'b0000;\n    else\n        shift_reg <= {shift_reg[2:0], in};\nend\n\nassign out = shift_reg[3];\n\nendmodule"}
{"task_id": "always_case2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "module top_module (\n    input [3:0] in,\n    output reg [1:0] pos\n);\nalways @* begin\n    casez (in)\n        4'b1??? : pos = 2'd0; // Most significant bit is 1\n        4'b01?? : pos = 2'd1; // Second bit is 1\n        4'b001? : pos = 2'd2; // Third bit is 1\n        4'b0001 : pos = 2'd3; // Least significant bit is 1\n        default : pos = 2'd0; // Default case when input is zero\n    endcase\nend\nendmodule"}
{"task_id": "fsm2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input areset,\n    output out\n);\n\nreg [1:0] state, next_state;\n\n// State encoding: OFF = 2'b00, ON = 2'b01\nparameter OFF = 2'b00;\nparameter ON = 2'b01;\n\n// State transitions\nalways @(*) begin\n    if (areset)\n        next_state = OFF;\n    else if (state == OFF && j)\n        next_state = ON;\n    else if (state == ON && k)\n        next_state = OFF;\n    else\n        next_state = state;\nend\n\n// State register\nalways @(posedge clk or posedge areset) begin\n    if (areset)\n        state <= OFF;\n    else\n        state <= next_state;\nend\n\n// Output logic\nassign out = (state == ON) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "m2014_q4i", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 0 (or logic low).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput out);\n", "completion": "module top_module(\n    output out);\n    // Always drive output to 0\n    assign out = 1'b0;\nendmodule"}
{"task_id": "step_one", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a circuit with no inputs and one output. That output should always drive 1 (or logic high).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\toutput one);\n", "completion": "module top_module(\n    output one);\n    assign one = 1'b1;\nendmodule"}
{"task_id": "vector100r", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven a 100-bit input vector [99:0], reverse its bit ordering.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output reg [99:0] out\n);\n    always @(*) begin\n        out = {in[99], in[98], in[97], in[96], in[95], in[94], in[93], in[92], in[91], in[90],\n               in[89], in[88], in[87], in[86], in[85], in[84], in[83], in[82], in[81], in[80],\n               in[79], in[78], in[77], in[76], in[75], in[74], in[73], in[72], in[71], in[70],\n               in[69], in[68], in[67], in[66], in[65], in[64], in[63], in[62], in[61], in[60],\n               in[59], in[58], in[57], in[56], in[55], in[54], in[53], in[52], in[51], in[50],\n               in[49], in[48], in[47], in[46], in[45], in[44], in[43], in[42], in[41], in[40],\n               in[39], in[38], in[37], in[36], in[35], in[34], in[33], in[32], in[31], in[30],\n               in[29], in[28], in[27], in[26], in[25], in[24], in[23], in[22], in[21], in[20],\n               in[19], in[18], in[17], in[16], in[15], in[14], in[13], in[12], in[11], in[10],\n               in[9], in[8], in[7], in[6], in[5], in[4], in[3], in[2], in[1], in[0]};\n    end\nendmodule"}
{"task_id": "m2014_q4d", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    output logic out\n);\n    logic d;\n\n    // XOR gate to generate D input for flip-flop\n    assign d = in ^ out;\n\n    // D flip-flop\n    always @(posedge clk) begin\n        out <= d;\n    end\n\nendmodule"}
{"task_id": "shift4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "module top_module(\n    input clk,\n    input areset,\n    input load,\n    input ena,\n    input [3:0] data,\n    output reg [3:0] q\n);\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            q <= 4'b0000;  // Reset to zero\n        else if (load)\n            q <= data;    // Load data\n        else if (ena)\n            q <= {1'b0, q[3:1]};  // Right shift\n    end\nendmodule"}
{"task_id": "truthtable1", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "module top_module (\n    input x3,\n    input x2,\n    input x1,\n    output f\n);\n\nassign f = (x2 & ~x1) | (x3 & x1);\n\nendmodule"}
{"task_id": "dff8ar", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "module top_module(\n    input clk,\n    input [7:0] d,\n    input areset,\n    output reg [7:0] q);\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            q <= 8'b0;  // Reset output to 0\n        else\n            q <= d;    // Update output with input d\n    end\n\nendmodule"}
{"task_id": "gates100", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "module top_module (\n    input [99:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and = &in; // 100-input AND gate\n    assign out_or = |in; // 100-input OR gate\n    assign out_xor = ^in; // 100-input XOR gate\nendmodule"}
{"task_id": "hadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    output sum,\n    output cout\n);\n    // Sum is the XOR of inputs a and b\n    assign sum = a ^ b;\n    // Carry-out is the AND of inputs a and b\n    assign cout = a & b;\nendmodule"}
{"task_id": "always_if2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "module top_module (\n    input cpu_overheated,\n    output reg shut_off_computer,\n    input arrived,\n    input gas_tank_empty,\n    output reg keep_driving\n);\n\n    always @(*) begin\n        if (cpu_overheated)\n            shut_off_computer = 1'b1;\n        else\n            shut_off_computer = 1'b0;\n    end\n\n    always @(*) begin\n        if (~arrived)\n            keep_driving = ~gas_tank_empty;\n        else\n            keep_driving = 1'b0;\n    end\n\nendmodule"}
{"task_id": "fsm2s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input j,\n    input k,\n    input reset,\n    output out\n);\n\nreg [1:0] state, next_state;\n\n// State transition logic\nalways @(*) begin\n    case (state)\n        2'b00: next_state = (j) ? 2'b01 : 2'b00; // OFF to ON if j=1, else stay OFF\n        2'b01: next_state = (k) ? 2'b00 : 2'b01; // ON to OFF if k=1, else stay ON\n        default: next_state = 2'b00; // Reset to OFF\n    endcase\nend\n\n// State register with synchronous reset\nalways @(posedge clk) begin\n    if (reset)\n        state <= 2'b00; // OFF\n    else\n        state <= next_state;\nend\n\n// Output logic\nassign out = (state == 2'b01); // ON when state is 2'b01\n\nendmodule"}
{"task_id": "vector3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nGiven several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "module top_module (\n    input [4:0] a,\n    input [4:0] b,\n    input [4:0] c,\n    input [4:0] d,\n    input [4:0] e,\n    input [4:0] f,\n    output [7:0] w,\n    output [7:0] x,\n    output [7:0] y,\n    output [7:0] z\n);\n    \n    wire [31:0] combined;\n    assign combined = {a, b, c, d, e, f, 2'b11}; // Concatenate inputs with two 1s\n\n    assign w = combined[31:24]; // Assign 8 bits to w\n    assign x = combined[23:16]; // Assign 8 bits to x\n    assign y = combined[15:8];  // Assign 8 bits to y\n    assign z = combined[7:0];   // Assign 8 bits to z\n\nendmodule"}
{"task_id": "circuit2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "module top_module (\n    input a, \n    input b, \n    input c, \n    input d,\n    output q\n);\n    assign q = ~(a & b & c & d);\nendmodule"}
{"task_id": "andgate", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a module that implements an AND gate.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "module top_module(\n    input a, \n    input b,\n    output out\n);\n  assign out = a & b;\nendmodule"}
{"task_id": "fsm1s", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output out\n);\n    \n    reg state, next_state;\n\n    // State encoding: B=1, A=0\n    parameter B = 1'b1;\n    parameter A = 1'b0;\n\n    // State register\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= B; // Reset to B\n        else\n            state <= next_state; // Update state\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            B: next_state = in ? B : A; // B -> B (in=1), B -> A (in=0)\n            A: next_state = in ? A : B; // A -> A (in=1), A -> B (in=0)\n            default: next_state = B; // Default state\n        endcase\n    end\n\n    // Output logic (Moore machine)\n    always @(*) begin\n        out = state; // B (out=1), A (out=0)\n    end\n\nendmodule"}
{"task_id": "fadd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "module top_module (\n    input a,\n    input b,\n    input cin,\n    output cout,\n    output sum\n);\n    wire internal_sum;\n    \n    // Sum calculation using XOR for both inputs and carry-in\n    assign internal_sum = a ^ b ^ cin;\n    // Carry-out calculation using AND and OR for carry generation\n    assign cout = (a & b) | (b & cin) | (a & cin);\n    // Final sum output\n    assign sum = internal_sum;\nendmodule"}
{"task_id": "m2014_q4g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nImplement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "module top_module (\n    input in1,\n    input in2,\n    input in3,\n    output logic out\n);\n    logic xnor_out;\n\n    // XNOR gate\n    assign xnor_out = ~(in1 ^ in2);\n\n    // XOR gate with XNOR output and input 'in3'\n    assign out = xnor_out ^ in3;\n\nendmodule"}
{"task_id": "ece241_2014_q3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nFor the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "module top_module (\n    input c,\n    input d,\n    output [3:0] mux_in\n);\n    wire mux2_out0, mux2_out1;\n\n    // 2-to-1 multiplexer for ab=00, 01\n    mux2_00_01_muxmux2 (\n        .a(c),\n        .b(d),\n        .s(d),\n        .y(mux2_out0)\n    );\n\n    // 2-to-1 multiplexer for ab=11, 10\n    mux2_11_10_mux (\n        .a(c),\n        .b(d),\n        .s(c),\n        .y(mux2_out1)\n    );\n\n    // Assign outputs based on K-map values\n    assign mux_in[0] = 0;  // ab=00\n    assign mux_in[1] = mux2_out0;  // ab=01\n    assign mux_in[2] = mux2_out1;  // ab=11\n    assign mux_in[3] = 1;  // ab=10\n\nendmodule\n\nmodule mux2_00_01_mux (\n    input a,\n    input b,\n    input s,\n    output y\n);\n    assign y = s ? b : a;\nendmodule\n\nmodule mux2_11_10_mux (\n    input a,\n    input b,\n    input s,\n    output y\n);\n    assign y = s ? a : b;\nendmodule"}
{"task_id": "ece241_2014_q5b", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input x,\n    output z\n);\n\n    reg [1:0] state, next_state;\n    wire [1:0] state_reg;\n    localparam A = 2'b00;\n    localparam B = 2'b01;\n\n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= A;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            A: next_state = x ? B : A;\n            B: next_state = B;\n            default: next_state = A;\n        endcase\n    end\n\n    // Output logic\n    assign state_reg = state;\n    assign z = (state_reg == B) || (state_reg == A && x);\n\nendmodule"}
{"task_id": "circuit10", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThis is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        \nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "module top_module (\n    input clk,\n    input a,\n    input b,\n    output q,\n    output state\n);\n\nreg q_reg, state_reg;\n\nalways @(posedge clk) begin\n    if (a && b) begin\n        q_reg <= 1'b0;\n        state_reg <= 1'b1;\n    end else if (a) begin\n        q_reg <= 1'b1;\n        state_reg <= 1'b0;\n    end\nend\n\nassign q = q_reg;\nassign state = state_reg;\n\nendmodule"}
{"task_id": "2012_q1g", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nConsider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "module top_module (\n    input [4:1] x,\n    output logic f\n);\n    // Implementing the function f from the Karnaugh map\n    assign f = x[4] ^ x[3];\nendmodule"}
{"task_id": "fsm_hdlc", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nSynchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input in,\n    output disc,\n    output flag,\n    output err\n);\n\nlocalparam [4:0] S0 = 5'b00000,\n                 S1 = 5'b00001,\n                 S2 = 5'b00010,\n                 S3 = 5'b00011,\n                 S4 = 5'b00100,\n                 S5 = 5'b00101,\n                 S6 = 5'b00110,\n                 S7 = 5'b00111,\n                 S8 = 5'b01000;\n\nreg [4:0] state, next_state;\nreg [4:0] temp;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= S0;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case (state)\n        S0: next_state = in ? S1 : S0;\n        S1: next_state = in ? (temp == 5'b00001 ? S6 : S2) : S0;\n        S2: next_state = in ? S3 : S0;\n        S3: next_state = in ? S4 : S0;\n        S4: next_state = in ? S5 : S0;\n        S5: next_state = in ? S6 : S0;\n        S6: next_state = in ? S7 : S0;\n        S7: next_state = in ? S8 : S0;\n        S8: next_state = in ? S1 : S0;\n        default: next_state = S0;\n    endcase\nend\n\nalways @(posedge clk) begin\n    case (state)\n        S6: begin\n            disc <= 1'b1;\n            flag <= 1'b0;\n            err <= 1'b0;\n        end\n        S8: begin\n            disc <= 1'b0;\n            flag <= 1'b1;\n            err <= 1'b0;\n        end\n        default: begin\n            disc <= 1'b0;\n            flag <= 1'b0;\n            err <= 1'b0;\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (state == S7)\n        err <= 1'b1;\n    else\n        err <= 1'b0;\nend\n\nalways @(*) begin\n    if (state == S1)\n        temp = in ? 5'b00001 : 5'b00000;\n    else\n        temp = 5'b00000;\nend\n\nendmodule"}
{"task_id": "review2015_fancytimer", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "module top_module(\n    input wire clk,\n    input wire reset,\n    input wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack\n);\n    localparam [3:0] SEARCH = 4'd0, LOAD = 4'd1, COUNT = 4'd2, DONE = 4'd3;\n    reg [3:0] state, next_state;\n    reg [3:0] delay, counter;\n    reg [3:0] start_pattern [3:0];\n    reg [3:4] shift_reg;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= SEARCH;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            SEARCH: begin\n                next_state = (shift_reg == 4'b1101) ? LOAD : SEARCH;\n                counting = 1'b0;\n                done = 1'b0;\n            end\n            LOAD: begin\n                next_state = COUNT;\n                counting = 1'b1;\n                done = 1'b0;\n            end\n            COUNT: begin\n                next_state = (counter == 1) ? DONE : COUNT;\n                counting = 1'b1;\n                done = 1'b0;\n            end\n            DONE: begin\n                next_state = (ack) ? SEARCH : DONE;\n                counting = 1'b0;\n                done = 1'b1;\n            end\n            default: next_state = SEARCH;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            shift_reg <= 4'b0000;\n            delay <= 4'b0000;\n            counter <= 4'b0000;\n        end else begin\n            case (state)\n                SEARCH: shift_reg <= {shift_reg[2:0], data};\n                LOAD: begin\n                    delay <= {shift_reg[3:0], data};\n                    counter <= delay + 4'b0001;\n                end\n                COUNT: begin\n                    if (counter == 4'b0001) counter <= delay + 4'b0001;\n                    else counter <= counter - 4'b0001;\n                end\n                DONE: counter <= 4'b0000;\n                default: counter <= counter;\n            endcase\n        end\n    end\n\n    assign count = counter;\n\nendmodule"}
{"task_id": "ece241_2013_q4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nA large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "module top_module (\n    input clk,\n    input reset,\n    input [3:1] s,\n    output reg fr3,\n    output reg fr2,\n    output reg fr1,\n    output reg dfr\n);\n\nreg [2:0] state;\nreg [2:0] next_state;\n\n// State encoding\nlocalparam LOW = 3'b000;\nlocalparam S1 = 3'b001;\nlocalparam S2 = 3'b010;\nlocalparam S3 = 3'b011;\nlocalparam HIGH = 3'b100;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= LOW;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case(state)\n        LOW: begin\n            fr3 = 1'b1;\n            fr2 = 1'b1;\n            fr1 = 1'b1;\n            dfr = 1'b0;\n        end\n        S1: begin\n            fr3 = 1'b0;\n            fr2 = 1'b1;\n            fr1 = 1'b1;\n            dfr = 1'b0;\n        end\n        S2: begin\n            fr3 = 1'b0;\n            fr2 = 1'b0;\n            fr1 = 1'b1;\n            dfr = 1'b0;\n        end\n        S3: begin\n            fr3 = 1'b0;\n            fr2 = 1'b0;\n            fr1 = 1'b0;\n            dfr = 1'b0;\n        end\n        HIGH: begin\n            fr3 = 1'b0;\n            fr2 = 1'b0;\n            fr1 = 1'b0;\n            dfr = 1'b0;\n        end\n        default: begin\n            fr3 = 1'b0;\n            fr2 = 1'b0;\n            fr1 = 1'b0;\n            dfr = 1'b0;\n        end\n    endcase\nend\n\nalways @(*) begin\n    case(s)\n        3'b111: next_state = HIGH;\n        3'b110: next_state = S3;\n        3'b100: next_state = S2;\n        3'b000: next_state = LOW;\n        default: next_state = state;\n    endcase\nend\n\nendmodule"}
{"task_id": "fsm_serial", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output done\n);\n    localparam [2:0] IDLE = 3'd0, START = 3'd1, DATA = 3'd2, STOP = 3'd3;\n    reg [2:0] state, next_state;\n    reg [7:0] data;\n    reg [2:0] bit_count;\n    reg data_valid;\n    reg [2:0] next_bit_count;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            IDLE: begin\n                next_state = in ? IDLE : START;\n                next_bit_count = 0;\n            end\n            START: begin\n                next_state = in ? DATA : IDLE;\n                next_bit_count = 1;\n            end\n            DATA: begin\n                next_state = (bit_count == 7) ? STOP : DATA;\n                next_bit_count = bit_count + 1;\n            end\n            STOP: begin\n                next_state = in ? IDLE : STOP;\n                next_bit_count = 0;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            data <= 8'b0;\n            data_valid <= 0;\n            bit_count <= 0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    data_valid <= 0;\n                    data <= 8'b0;\n                end\n                START: begin\n                    data_valid <= 0;\n                end\n                DATA: begin\n                    if (bit_count == 0)\n                        data <= {data[6:0], in};\n                    data_valid <= (bit_count == 7);\n                end\n                STOP: begin\n                    data_valid <= 0;\n                end\n                default: begin\n                    data_valid <= 0;\n                    data <= 8'b0;\n                end\n            endcase\n            bit_count <= next_bit_count;\n        end\n    end\n\n    assign done = data_valid;\n\nendmodule"}
{"task_id": "fsm_serialdata", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "module top_module (\n    input clk,\n    input in,\n    input reset,\n    output [7:0] out_byte,\n    output done\n);\n    localparam IDLE = 2'b00, START = 2'b01, DATA = 2'b10, STOP = 2'b11;\n    reg [1:0] state, next_state;\n    reg [7:0] data_reg;\n    reg data_valid;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= IDLE;\n            data_reg <= 8'b0;\n            data_valid <= 1'b0;\n            out_byte <= 8'b0;\n            done <= 1'b0;\n        end else begin\n            state <= next_state;\n            case (state)\n                IDLE: begin\n                    if (in == 1'b0) begin\n                        data_valid <= 1'b0;\n                        data_reg <= 8'b0;\n                        state <= START;\n                    end\n                end\n                START: begin\n                    if (in == 1'b1)\n                        state <= STOP;\n                end\n                DATA: begin\n                    data_reg <= {in, data_reg[7:1]};\n                    if (data_valid)\n                        state <= STOP;\n                end\n                STOP: begin\n                    if (in == 1'b1) begin\n                        data_valid <= 1'b1;\n                        out_byte <= data_reg;\n                        done <= 1'b1;\n                        state <= IDLE;\n                    end else begin\n                        state <= STOP;\n                    end\n                end\n            endcase\n        end\n    end\n\n    always @(*) begin\n        case (state)\n            IDLE: next_state = IDLE;\n            START: next_state = DATA;\n            DATA: next_state = DATA;\n            STOP: next_state = STOP;\n            default: next_state = IDLE;\n        endcase\n    end\nendmodule"}
{"task_id": "gshare", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "module top_module(\n    input clk,\n    input areset, \n\n    input predict_valid,\n    input [6:0] predict_pc,\n    output predict_taken, \n    output [6:0] predict_history,\n\n    input train_valid,\n    input train_taken,\n    input train_mispredicted,\n    input [6:0] train_history, \n    input [6:0] train_pc\n);\n\n    // 7-bit global branch history register\n    reg [6:0] global_history;\n\n    // 128-entry PHT with 2-bit counters\n    reg [7:0] pht [0:127];\n    parameter [1:0] PHT_INIT = 2'b00;\n    parameter [1:0] PHT_MAX = 2'b11;\n    parameter [1:0] PHT_MIN = 2'b00;\n\n    // Initialize PHT\n    initial begin\n        for (integer i = 0; i < 128; i = i + 1) begin\n            pht[i] = PHT_INIT;\n        end\n    end\n\n    // Update PHT on training\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            global_history <= 7'b0;\n        end else if (train_valid) begin\n            // Update PHT only if training is valid\n            if (train_mispredicted) begin\n                // Recover history on misprediction\n                global_history <= global_history ^ {7{1'b0}} ^ train_history;\n            end else begin\n                // Update global history\n                global_history <= global_history ^ ({7{1'b0}} ^ train_history);\n            end\n            // Train PHT\n            {pht[global_history ^ train_pc][1], pht[global_history ^ train_pc][0]} <=\n                (train_taken) ? (pht[global_history ^ train_pc] == PHT_MAX) ? PHT_MAX : pht[global_history ^ train_pc] + 1'b1 :\n                (pht[global_history ^ train_pc] == PHT_MIN) ? PHT_MIN : pht[global_history ^ train_pc] - 1'b1;\n        end\n    end\n\n    // Predict branch direction\n    always @(*) begin\n        predict_taken = (pht[global_history ^ predict_pc] > 2'b01);\n        predict_history = global_history;\n    end\n\nendmodule"}
{"task_id": "lemmings4", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n    // State encoding\n    localparam [3:0] WALK_LEFT  = 4'd0,\n                     WALK_RIGHT = 4'd1,\n                     FALLING    = 4'd2,\n                     DIGGING    = 4'd3,\n                     SPLATTERED = 4'd4;\n    reg [3:0] state, next_state;\n    reg [4:0] fall_counter;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n        if (state == FALLING)\n            fall_counter <= fall_counter + 1'b1;\n        else\n            fall_counter <= 5'd0;\n    end\n\n    always @(*) begin\n        next_state = state;\n        case (state)\n            WALK_LEFT:\n                if (bump_left) next_state = WALK_RIGHT;\n                else if (bump_right) next_state = WALK_LEFT;\n                else if (!ground) next_state = FALLING;\n                else if (dig) next_state = DIGGING;\n            WALK_RIGHT:\n                if (bump_right) next_state = WALK_LEFT;\n                else if (bump_left) next_state = WALK_RIGHT;\n                else if (!ground) next_state = FALLING;\n                else if (dig) next_state = DIGGING;\n            FALLING:\n                if (ground) next_state = WALK_LEFT;\n            DIGGING:\n                if (!ground) next_state = FALLING;\n            SPLATTERED:\n                next_state = SPLATTERED;\n        endcase\n        if (fall_counter >= 5'd20) next_state = SPLATTERED;\n    end\n\n    always @(*) begin\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        digging = 1'b0;\n\n        case (state)\n            WALK_LEFT: walk_left = 1'b1;\n            WALK_RIGHT: walk_right = 1'b1;\n            FALLING: aaah = 1'b1;\n            DIGGING: digging = 1'b1;\n        endcase\n    end\nendmodule"}
{"task_id": "review2015_fsm", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nWe want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack\n);\n    localparam [1:0] SEARCH = 2'd0, CAPTURE = 2'd1, COUNT = 2'd2, NOTIFIED = 2'd3;\n    reg [1:0] state, next_state;\n    reg [3:0] pattern;\n    reg [1:0] shift_count;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            state <= SEARCH;\n        else\n            state <= next_state;\n    end\n\n    always @(*) begin\n        case (state)\n            SEARCH: begin\n                if (pattern == 4'b1101)\n                    next_state = CAPTURE;\n                else\n                    next_state = SEARCH;\n            end\n            CAPTURE: begin\n                if (shift_count == 2'b11)\n                    next_state = COUNT;\n                else\n                    next_state = CAPTURE;\n            end\n            COUNT: begin\n                if (done_counting)\n                    next_state = NOTIFIED;\n                else\n                    next_state = COUNT;\n            end\n            NOTIFIED: begin\n                if (ack)\n                    next_state = SEARCH;\n                else\n                    next_state = NOTIFIED;\n            end\n            default: next_state = SEARCH;\n        endcase\n    end\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            pattern <= 4'b0000;\n            shift_count <= 2'b00;\n            shift_ena <= 1'b0;\n            counting <= 1'b0;\n            done <= 1'b0;\n        end else begin\n            case (state)\n                SEARCH: begin\n                    pattern <= {pattern[2:0], data};\n                    shift_ena <= 1'b0;\n                    counting <= 1'b0;\n                    done <= 1'b0;\n                end\n                CAPTURE: begin\n                    pattern <= {pattern[2:0], data};\n                    shift_ena <= 1'b1;\n                    counting <= 1'b0;\n                    done <= 1'b0;\n                    shift_count <= shift_count + 1'b1;\n                end\n                COUNT: begin\n                    shift_ena <= 1'b0;\n                    counting <= 1'b1;\n                    done <= 1'b0;\n                end\n                NOTIFIED: begin\n                    shift_ena <= 1'b0;\n                    counting <= 1'b0;\n                    done <= 1'b1;\n                end\n                default: begin\n                    shift_ena <= 1'b0;\n                    counting <= 1'b0;\n                    done <= 1'b0;\n                end\n            endcase\n        end\n    end\nendmodule"}
{"task_id": "conwaylife", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "module top_module(\n    input clk,\n    input load,\n    input [255:0] data,\n    output reg [255:0] q\n);\n\nwire [255:0] next_state;\n\nalways @(posedge clk) begin\n    if (load)\n        q <= data;\n    else\n        q <= next_state;\nend\n\ngenerate\n    genvar i, j;\n    for (i = 0; i < 16; i = i + 1) begin : row\n        for (j = 0; j < 16; j = j + 1) begin : cell\n            assign next_state[i*16+j] = count_neighbours(i, j) == 3 || (q[i*16+j] == 1 && count_neighbours(i, j) == 2);\n        end\n    end\nendgenerate\n\nfunction integer count_neighbours;\n    input [3:0] x, y;\n    variable neighbours;\n    variable wrap_x, wrap_y;\nbegin\n    neighbours = 0;\n    for (wrap_x = x - 1; wrap_x <= x + 1; wrap_x = wrap_x + 1) begin\n        wrap_y = y - 1;\n        for (wrap_y = wrap_y; wrap_y <= y + 1; wrap_y = wrap_y + 1) begin\n            if (wrap_x != x || wrap_y != y) begin\n                if (wrap_x < 0 || wrap_x >= 16 || wrap_y < 0 || wrap_y >= 16)\n                    neighbours = neighbours + q[((wrap_x + 16) % 16)*16 + ((wrap_y + 16) % 16)];\n                else\n                    neighbours = neighbours + q[wrap_x*16 + wrap_y];\n            end\n        end\n    end\n    count_neighbours = neighbours;\nend\nendfunction\n\nendmodule"}
{"task_id": "lemmings3", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    input dig,\n    output walk_left,\n    output walk_right,\n    output aaah,\n    output digging\n);\n    \n    // State encoding\n    localparam IDLE = 3'b000, WALK_LEFT = 3'b001, WALK_RIGHT = 3'b010, FALL = 3'b011, DIG = 3'b100;\n    \n    reg [2:0] current_state, next_state;\n    reg falling, digging_flag;\n    \n    // State register\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            current_state <= IDLE;\n            falling <= 1'b0;\n            digging_flag <= 1'b0;\n        end else begin\n            current_state <= next_state;\n            falling <= (current_state == FALL);\n            digging_flag <= (current_state == DIG);\n        end\n    end\n    \n    // Next state logic\n    always @(*) begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (ground)\n                    next_state = WALK_LEFT;\n                else\n                    next_state = FALL;\n            end\n            WALK_LEFT: begin\n                if (bump_left)\n                    next_state = WALK_RIGHT;\n                else if (bump_right)\n                    next_state = WALK_LEFT;\n                else if (ground && dig)\n                    next_state = DIG;\n                else if (!ground)\n                    next_state = FALL;\n            end\n            WALK_RIGHT: begin\n                if (bump_right)\n                    next_state = WALK_LEFT;\n                else if (bump_left)\n                    next_state = WALK_RIGHT;\n                else if (ground && dig)\n                    next_state = DIG;\n                else if (!ground)\n                    next_state = FALL;\n            end\n            FALL: begin\n                if (ground)\n                    next_state = WALK_LEFT;\n                else if (ground && dig)\n                    next_state = DIG;\n            end\n            DIG: begin\n                if (!ground)\n                    next_state = FALL;\n                else if (ground && !dig)\n                    next_state = WALK_LEFT;\n            end\n        endcase\n    end\n    \n    // Output logic\n    assign walk_left = (current_state == WALK_LEFT);\n    assign walk_right = (current_state == WALK_RIGHT);\n    assign aaah = falling;\n    assign digging = digging_flag;\n    \nendmodule"}
{"task_id": "count_clock", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nCreate a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    input ena,\n    output reg pm,\n    output reg [7:0] hh,\n    output reg [7:0] mm,\n    output reg [7:0] ss\n);\n    \n    // Seconds counter (00-59)\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            ss <= 8'd0;\n        else if (ena)\n            ss <= (ss == 8'd59) ? 8'd0 : ss + 1'b1;\n    end\n\n    // Minutes counter (00-59)\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            mm <= 8'd0;\n        else if (ena && (ss == 8'd59))\n            mm <= (mm == 8'd59) ? 8'd0 : mm + 1'b1;\n    end\n\n    // Hours counter (01-12)\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            hh <= 8'd12;\n        else if (ena && (mm == 8'd59) && (ss == 8'd59))\n            hh <= (hh == 8'd12) ? 8'd1 : hh + 1'b1;\n    end\n\n    // AM/PM indicator\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            pm <= 1'b0;\n        else if (ena && (hh == 8'd12) && (mm == 8'd0) && (ss == 8'd0))\n            pm <= ~pm;\n    end\n\nendmodule"}
{"task_id": "lemmings2", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "module top_module (\n    input clk,\n    input areset,\n    input bump_left,\n    input bump_right,\n    input ground,\n    output walk_left,\n    output walk_right,\n    output aaah\n);\n    localparam [1:0] WALK_LEFT = 2'b00,\n                      WALK_RIGHT = 2'b01,\n                      FALLING = 2'b10,\n                      LANDING = 2'b11;\n    reg [1:0] state, next_state;\n    reg falling;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= WALK_LEFT;\n        else\n            state <= next_state;\n        if (state == FALLING)\n            falling <= 1'b1;\n        else if (state == LANDING)\n            falling <= 1'b0;\n    end\n\n    always @(*) begin\n        case (state)\n            WALK_LEFT: next_state = (bump_left & !bump_right) ? WALK_RIGHT : WALK_LEFT;\n            WALK_RIGHT: next_state = (bump_right & !bump_left) ? WALK_LEFT : WALK_RIGHT;\n            FALLING: next_state = ground ? LANDING : FALLING;\n            LANDING: next_state = (ground & falling) ? WALK_LEFT : LANDING;\n            default: next_state = WALK_LEFT;\n        endcase\n    end\n\n    always @(*) begin\n        walk_left = 1'b0;\n        walk_right = 1'b0;\n        aaah = 1'b0;\n        case (state)\n            WALK_LEFT: begin\n                walk_left = 1'b1;\n                aaah = 1'b0;\n            end\n            WALK_RIGHT: begin\n                walk_right = 1'b1;\n                aaah = 1'b0;\n            end\n            FALLING: aaah = 1'b1;\n        endcase\n    end\n\nendmodule"}
{"task_id": "countbcd", "description": "You are a Verilog expert. Be concise and focused on the key points and avoid repetitive thoughts. Provide the Verilog code design directly.\n\nBuild a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.\nPlease complete the Verilog code below and return the complete module code. Your code should start with:\n```verilog\n", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "module top_module(\n    input clk,\n    input reset,\n    output [3:1] ena,\n    output reg [15:0] q);\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        q <= 16'b0000_0000_0000_0000; // Reset to 0000\n    else begin\n        q[3:0] <= q[3:0] + 1'b1; // Increment the ones digit\n        if (q[3:0] == 4'd9) begin // Check for carry\n            q[3:0] <= 4'b0000; // Reset ones digit\n            ena[1] <= 1'b1; // Enable tens digit\n            if (q[7:4] == 4'd9) begin // Check for carry\n                q[7:4] <= 4'b0000; // Reset tens digit\n                ena[2] <= 1'b1; // Enable hundreds digit\n                if (q[11:8] == 4'd9) begin // Check for carry\n                    q[11:8] <= 4'b0000; // Reset hundreds digit\n                    ena[3] <= 1'b1; // Enable thousands digit\n                end\n                else\n                    ena[2] <= 1'b0; // Disable hundreds digit\n            end\n            else\n                ena[1] <= 1'b0; // Disable tens digit\n        end\n        else\n            ena[1] <= 1'b0; // Disable tens digit\n    end\nend\n\nendmodule"}
